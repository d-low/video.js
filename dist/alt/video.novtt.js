/**
 * @license
 * Video.js 5.0.0-11 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":3}],2:[function(_dereq_,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window;
} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined"){
    module.exports = self;
} else {
    module.exports = {};
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(_dereq_,module,exports){

},{}],4:[function(_dereq_,module,exports){
module.exports = SafeParseTuple

function SafeParseTuple(obj, reviver) {
    var json
    var error = null

    try {
        json = JSON.parse(obj, reviver)
    } catch (err) {
        error = err
    }

    return [error, json]
}

},{}],5:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _button = _dereq_('./button');

var _button2 = _interopRequireDefault(_button);

/* Big Play Button
================================================================================ */
/**
 * Initial play button. Shows before the video has played. The hiding of the
 * big play button is done via CSS and player states.
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var BigPlayButton = (function (_Button) {
  function BigPlayButton() {
    _classCallCheck(this, BigPlayButton);

    if (_Button != null) {
      _Button.apply(this, arguments);
    }
  }

  _inherits(BigPlayButton, _Button);

  _createClass(BigPlayButton, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(BigPlayButton.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-big-play-button',
        innerHTML: '<span aria-hidden="true"></span>',
        'aria-label': 'play video'
      });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.player_.play();
    }
  }]);

  return BigPlayButton;
})(_button2['default']);

_button2['default'].registerComponent('BigPlayButton', BigPlayButton);
exports['default'] = BigPlayButton;
module.exports = exports['default'];

},{"./button":6}],6:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('./component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var _events = _dereq_('./events');

var Events = _interopRequireWildcard(_events);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/* Button - Base class for all buttons
================================================================================ */
/**
 * Base class for all buttons
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Button = (function (_Component) {
  function Button(player, options) {
    _classCallCheck(this, Button);

    _get(Object.getPrototypeOf(Button.prototype), 'constructor', this).call(this, player, options);

    this.emitTapEvents();

    this.on('tap', this.handleClick);
    this.on('click', this.handleClick);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
  }

  _inherits(Button, _Component);

  _createClass(Button, [{
    key: 'createEl',
    value: function createEl(type, props) {
      // Add standard Aria and Tabindex info
      props = Lib.obj.merge({
        className: this.buildCSSClass(),
        'role': 'button',
        'aria-live': 'polite', // let the screen reader user know that the text of the button may change
        tabIndex: 0
      }, props);

      var el = _get(Object.getPrototypeOf(Button.prototype), 'createEl', this).call(this, type, props);

      // if innerHTML hasn't been overridden (bigPlayButton), add content elements
      if (!props.innerHTML) {
        this.contentEl_ = Lib.createEl('div', {
          className: 'vjs-control-content'
        });

        this.controlText_ = Lib.createEl('span', {
          className: 'vjs-control-text',
          innerHTML: this.localize(this.buttonText) || 'Need Text'
        });

        this.contentEl_.appendChild(this.controlText_);
        el.appendChild(this.contentEl_);
      }

      return el;
    }
  }, {
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-control vjs-button ' + _get(Object.getPrototypeOf(Button.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',

    // Click - Override with specific functionality for button
    value: function handleClick() {}
  }, {
    key: 'handleFocus',

    // Focus - Add keyboard functionality to element
    value: function handleFocus() {
      Events.on(_globalDocument2['default'], 'keydown', Lib.bind(this, this.handleKeyPress));
    }
  }, {
    key: 'handleKeyPress',

    // KeyPress (document level) - Trigger click when keys are pressed
    value: function handleKeyPress(event) {
      // Check for space bar (32) or enter (13) keys
      if (event.which === 32 || event.which === 13) {
        event.preventDefault();
        this.handleClick();
      }
    }
  }, {
    key: 'handleBlur',

    // Blur - Remove keyboard triggers
    value: function handleBlur() {
      Events.off(_globalDocument2['default'], 'keydown', Lib.bind(this, this.handleKeyPress));
    }
  }]);

  return Button;
})(_component2['default']);

_component2['default'].registerComponent('Button', Button);
exports['default'] = Button;
module.exports = exports['default'];

},{"./component":7,"./events":43,"./lib":46,"global/document":1}],7:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/**
 * @fileoverview Player Component - Base class for all UI objects
 *
 */

var _libJs = _dereq_('./lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _utilJs = _dereq_('./util.js');

var VjsUtil = _interopRequireWildcard(_utilJs);

var _eventsJs = _dereq_('./events.js');

var Events = _interopRequireWildcard(_eventsJs);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

/**
 * Base UI Component class
 *
 * Components are embeddable UI objects that are represented by both a
 * javascript object and an element in the DOM. They can be children of other
 * components, and can have many children themselves.
 *
 *     // adding a button to the player
 *     var button = player.addChild('button');
 *     button.el(); // -> button element
 *
 *     <div class="video-js">
 *       <div class="vjs-button">Button</div>
 *     </div>
 *
 * Components are also event emitters.
 *
 *     button.on('click', function(){
 *       console.log('Button Clicked!');
 *     });
 *
 *     button.trigger('customevent');
 *
 * @param {Object} player  Main Player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Component = (function () {
  function Component(player, options, ready) {
    _classCallCheck(this, Component);

    // The component might be the player itself and we can't pass `this` to super
    if (!player && this.play) {
      this.player_ = player = this; // eslint-disable-line
    } else {
      this.player_ = player;
    }

    // Make a copy of prototype.options_ to protect against overriding global defaults
    this.options_ = Lib.obj.copy(this.options_);

    // Updated options with supplied options
    options = this.options(options);

    // Get ID from options or options element if one is supplied
    this.id_ = options.id || options.el && options.el.id;

    // If there was no ID from the options, generate one
    if (!this.id_) {
      // Don't require the player ID function in the case of mock players
      var id = player && player.id && player.id() || 'no_player';
      this.id_ = '' + id + '_component_' + Lib.guid++;
    }

    this.name_ = options.name || null;

    // Create element if one wasn't provided in options
    if (options.el) {
      this.el_ = options.el;
    } else if (options.createEl !== false) {
      this.el_ = this.createEl();
    }

    this.children_ = [];
    this.childIndex_ = {};
    this.childNameIndex_ = {};

    // Add any child components in options
    if (options.initChildren !== false) {
      this.initChildren();
    }

    this.ready(ready);
    // Don't want to trigger ready here or it will before init is actually
    // finished for all children that run this constructor

    if (options.reportTouchActivity !== false) {
      this.enableTouchActivity();
    }
  }

  _createClass(Component, [{
    key: 'init',

    // Temp for ES6 class transition, remove before 5.0
    value: function init() {
      // console.log('init called on Component');
      Component.apply(this, arguments);
    }
  }, {
    key: 'dispose',

    /**
     * Dispose of the component and all child components
     */
    value: function dispose() {
      this.trigger({ type: 'dispose', bubbles: false });

      // Dispose all children.
      if (this.children_) {
        for (var i = this.children_.length - 1; i >= 0; i--) {
          if (this.children_[i].dispose) {
            this.children_[i].dispose();
          }
        }
      }

      // Delete child references
      this.children_ = null;
      this.childIndex_ = null;
      this.childNameIndex_ = null;

      // Remove all event listeners.
      this.off();

      // Remove element from DOM
      if (this.el_.parentNode) {
        this.el_.parentNode.removeChild(this.el_);
      }

      Lib.removeData(this.el_);
      this.el_ = null;
    }
  }, {
    key: 'player',

    /**
     * Return the component's player
     *
     * @return {Player}
     */
    value: function player() {
      return this.player_;
    }
  }, {
    key: 'options',

    /**
     * Deep merge of options objects
     *
     * Whenever a property is an object on both options objects
     * the two properties will be merged using Lib.obj.deepMerge.
     *
     * This is used for merging options for child components. We
     * want it to be easy to override individual options on a child
     * component without having to rewrite all the other default options.
     *
     *     Parent.prototype.options_ = {
     *       children: {
     *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
     *         'childTwo': {},
     *         'childThree': {}
     *       }
     *     }
     *     newOptions = {
     *       children: {
     *         'childOne': { 'foo': 'baz', 'abc': '123' }
     *         'childTwo': null,
     *         'childFour': {}
     *       }
     *     }
     *
     *     this.options(newOptions);
     *
     * RESULT
     *
     *     {
     *       children: {
     *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
     *         'childTwo': null, // Disabled. Won't be initialized.
     *         'childThree': {},
     *         'childFour': {}
     *       }
     *     }
     *
     * @param  {Object} obj Object of new option values
     * @return {Object}     A NEW object of this.options_ and obj merged
     */
    value: function options(obj) {
      if (!obj) {
        return this.options_;
      }

      this.options_ = VjsUtil.mergeOptions(this.options_, obj);
      return this.options_;
    }
  }, {
    key: 'el',

    /**
     * Get the component's DOM element
     *
     *     var domEl = myComponent.el();
     *
     * @return {Element}
     */
    value: function el() {
      return this.el_;
    }
  }, {
    key: 'createEl',

    /**
     * Create the component's DOM element
     *
     * @param  {String=} tagName  Element's node type. e.g. 'div'
     * @param  {Object=} attributes An object of element attributes that should be set on the element
     * @return {Element}
     */
    value: function createEl(tagName, attributes) {
      return Lib.createEl(tagName, attributes);
    }
  }, {
    key: 'localize',
    value: function localize(string) {
      var lang = this.player_.language();
      var languages = this.player_.languages();

      if (languages && languages[lang] && languages[lang][string]) {
        return languages[lang][string];
      }

      return string;
    }
  }, {
    key: 'contentEl',

    /**
     * Return the component's DOM element where children are inserted.
     * Will either be the same as el() or a new element defined in createEl().
     *
     * @return {Element}
     */
    value: function contentEl() {
      return this.contentEl_ || this.el_;
    }
  }, {
    key: 'id',

    /**
     * Get the component's ID
     *
     *     var id = myComponent.id();
     *
     * @return {String}
     */
    value: function id() {
      return this.id_;
    }
  }, {
    key: 'name',

    /**
     * Get the component's name. The name is often used to reference the component.
     *
     *     var name = myComponent.name();
     *
     * @return {String}
     */
    value: function name() {
      return this.name_;
    }
  }, {
    key: 'children',

    /**
     * Get an array of all child components
     *
     *     var kids = myComponent.children();
     *
     * @return {Array} The children
     */
    value: function children() {
      return this.children_;
    }
  }, {
    key: 'getChildById',

    /**
     * Returns a child component with the provided ID
     *
     * @return {Component}
     */
    value: function getChildById(id) {
      return this.childIndex_[id];
    }
  }, {
    key: 'getChild',

    /**
     * Returns a child component with the provided name
     *
     * @return {Component}
     */
    value: function getChild(name) {
      return this.childNameIndex_[name];
    }
  }, {
    key: 'addChild',

    /**
     * Adds a child component inside this component
     *
     *     myComponent.el();
     *     // -> <div class='my-component'></div>
     *     myComponent.children();
     *     // [empty array]
     *
     *     var myButton = myComponent.addChild('MyButton');
     *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
     *     // -> myButton === myComonent.children()[0];
     *
     * Pass in options for child constructors and options for children of the child
     *
     *     var myButton = myComponent.addChild('MyButton', {
     *       text: 'Press Me',
     *       children: {
     *         buttonChildExample: {
     *           buttonChildOption: true
     *         }
     *       }
     *     });
     *
     * @param {String|Component} child The class name or instance of a child to add
     * @param {Object=} options Options, including options to be passed to children of the child.
     * @return {Component} The child component (created by this process if a string was used)
     * @suppress {accessControls|checkRegExp|checkTypes|checkVars|const|constantProperty|deprecated|duplicate|es5Strict|fileoverviewTags|globalThis|invalidCasts|missingProperties|nonStandardJsDocs|strictModuleDepCheck|undefinedNames|undefinedVars|unknownDefines|uselessCode|visibility}
     */
    value: function addChild(child) {
      var options = arguments[1] === undefined ? {} : arguments[1];

      var component = undefined;
      var componentName = undefined;

      // If child is a string, create nt with options
      if (typeof child === 'string') {
        componentName = child;

        // Options can also be specified as a boolean, so convert to an empty object if false.
        if (!options) {
          options = {};
        }

        // Same as above, but true is deprecated so show a warning.
        if (options === true) {
          Lib.log.warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
          options = {};
        }

        // If no componentClass in options, assume componentClass is the name lowercased
        // (e.g. playButton)
        var componentClassName = options.componentClass || Lib.capitalize(componentName);

        // Set name through options
        options.name = componentName;

        // Create a new object & element for this controls set
        // If there's no .player_, this is a player
        var ComponentClass = Component.getComponent(componentClassName);

        component = new ComponentClass(this.player_ || this, options);

        // child is a component instance
      } else {
        component = child;
      }

      this.children_.push(component);

      if (typeof component.id === 'function') {
        this.childIndex_[component.id()] = component;
      }

      // If a name wasn't used to create the component, check if we can use the
      // name function of the component
      componentName = componentName || component.name && component.name();

      if (componentName) {
        this.childNameIndex_[componentName] = component;
      }

      // Add the UI object's element to the container div (box)
      // Having an element is not required
      if (typeof component.el === 'function' && component.el()) {
        this.contentEl().appendChild(component.el());
      }

      // Return so it can stored on parent object if desired.
      return component;
    }
  }, {
    key: 'removeChild',

    /**
     * Remove a child component from this component's list of children, and the
     * child component's element from this component's element
     *
     * @param  {Component} component Component to remove
     */
    value: function removeChild(component) {
      if (typeof component === 'string') {
        component = this.getChild(component);
      }

      if (!component || !this.children_) {
        return;
      }

      var childFound = false;

      for (var i = this.children_.length - 1; i >= 0; i--) {
        if (this.children_[i] === component) {
          childFound = true;
          this.children_.splice(i, 1);
          break;
        }
      }

      if (!childFound) {
        return;
      }

      this.childIndex_[component.id()] = null;
      this.childNameIndex_[component.name()] = null;

      var compEl = component.el();

      if (compEl && compEl.parentNode === this.contentEl()) {
        this.contentEl().removeChild(component.el());
      }
    }
  }, {
    key: 'initChildren',

    /**
     * Add and initialize default child components from options
     *
     *     // when an instance of MyComponent is created, all children in options
     *     // will be added to the instance by their name strings and options
     *     MyComponent.prototype.options_.children = {
     *       myChildComponent: {
     *         myChildOption: true
     *       }
     *     }
     *
     *     // Or when creating the component
     *     var myComp = new MyComponent(player, {
     *       children: {
     *         myChildComponent: {
     *           myChildOption: true
     *         }
     *       }
     *     });
     *
     * The children option can also be an Array of child names or
     * child options objects (that also include a 'name' key).
     *
     *     var myComp = new MyComponent(player, {
     *       children: [
     *         'button',
     *         {
     *           name: 'button',
     *           someOtherOption: true
     *         }
     *       ]
     *     });
     *
     */
    value: function initChildren() {
      var _this = this;

      var children = this.options_.children;

      if (children) {
        (function () {
          // `this` is `parent`
          var parentOptions = _this.options();
          var handleAdd = function handleAdd(name, opts) {
            // Allow options for children to be set at the parent options
            // e.g. videojs(id, { controlBar: false });
            // instead of videojs(id, { children: { controlBar: false });
            if (parentOptions[name] !== undefined) {
              opts = parentOptions[name];
            }

            // Allow for disabling default components
            // e.g. options['children']['posterImage'] = false
            if (opts === false) {
              return;
            }

            // Create and add the child component.
            // Add a direct reference to the child by name on the parent instance.
            // If two of the same component are used, different names should be supplied
            // for each
            _this[name] = _this.addChild(name, opts);
          };

          // Allow for an array of children details to passed in the options
          if (Lib.obj.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              var _name = undefined;
              var opts = undefined;

              if (typeof child === 'string') {
                // ['myComponent']
                _name = child;
                opts = {};
              } else {
                // [{ name: 'myComponent', otherOption: true }]
                _name = child.name;
                opts = child;
              }

              handleAdd(_name, opts);
            }
          } else {
            Lib.obj.each(children, handleAdd);
          }
        })();
      }
    }
  }, {
    key: 'buildCSSClass',

    /**
     * Allows sub components to stack CSS class names
     *
     * @return {String} The constructed class name
     */
    value: function buildCSSClass() {
      // Child classes can include a function that does:
      // return 'CLASS NAME' + this._super();
      return '';
    }
  }, {
    key: 'on',

    /**
     * Add an event listener to this component's element
     *
     *     var myFunc = function(){
     *       var myComponent = this;
     *       // Do something when the event is fired
     *     };
     *
     *     myComponent.on('eventType', myFunc);
     *
     * The context of myFunc will be myComponent unless previously bound.
     *
     * Alternatively, you can add a listener to another element or component.
     *
     *     myComponent.on(otherElement, 'eventName', myFunc);
     *     myComponent.on(otherComponent, 'eventName', myFunc);
     *
     * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
     * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
     * will be automatically cleaned up when either component is disposed.
     * It will also bind myComponent as the context of myFunc.
     *
     * **NOTE**: When using this on elements in the page other than window
     * and document (both permanent), if you remove the element from the DOM
     * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
     * references to it and allow the browser to garbage collect it.
     *
     * @param  {String|Component} first   The event type or other component
     * @param  {Function|String}      second  The event handler or event type
     * @param  {Function}             third   The event handler
     * @return {Component}        self
     */
    value: function on(first, second, third) {
      var _this2 = this;

      if (typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.on(this.el_, first, Lib.bind(this, second));

        // Targeting another component or element
      } else {
        (function () {
          var target = first;
          var type = second;
          var fn = Lib.bind(_this2, third);

          // When this component is disposed, remove the listener from the other component
          var removeOnDispose = function removeOnDispose() {
            return _this2.off(target, type, fn);
          };

          // Use the same function ID so we can remove it later it using the ID
          // of the original listener
          removeOnDispose.guid = fn.guid;
          _this2.on('dispose', removeOnDispose);

          // If the other component is disposed first we need to clean the reference
          // to the other component in this component's removeOnDispose listener
          // Otherwise we create a memory leak.
          var cleanRemover = function cleanRemover() {
            return _this2.off('dispose', removeOnDispose);
          };

          // Add the same function ID so we can easily remove it later
          cleanRemover.guid = fn.guid;

          // Check if this is a DOM node
          if (first.nodeName) {
            // Add the listener to the other element
            Events.on(target, type, fn);
            Events.on(target, 'dispose', cleanRemover);

            // Should be a component
            // Not using `instanceof Component` because it makes mock players difficult
          } else if (typeof first.on === 'function') {
            // Add the listener to the other component
            target.on(type, fn);
            target.on('dispose', cleanRemover);
          }
        })();
      }

      return this;
    }
  }, {
    key: 'off',

    /**
     * Remove an event listener from this component's element
     *
     *     myComponent.off('eventType', myFunc);
     *
     * If myFunc is excluded, ALL listeners for the event type will be removed.
     * If eventType is excluded, ALL listeners will be removed from the component.
     *
     * Alternatively you can use `off` to remove listeners that were added to other
     * elements or components using `myComponent.on(otherComponent...`.
     * In this case both the event type and listener function are REQUIRED.
     *
     *     myComponent.off(otherElement, 'eventType', myFunc);
     *     myComponent.off(otherComponent, 'eventType', myFunc);
     *
     * @param  {String=|Component}  first  The event type or other component
     * @param  {Function=|String}       second The listener function or event type
     * @param  {Function=}              third  The listener for other component
     * @return {Component}
     */
    value: function off(first, second, third) {
      if (!first || typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.off(this.el_, first, second);
      } else {
        var target = first;
        var type = second;
        // Ensure there's at least a guid, even if the function hasn't been used
        var fn = Lib.bind(this, third);

        // Remove the dispose listener on this component,
        // which was given the same guid as the event listener
        this.off('dispose', fn);

        if (first.nodeName) {
          // Remove the listener
          Events.off(target, type, fn);
          // Remove the listener for cleaning the dispose listener
          Events.off(target, 'dispose', fn);
        } else {
          target.off(type, fn);
          target.off('dispose', fn);
        }
      }

      return this;
    }
  }, {
    key: 'one',

    /**
     * Add an event listener to be triggered only once and then removed
     *
     *     myComponent.one('eventName', myFunc);
     *
     * Alternatively you can add a listener to another element or component
     * that will be triggered only once.
     *
     *     myComponent.one(otherElement, 'eventName', myFunc);
     *     myComponent.one(otherComponent, 'eventName', myFunc);
     *
     * @param  {String|Component}  first   The event type or other component
     * @param  {Function|String}       second  The listener function or event type
     * @param  {Function=}             third   The listener function for other component
     * @return {Component}
     */
    value: function one(first, second, third) {
      var _this3 = this;

      var _arguments = arguments;

      if (typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.one(this.el_, first, Lib.bind(this, second));
      } else {
        (function () {
          var target = first;
          var type = second;
          var fn = Lib.bind(_this3, third);

          var newFunc = function newFunc() {
            _this3.off(target, type, newFunc);
            fn.apply(null, _arguments);
          };

          // Keep the same function ID so we can remove it later
          newFunc.guid = fn.guid;

          _this3.on(target, type, newFunc);
        })();
      }

      return this;
    }
  }, {
    key: 'trigger',

    /**
     * Trigger an event on an element
     *
     *     myComponent.trigger('eventName');
     *     myComponent.trigger({'type':'eventName'});
     *
     * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
     * @return {Component}       self
     */
    value: function trigger(event) {
      Events.trigger(this.el_, event);
      return this;
    }
  }, {
    key: 'ready',

    /**
     * Bind a listener to the component's ready state
     *
     * Different from event listeners in that if the ready event has already happened
     * it will trigger the function immediately.
     *
     * @param  {Function} fn Ready listener
     * @return {Component}
     */
    value: function ready(fn) {
      if (fn) {
        if (this.isReady_) {
          fn.call(this);
        } else {
          this.readyQueue_ = this.readyQueue_ || [];
          this.readyQueue_.push(fn);
        }
      }
      return this;
    }
  }, {
    key: 'triggerReady',

    /**
     * Trigger the ready listeners
     *
     * @return {Component}
     */
    value: function triggerReady() {
      this.isReady_ = true;

      var readyQueue = this.readyQueue_;

      if (readyQueue && readyQueue.length > 0) {

        for (var i = 0; i < readyQueue.length; i++) {
          readyQueue[i].call(this);
        }

        // Reset Ready Queue
        this.readyQueue_ = [];

        // Allow for using event listeners also, in case you want to do something everytime a source is ready.
        this.trigger('ready');
      }
    }
  }, {
    key: 'hasClass',

    /**
     * Check if a component's element has a CSS class name
     *
     * @param {String} classToCheck Classname to check
     * @return {Component}
     */
    value: function hasClass(classToCheck) {
      return Lib.hasClass(this.el_, classToCheck);
    }
  }, {
    key: 'addClass',

    /**
     * Add a CSS class name to the component's element
     *
     * @param {String} classToAdd Classname to add
     * @return {Component}
     */
    value: function addClass(classToAdd) {
      Lib.addClass(this.el_, classToAdd);
      return this;
    }
  }, {
    key: 'removeClass',

    /**
     * Remove a CSS class name from the component's element
     *
     * @param {String} classToRemove Classname to remove
     * @return {Component}
     */
    value: function removeClass(classToRemove) {
      Lib.removeClass(this.el_, classToRemove);
      return this;
    }
  }, {
    key: 'show',

    /**
     * Show the component element if hidden
     *
     * @return {Component}
     */
    value: function show() {
      this.removeClass('vjs-hidden');
      return this;
    }
  }, {
    key: 'hide',

    /**
     * Hide the component element if currently showing
     *
     * @return {Component}
     */
    value: function hide() {
      this.addClass('vjs-hidden');
      return this;
    }
  }, {
    key: 'lockShowing',

    /**
     * Lock an item in its visible state
     * To be used with fadeIn/fadeOut.
     *
     * @return {Component}
     * @private
     */
    value: function lockShowing() {
      this.addClass('vjs-lock-showing');
      return this;
    }
  }, {
    key: 'unlockShowing',

    /**
     * Unlock an item to be hidden
     * To be used with fadeIn/fadeOut.
     *
     * @return {Component}
     * @private
     */
    value: function unlockShowing() {
      this.removeClass('vjs-lock-showing');
      return this;
    }
  }, {
    key: 'width',

    /**
     * Set or get the width of the component (CSS values)
     *
     * Setting the video tag dimension values only works with values in pixels.
     * Percent values will not work.
     * Some percents can be used, but width()/height() will return the number + %,
     * not the actual computed width/height.
     *
     * @param  {Number|String=} num   Optional width number
     * @param  {Boolean} skipListeners Skip the 'resize' event trigger
     * @return {Component} This component, when setting the width
     * @return {Number|String} The width, when getting
     */
    value: function width(num, skipListeners) {
      return this.dimension('width', num, skipListeners);
    }
  }, {
    key: 'height',

    /**
     * Get or set the height of the component (CSS values)
     *
     * Setting the video tag dimension values only works with values in pixels.
     * Percent values will not work.
     * Some percents can be used, but width()/height() will return the number + %,
     * not the actual computed width/height.
     *
     * @param  {Number|String=} num     New component height
     * @param  {Boolean=} skipListeners Skip the resize event trigger
     * @return {Component} This component, when setting the height
     * @return {Number|String} The height, when getting
     */
    value: function height(num, skipListeners) {
      return this.dimension('height', num, skipListeners);
    }
  }, {
    key: 'dimensions',

    /**
     * Set both width and height at the same time
     *
     * @param  {Number|String} width
     * @param  {Number|String} height
     * @return {Component} The component
     */
    value: function dimensions(width, height) {
      // Skip resize listeners on width for optimization
      return this.width(width, true).height(height);
    }
  }, {
    key: 'dimension',

    /**
     * Get or set width or height
     *
     * This is the shared code for the width() and height() methods.
     * All for an integer, integer + 'px' or integer + '%';
     *
     * Known issue: Hidden elements officially have a width of 0. We're defaulting
     * to the style.width value and falling back to computedStyle which has the
     * hidden element issue. Info, but probably not an efficient fix:
     * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
     *
     * @param  {String} widthOrHeight  'width' or 'height'
     * @param  {Number|String=} num     New dimension
     * @param  {Boolean=} skipListeners Skip resize event trigger
     * @return {Component} The component if a dimension was set
     * @return {Number|String} The dimension if nothing was set
     * @private
     */
    value: function dimension(widthOrHeight, num, skipListeners) {
      if (num !== undefined) {
        // Set to zero if null or literally NaN (NaN !== NaN)
        if (num === null || num !== num) {
          num = 0;
        }

        // Check if using css width/height (% or px) and adjust
        if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
          this.el_.style[widthOrHeight] = num;
        } else if (num === 'auto') {
          this.el_.style[widthOrHeight] = '';
        } else {
          this.el_.style[widthOrHeight] = num + 'px';
        }

        // skipListeners allows us to avoid triggering the resize event when setting both width and height
        if (!skipListeners) {
          this.trigger('resize');
        }

        // Return component
        return this;
      }

      // Not setting a value, so getting it
      // Make sure element exists
      if (!this.el_) {
        return 0;
      }

      // Get dimension value from style
      var val = this.el_.style[widthOrHeight];
      var pxIndex = val.indexOf('px');

      if (pxIndex !== -1) {
        // Return the pixel value with no 'px'
        return parseInt(val.slice(0, pxIndex), 10);
      }

      // No px so using % or no style was set, so falling back to offsetWidth/height
      // If component has display:none, offset will return 0
      // TODO: handle display:none and no dimension style using px
      return parseInt(this.el_['offset' + Lib.capitalize(widthOrHeight)], 10);

      // ComputedStyle version.
      // Only difference is if the element is hidden it will return
      // the percent value (e.g. '100%'')
      // instead of zero like offsetWidth returns.
      // var val = Lib.getComputedStyleValue(this.el_, widthOrHeight);
      // var pxIndex = val.indexOf('px');

      // if (pxIndex !== -1) {
      //   return val.slice(0, pxIndex);
      // } else {
      //   return val;
      // }
    }
  }, {
    key: 'emitTapEvents',

    /**
     * Emit 'tap' events when touch events are supported
     *
     * This is used to support toggling the controls through a tap on the video.
     *
     * We're requiring them to be enabled because otherwise every component would
     * have this extra overhead unnecessarily, on mobile devices where extra
     * overhead is especially bad.
     * @private
     */
    value: function emitTapEvents() {
      // Track the start time so we can determine how long the touch lasted
      var touchStart = 0;
      var firstTouch = null;

      // Maximum movement allowed during a touch event to still be considered a tap
      // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
      var tapMovementThreshold = 10;

      // The maximum length a touch can be while still being considered a tap
      var touchTimeThreshold = 200;

      var couldBeTap = undefined;

      this.on('touchstart', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length === 1) {
          firstTouch = Lib.obj.copy(event.touches[0]);
          // Record start time so we can detect a tap vs. "touch and hold"
          touchStart = new Date().getTime();
          // Reset couldBeTap tracking
          couldBeTap = true;
        }
      });

      this.on('touchmove', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length > 1) {
          couldBeTap = false;
        } else if (firstTouch) {
          // Some devices will throw touchmoves for all but the slightest of taps.
          // So, if we moved only a small distance, this could still be a tap
          var xdiff = event.touches[0].pageX - firstTouch.pageX;
          var ydiff = event.touches[0].pageY - firstTouch.pageY;
          var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

          if (touchDistance > tapMovementThreshold) {
            couldBeTap = false;
          }
        }
      });

      var noTap = function noTap() {
        couldBeTap = false;
      };

      // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
      this.on('touchleave', noTap);
      this.on('touchcancel', noTap);

      // When the touch ends, measure how long it took and trigger the appropriate
      // event
      this.on('touchend', function (event) {
        firstTouch = null;
        // Proceed only if the touchmove/leave/cancel event didn't happen
        if (couldBeTap === true) {
          // Measure how long the touch lasted
          var touchTime = new Date().getTime() - touchStart;

          // Make sure the touch was less than the threshold to be considered a tap
          if (touchTime < touchTimeThreshold) {
            // Don't let browser turn this into a click
            event.preventDefault();
            this.trigger('tap');
            // It may be good to copy the touchend event object and change the
            // type to tap, if the other event properties aren't exact after
            // Lib.fixEvent runs (e.g. event.target)
          }
        }
      });
    }
  }, {
    key: 'enableTouchActivity',

    /**
     * Report user touch activity when touch events occur
     *
     * User activity is used to determine when controls should show/hide. It's
     * relatively simple when it comes to mouse events, because any mouse event
     * should show the controls. So we capture mouse events that bubble up to the
     * player and report activity when that happens.
     *
     * With touch events it isn't as easy. We can't rely on touch events at the
     * player level, because a tap (touchstart + touchend) on the video itself on
     * mobile devices is meant to turn controls off (and on). User activity is
     * checked asynchronously, so what could happen is a tap event on the video
     * turns the controls off, then the touchend event bubbles up to the player,
     * which if it reported user activity, would turn the controls right back on.
     * (We also don't want to completely block touch events from bubbling up)
     *
     * Also a touchmove, touch+hold, and anything other than a tap is not supposed
     * to turn the controls back on on a mobile device.
     *
     * Here we're setting the default component behavior to report user activity
     * whenever touch events happen, and this can be turned off by components that
     * want touch events to act differently.
     */
    value: function enableTouchActivity() {
      // Don't continue if the root player doesn't support reporting user activity
      if (!this.player() || !this.player().reportUserActivity) {
        return;
      }

      // listener for reporting that the user is active
      var report = Lib.bind(this.player(), this.player().reportUserActivity);

      var touchHolding = undefined;

      this.on('touchstart', function () {
        report();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(touchHolding);
        // report at the same interval as activityCheck
        touchHolding = this.setInterval(report, 250);
      });

      var touchEnd = function touchEnd(event) {
        report();
        // stop the interval that maintains activity if the touch is holding
        this.clearInterval(touchHolding);
      };

      this.on('touchmove', report);
      this.on('touchend', touchEnd);
      this.on('touchcancel', touchEnd);
    }
  }, {
    key: 'setTimeout',

    /**
     * Creates timeout and sets up disposal automatically.
     * @param {Function} fn The function to run after the timeout.
     * @param {Number} timeout Number of ms to delay before executing specified function.
     * @return {Number} Returns the timeout ID
     */
    value: function setTimeout(fn, timeout) {
      fn = Lib.bind(this, fn);

      // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
      var timeoutId = _globalWindow2['default'].setTimeout(fn, timeout);

      var disposeFn = function disposeFn() {
        this.clearTimeout(timeoutId);
      };

      disposeFn.guid = 'vjs-timeout-' + timeoutId;

      this.on('dispose', disposeFn);

      return timeoutId;
    }
  }, {
    key: 'clearTimeout',

    /**
     * Clears a timeout and removes the associated dispose listener
     * @param {Number} timeoutId The id of the timeout to clear
     * @return {Number} Returns the timeout ID
     */
    value: function clearTimeout(timeoutId) {
      _globalWindow2['default'].clearTimeout(timeoutId);

      var disposeFn = function disposeFn() {};

      disposeFn.guid = 'vjs-timeout-' + timeoutId;

      this.off('dispose', disposeFn);

      return timeoutId;
    }
  }, {
    key: 'setInterval',

    /**
     * Creates an interval and sets up disposal automatically.
     * @param {Function} fn The function to run every N seconds.
     * @param {Number} interval Number of ms to delay before executing specified function.
     * @return {Number} Returns the interval ID
     */
    value: function setInterval(fn, interval) {
      fn = Lib.bind(this, fn);

      var intervalId = _globalWindow2['default'].setInterval(fn, interval);

      var disposeFn = function disposeFn() {
        this.clearInterval(intervalId);
      };

      disposeFn.guid = 'vjs-interval-' + intervalId;

      this.on('dispose', disposeFn);

      return intervalId;
    }
  }, {
    key: 'clearInterval',

    /**
     * Clears an interval and removes the associated dispose listener
     * @param {Number} intervalId The id of the interval to clear
     * @return {Number} Returns the interval ID
     */
    value: function clearInterval(intervalId) {
      _globalWindow2['default'].clearInterval(intervalId);

      var disposeFn = function disposeFn() {};

      disposeFn.guid = 'vjs-interval-' + intervalId;

      this.off('dispose', disposeFn);

      return intervalId;
    }
  }], [{
    key: 'registerComponent',
    value: function registerComponent(name, comp) {
      if (!Component.components_) {
        Component.components_ = {};
      }

      Component.components_[name] = comp;
      return comp;
    }
  }, {
    key: 'getComponent',
    value: function getComponent(name) {
      if (Component.components_ && Component.components_[name]) {
        return Component.components_[name];
      }

      if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
        Lib.log.warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
        return _globalWindow2['default'].videojs[name];
      }
    }
  }, {
    key: 'extend',
    value: function extend(props) {
      props = props || {};
      // Set up the constructor using the supplied init method
      // or using the init of the parent object
      // Make sure to check the unobfuscated version for external libs
      var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
      // In Resig's simple class inheritance (previously used) the constructor
      //  is a function that calls `this.init.apply(arguments)`
      // However that would prevent us from using `ParentObject.call(this);`
      //  in a Child constructor because the `this` in `this.init`
      //  would still refer to the Child and cause an infinite loop.
      // We would instead have to do
      //    `ParentObject.prototype.init.apply(this, arguments);`
      //  Bleh. We're not creating a _super() function, so it's good to keep
      //  the parent constructor reference simple.
      var subObj = function subObj() {
        init.apply(this, arguments);
      };

      // Inherit from this object's prototype
      subObj.prototype = Lib.obj.create(this.prototype);
      // Reset the constructor property for subObj otherwise
      // instances of subObj would have the constructor of the parent Object
      subObj.prototype.constructor = subObj;

      // Make the class extendable
      subObj.extend = Component.extend;
      // Make a function for creating instances
      // subObj.create = CoreObject.create;

      // Extend subObj's prototype with functions and other properties from props
      for (var _name2 in props) {
        if (props.hasOwnProperty(_name2)) {
          subObj.prototype[_name2] = props[_name2];
        }
      }

      return subObj;
    }
  }]);

  return Component;
})();

Component.registerComponent('Component', Component);
exports['default'] = Component;
module.exports = exports['default'];

},{"./events.js":43,"./lib.js":46,"./util.js":70,"global/window":2}],8:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

// Required children

var _playToggleJs = _dereq_('./play-toggle.js');

var _playToggleJs2 = _interopRequireDefault(_playToggleJs);

var _timeControlsCurrentTimeDisplayJs = _dereq_('./time-controls/current-time-display.js');

var _timeControlsCurrentTimeDisplayJs2 = _interopRequireDefault(_timeControlsCurrentTimeDisplayJs);

var _timeControlsDurationDisplayJs = _dereq_('./time-controls/duration-display.js');

var _timeControlsDurationDisplayJs2 = _interopRequireDefault(_timeControlsDurationDisplayJs);

var _timeControlsTimeDividerJs = _dereq_('./time-controls/time-divider.js');

var _timeControlsTimeDividerJs2 = _interopRequireDefault(_timeControlsTimeDividerJs);

var _timeControlsRemainingTimeDisplayJs = _dereq_('./time-controls/remaining-time-display.js');

var _timeControlsRemainingTimeDisplayJs2 = _interopRequireDefault(_timeControlsRemainingTimeDisplayJs);

var _liveDisplayJs = _dereq_('./live-display.js');

var _liveDisplayJs2 = _interopRequireDefault(_liveDisplayJs);

var _progressControlProgressControlJs = _dereq_('./progress-control/progress-control.js');

var _progressControlProgressControlJs2 = _interopRequireDefault(_progressControlProgressControlJs);

var _fullscreenToggleJs = _dereq_('./fullscreen-toggle.js');

var _fullscreenToggleJs2 = _interopRequireDefault(_fullscreenToggleJs);

var _volumeControlVolumeControlJs = _dereq_('./volume-control/volume-control.js');

var _volumeControlVolumeControlJs2 = _interopRequireDefault(_volumeControlVolumeControlJs);

var _volumeMenuButtonJs = _dereq_('./volume-menu-button.js');

var _volumeMenuButtonJs2 = _interopRequireDefault(_volumeMenuButtonJs);

var _muteToggleJs = _dereq_('./mute-toggle.js');

var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

var _textTrackControlsChaptersButtonJs = _dereq_('./text-track-controls/chapters-button.js');

var _textTrackControlsChaptersButtonJs2 = _interopRequireDefault(_textTrackControlsChaptersButtonJs);

var _textTrackControlsSubtitlesButtonJs = _dereq_('./text-track-controls/subtitles-button.js');

var _textTrackControlsSubtitlesButtonJs2 = _interopRequireDefault(_textTrackControlsSubtitlesButtonJs);

var _textTrackControlsCaptionsButtonJs = _dereq_('./text-track-controls/captions-button.js');

var _textTrackControlsCaptionsButtonJs2 = _interopRequireDefault(_textTrackControlsCaptionsButtonJs);

var _playbackRateMenuPlaybackRateMenuButtonJs = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');

var _playbackRateMenuPlaybackRateMenuButtonJs2 = _interopRequireDefault(_playbackRateMenuPlaybackRateMenuButtonJs);

var _spacerControlsCustomControlSpacerJs = _dereq_('./spacer-controls/custom-control-spacer.js');

var _spacerControlsCustomControlSpacerJs2 = _interopRequireDefault(_spacerControlsCustomControlSpacerJs);

/**
 * Container of main controls
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 * @extends Component
 */

var ControlBar = (function (_Component) {
  function ControlBar() {
    _classCallCheck(this, ControlBar);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(ControlBar, _Component);

  _createClass(ControlBar, [{
    key: 'createEl',
    value: function createEl() {
      return Lib.createEl('div', {
        className: 'vjs-control-bar'
      });
    }
  }]);

  return ControlBar;
})(_componentJs2['default']);

ControlBar.prototype.options_ = {
  loadEvent: 'play',
  children: ['playToggle', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'muteToggle', 'volumeControl', 'chaptersButton', 'subtitlesButton', 'captionsButton', 'volumeMenuButton', 'fullscreenToggle']
};

_componentJs2['default'].registerComponent('ControlBar', ControlBar);
exports['default'] = ControlBar;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46,"./fullscreen-toggle.js":9,"./live-display.js":10,"./mute-toggle.js":11,"./play-toggle.js":12,"./playback-rate-menu/playback-rate-menu-button.js":13,"./progress-control/progress-control.js":17,"./spacer-controls/custom-control-spacer.js":20,"./text-track-controls/captions-button.js":23,"./text-track-controls/chapters-button.js":24,"./text-track-controls/subtitles-button.js":27,"./time-controls/current-time-display.js":30,"./time-controls/duration-display.js":31,"./time-controls/remaining-time-display.js":32,"./time-controls/time-divider.js":33,"./volume-control/volume-control.js":35,"./volume-menu-button.js":38}],9:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _button = _dereq_('../button');

var _button2 = _interopRequireDefault(_button);

/**
 * Toggle fullscreen video
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @extends vjs.Button
 */

var FullscreenToggle = (function (_Button) {
  function FullscreenToggle() {
    _classCallCheck(this, FullscreenToggle);

    if (_Button != null) {
      _Button.apply(this, arguments);
    }
  }

  _inherits(FullscreenToggle, _Button);

  _createClass(FullscreenToggle, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-fullscreen-control ' + _get(Object.getPrototypeOf(FullscreenToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      if (!this.player_.isFullscreen()) {
        this.player_.requestFullscreen();
        this.controlText_.innerHTML = this.localize('Non-Fullscreen');
      } else {
        this.player_.exitFullscreen();
        this.controlText_.innerHTML = this.localize('Fullscreen');
      }
    }
  }]);

  return FullscreenToggle;
})(_button2['default']);

FullscreenToggle.prototype.buttonText = 'Fullscreen';

_button2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
exports['default'] = FullscreenToggle;
module.exports = exports['default'];

},{"../button":6}],10:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Displays the live indicator
 * TODO - Future make it click to snap to live
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var LiveDisplay = (function (_Component) {
  function LiveDisplay() {
    _classCallCheck(this, LiveDisplay);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(LiveDisplay, _Component);

  _createClass(LiveDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(LiveDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-live-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-live-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE'),
        'aria-live': 'off'
      });

      el.appendChild(this.contentEl_);

      return el;
    }
  }]);

  return LiveDisplay;
})(_component2['default']);

_component2['default'].registerComponent('LiveDisplay', LiveDisplay);
exports['default'] = LiveDisplay;
module.exports = exports['default'];

},{"../component":7,"../lib":46}],11:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _button = _dereq_('../button');

var _button2 = _interopRequireDefault(_button);

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * A button component for muting the audio
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var MuteToggle = (function (_Button) {
  function MuteToggle(player, options) {
    _classCallCheck(this, MuteToggle);

    _get(Object.getPrototypeOf(MuteToggle.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'volumechange', this.update);

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech['featuresVolumeControl'] === false) {
      this.addClass('vjs-hidden');
    }

    this.on(player, 'loadstart', function () {
      if (player.tech['featuresVolumeControl'] === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
  }

  _inherits(MuteToggle, _Button);

  _createClass(MuteToggle, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(MuteToggle.prototype), 'createEl', this).call(this, 'div', {
        className: this.buildCSSClass(),
        innerHTML: '<div><span class="vjs-control-text">' + this.localize('Mute') + '</span></div>'
      });
    }
  }, {
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-mute-control ' + _get(Object.getPrototypeOf(MuteToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.player_.muted(this.player_.muted() ? false : true);
    }
  }, {
    key: 'update',
    value: function update() {
      var vol = this.player_.volume(),
          level = 3;

      if (vol === 0 || this.player_.muted()) {
        level = 0;
      } else if (vol < 0.33) {
        level = 1;
      } else if (vol < 0.67) {
        level = 2;
      }

      // Don't rewrite the button text if the actual text doesn't change.
      // This causes unnecessary and confusing information for screen reader users.
      // This check is needed because this function gets called every time the volume level is changed.
      var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
      var localizedMute = this.localize(toMute);
      if (this.el_.children[0].children[0].innerHTML !== localizedMute) {
        this.el_.children[0].children[0].innerHTML = localizedMute;
      }

      /* TODO improve muted icon classes */
      for (var i = 0; i < 4; i++) {
        Lib.removeClass(this.el_, 'vjs-vol-' + i);
      }
      Lib.addClass(this.el_, 'vjs-vol-' + level);
    }
  }]);

  return MuteToggle;
})(_button2['default']);

_component2['default'].registerComponent('MuteToggle', MuteToggle);
exports['default'] = MuteToggle;
module.exports = exports['default'];

},{"../button":6,"../component":7,"../lib":46}],12:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _button = _dereq_('../button');

var _button2 = _interopRequireDefault(_button);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Button to toggle between play and pause
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var PlayToggle = (function (_Button) {
  function PlayToggle(player, options) {
    _classCallCheck(this, PlayToggle);

    _get(Object.getPrototypeOf(PlayToggle.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'play', this.handlePlay);
    this.on(player, 'pause', this.handlePause);
  }

  _inherits(PlayToggle, _Button);

  _createClass(PlayToggle, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-play-control ' + _get(Object.getPrototypeOf(PlayToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',

    // handleClick - Toggle between play and pause
    value: function handleClick() {
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    }
  }, {
    key: 'handlePlay',

    // handlePlay - Add the vjs-playing class to the element so it can change appearance
    value: function handlePlay() {
      this.removeClass('vjs-paused');
      this.addClass('vjs-playing');
      this.el_.children[0].children[0].innerHTML = this.localize('Pause'); // change the button text to "Pause"
    }
  }, {
    key: 'handlePause',

    // handlePause - Add the vjs-paused class to the element so it can change appearance
    value: function handlePause() {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      this.el_.children[0].children[0].innerHTML = this.localize('Play'); // change the button text to "Play"
    }
  }]);

  return PlayToggle;
})(_button2['default']);

PlayToggle.prototype.buttonText = 'Play';

_button2['default'].registerComponent('PlayToggle', PlayToggle);
exports['default'] = PlayToggle;
module.exports = exports['default'];

},{"../button":6,"../lib":46}],13:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

var _menuMenuJs = _dereq_('../../menu/menu.js');

var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

var _playbackRateMenuItemJs = _dereq_('./playback-rate-menu-item.js');

var _playbackRateMenuItemJs2 = _interopRequireDefault(_playbackRateMenuItemJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * The component for controlling the playback rate
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PlaybackRateMenuButton = (function (_MenuButton) {
  function PlaybackRateMenuButton(player, options) {
    _classCallCheck(this, PlaybackRateMenuButton);

    _get(Object.getPrototypeOf(PlaybackRateMenuButton.prototype), 'constructor', this).call(this, player, options);

    this.updateVisibility();
    this.updateLabel();

    this.on(player, 'loadstart', this.updateVisibility);
    this.on(player, 'ratechange', this.updateLabel);
  }

  _inherits(PlaybackRateMenuButton, _MenuButton);

  _createClass(PlaybackRateMenuButton, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(PlaybackRateMenuButton.prototype), 'createEl', this).call(this);

      this.labelEl_ = Lib.createEl('div', {
        className: 'vjs-playback-rate-value',
        innerHTML: 1
      });

      el.appendChild(this.labelEl_);

      return el;
    }
  }, {
    key: 'createMenu',

    // Menu creation
    value: function createMenu() {
      var menu = new _menuMenuJs2['default'](this.player());
      var rates = this.player().options()['playbackRates'];

      if (rates) {
        for (var i = rates.length - 1; i >= 0; i--) {
          menu.addChild(new _playbackRateMenuItemJs2['default'](this.player(), { 'rate': rates[i] + 'x' }));
        }
      }

      return menu;
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Current playback rate
      this.el().setAttribute('aria-valuenow', this.player().playbackRate());
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // select next rate option
      var currentRate = this.player().playbackRate();
      var rates = this.player().options()['playbackRates'];
      // this will select first one if the last one currently selected
      var newRate = rates[0];
      for (var i = 0; i < rates.length; i++) {
        if (rates[i] > currentRate) {
          newRate = rates[i];
          break;
        }
      }
      this.player().playbackRate(newRate);
    }
  }, {
    key: 'playbackRateSupported',
    value: function playbackRateSupported() {
      return this.player().tech && this.player().tech['featuresPlaybackRate'] && this.player().options()['playbackRates'] && this.player().options()['playbackRates'].length > 0;
    }
  }, {
    key: 'updateVisibility',

    /**
     * Hide playback rate controls when they're no playback rate options to select
     */
    value: function updateVisibility() {
      if (this.playbackRateSupported()) {
        this.removeClass('vjs-hidden');
      } else {
        this.addClass('vjs-hidden');
      }
    }
  }, {
    key: 'updateLabel',

    /**
     * Update button label when rate changed
     */
    value: function updateLabel() {
      if (this.playbackRateSupported()) {
        this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
      }
    }
  }]);

  return PlaybackRateMenuButton;
})(_menuMenuButtonJs2['default']);

PlaybackRateMenuButton.prototype.buttonText = 'Playback Rate';
PlaybackRateMenuButton.prototype.className = 'vjs-playback-rate';

_menuMenuButtonJs2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
exports['default'] = PlaybackRateMenuButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-button.js":49,"../../menu/menu.js":51,"./playback-rate-menu-item.js":14}],14:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

/**
 * The specific menu item type for selecting a playback rate
 *
 * @constructor
 */

var PlaybackRateMenuItem = (function (_MenuItem) {
  function PlaybackRateMenuItem(player, options) {
    _classCallCheck(this, PlaybackRateMenuItem);

    var label = options['rate'];
    var rate = parseFloat(label, 10);

    // Modify options for parent MenuItem class's init.
    options['label'] = label;
    options['selected'] = rate === 1;
    _get(Object.getPrototypeOf(PlaybackRateMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.label = label;
    this.rate = rate;

    this.on(player, 'ratechange', this.update);
  }

  _inherits(PlaybackRateMenuItem, _MenuItem);

  _createClass(PlaybackRateMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      _get(Object.getPrototypeOf(PlaybackRateMenuItem.prototype), 'handleClick', this).call(this);
      this.player().playbackRate(this.rate);
    }
  }, {
    key: 'update',
    value: function update() {
      this.selected(this.player().playbackRate() === this.rate);
    }
  }]);

  return PlaybackRateMenuItem;
})(_menuMenuItemJs2['default']);

PlaybackRateMenuItem.prototype.contentElType = 'button';

_menuMenuItemJs2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
exports['default'] = PlaybackRateMenuItem;
module.exports = exports['default'];

},{"../../menu/menu-item.js":50}],15:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * Shows load progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var LoadProgressBar = (function (_Component) {
  function LoadProgressBar(player, options) {
    _classCallCheck(this, LoadProgressBar);

    _get(Object.getPrototypeOf(LoadProgressBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'progress', this.update);
  }

  _inherits(LoadProgressBar, _Component);

  _createClass(LoadProgressBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(LoadProgressBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-load-progress',
        innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var buffered = this.player_.buffered();
      var duration = this.player_.duration();
      var bufferedEnd = this.player_.bufferedEnd();
      var children = this.el_.children;

      // get the percent width of a time compared to the total end
      var percentify = function percentify(time, end) {
        var percent = time / end || 0; // no NaN
        return (percent >= 1 ? 1 : percent) * 100 + '%';
      };

      // update the width of the progress bar
      this.el_.style.width = percentify(bufferedEnd, duration);

      // add child elements to represent the individual buffered time ranges
      for (var i = 0; i < buffered.length; i++) {
        var start = buffered.start(i);
        var end = buffered.end(i);
        var part = children[i];

        if (!part) {
          part = this.el_.appendChild(Lib.createEl());
        }

        // set the percent based on the width of the progress bar (bufferedEnd)
        part.style.left = percentify(start, bufferedEnd);
        part.style.width = percentify(end - start, bufferedEnd);
      }

      // remove unused buffered range elements
      for (var i = children.length; i > buffered.length; i--) {
        this.el_.removeChild(children[i - 1]);
      }
    }
  }]);

  return LoadProgressBar;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
exports['default'] = LoadProgressBar;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],16:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

/**
 * Shows play progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PlayProgressBar = (function (_Component) {
  function PlayProgressBar() {
    _classCallCheck(this, PlayProgressBar);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(PlayProgressBar, _Component);

  _createClass(PlayProgressBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(PlayProgressBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-play-progress',
        innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
      });
    }
  }]);

  return PlayProgressBar;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
exports['default'] = PlayProgressBar;
module.exports = exports['default'];

},{"../../component.js":7}],17:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _seekBarJs = _dereq_('./seek-bar.js');

var _seekBarJs2 = _interopRequireDefault(_seekBarJs);

/**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var ProgressControl = (function (_Component) {
  function ProgressControl() {
    _classCallCheck(this, ProgressControl);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(ProgressControl, _Component);

  _createClass(ProgressControl, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(ProgressControl.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-progress-control vjs-control'
      });
    }
  }]);

  return ProgressControl;
})(_componentJs2['default']);

ProgressControl.prototype.options_ = {
  children: {
    'seekBar': {}
  }
};

_componentJs2['default'].registerComponent('ProgressControl', ProgressControl);
exports['default'] = ProgressControl;
module.exports = exports['default'];

},{"../../component.js":7,"./seek-bar.js":18}],18:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _sliderSliderJs = _dereq_('../../slider/slider.js');

var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

var _loadProgressBarJs = _dereq_('./load-progress-bar.js');

var _loadProgressBarJs2 = _interopRequireDefault(_loadProgressBarJs);

var _playProgressBarJs = _dereq_('./play-progress-bar.js');

var _playProgressBarJs2 = _interopRequireDefault(_playProgressBarJs);

var _seekHandleJs = _dereq_('./seek-handle.js');

var _seekHandleJs2 = _interopRequireDefault(_seekHandleJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * Seek Bar and holder for the progress bars
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SeekBar = (function (_Slider) {
  function SeekBar(player, options) {
    _classCallCheck(this, SeekBar);

    _get(Object.getPrototypeOf(SeekBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'timeupdate', this.updateARIAAttributes);
    player.ready(Lib.bind(this, this.updateARIAAttributes));
  }

  _inherits(SeekBar, _Slider);

  _createClass(SeekBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(SeekBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-progress-holder',
        'aria-label': 'video progress bar'
      });
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Allows for smooth scrubbing, when player can't keep up.
      var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      this.el_.setAttribute('aria-valuenow', Lib.round(this.getPercent() * 100, 2)); // machine readable value of progress bar (percentage complete)
      this.el_.setAttribute('aria-valuetext', Lib.formatTime(time, this.player_.duration())); // human readable value of progress bar (time complete)
    }
  }, {
    key: 'getPercent',
    value: function getPercent() {
      var percent = this.player_.currentTime() / this.player_.duration();
      return percent >= 1 ? 1 : percent;
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      _get(Object.getPrototypeOf(SeekBar.prototype), 'handleMouseDown', this).call(this, event);

      this.player_.scrubbing(true);

      this.videoWasPlaying = !this.player_.paused();
      this.player_.pause();
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(event) {
      var newTime = this.calculateDistance(event) * this.player_.duration();

      // Don't let video end while scrubbing.
      if (newTime === this.player_.duration()) {
        newTime = newTime - 0.1;
      }

      // Set new time (tell player to seek to new time)
      this.player_.currentTime(newTime);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp(event) {
      _get(Object.getPrototypeOf(SeekBar.prototype), 'handleMouseUp', this).call(this, event);

      this.player_.scrubbing(false);
      if (this.videoWasPlaying) {
        this.player_.play();
      }
    }
  }, {
    key: 'stepForward',
    value: function stepForward() {
      this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
    }
  }, {
    key: 'stepBack',
    value: function stepBack() {
      this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
    }
  }]);

  return SeekBar;
})(_sliderSliderJs2['default']);

SeekBar.prototype.options_ = {
  children: {
    'loadProgressBar': {},
    'playProgressBar': {},
    'seekHandle': {}
  },
  'barName': 'playProgressBar',
  'handleName': 'seekHandle'
};

SeekBar.prototype.playerEvent = 'timeupdate';

_sliderSliderJs2['default'].registerComponent('SeekBar', SeekBar);
exports['default'] = SeekBar;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider.js":58,"./load-progress-bar.js":15,"./play-progress-bar.js":16,"./seek-handle.js":19}],19:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _sliderSliderHandleJs = _dereq_('../../slider/slider-handle.js');

var _sliderSliderHandleJs2 = _interopRequireDefault(_sliderSliderHandleJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * The Seek Handle shows the current position of the playhead during playback,
 * and can be dragged to adjust the playhead.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SeekHandle = (function (_SliderHandle) {
  function SeekHandle(player, options) {
    _classCallCheck(this, SeekHandle);

    _get(Object.getPrototypeOf(SeekHandle.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(SeekHandle, _SliderHandle);

  _createClass(SeekHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl() {
      return _get(Object.getPrototypeOf(SeekHandle.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-seek-handle',
        'aria-live': 'off'
      });
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      var time = this.player_.scrubbing ? this.player_.getCache().currentTime : this.player_.currentTime();
      this.el_.innerHTML = '<span class="vjs-control-text">' + Lib.formatTime(time, this.player_.duration()) + '</span>';
    }
  }]);

  return SeekHandle;
})(_sliderSliderHandleJs2['default']);

/**
 * The default value for the handle content, which may be read by screen readers
 *
 * @type {String}
 * @private
 */
SeekHandle.prototype.defaultValue = '00:00';

_sliderSliderHandleJs2['default'].registerComponent('SeekHandle', SeekHandle);
exports['default'] = SeekHandle;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider-handle.js":57}],20:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _spacerJs = _dereq_('./spacer.js');

var _spacerJs2 = _interopRequireDefault(_spacerJs);

/**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @param {Player|Object} player
 * @param {Obect=} options
 */

var CustomControlSpacer = (function (_Spacer) {
  function CustomControlSpacer() {
    _classCallCheck(this, CustomControlSpacer);

    if (_Spacer != null) {
      _Spacer.apply(this, arguments);
    }
  }

  _inherits(CustomControlSpacer, _Spacer);

  _createClass(CustomControlSpacer, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-custom-control-spacer ' + _get(Object.getPrototypeOf(CustomControlSpacer.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(CustomControlSpacer.prototype), 'createEl', this).call(this, {
        className: this.buildCSSClass()
      });
    }
  }]);

  return CustomControlSpacer;
})(_spacerJs2['default']);

_spacerJs2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);

exports['default'] = CustomControlSpacer;
module.exports = exports['default'];

},{"./spacer.js":21}],21:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

/**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 */

var Spacer = (function (_Component) {
  function Spacer() {
    _classCallCheck(this, Spacer);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(Spacer, _Component);

  _createClass(Spacer, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-spacer ' + _get(Object.getPrototypeOf(Spacer.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl(props) {
      return _get(Object.getPrototypeOf(Spacer.prototype), 'createEl', this).call(this, 'div', {
        className: this.buildCSSClass()
      });
    }
  }]);

  return Spacer;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('Spacer', Spacer);

exports['default'] = Spacer;
module.exports = exports['default'];

},{"../../component.js":7}],22:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
  function CaptionSettingsMenuItem(player, options) {
    _classCallCheck(this, CaptionSettingsMenuItem);

    options['track'] = {
      'kind': options['kind'],
      'player': player,
      'label': options['kind'] + ' settings',
      'default': false,
      mode: 'disabled'
    };

    _get(Object.getPrototypeOf(CaptionSettingsMenuItem.prototype), 'constructor', this).call(this, player, options);
    this.addClass('vjs-texttrack-settings');
  }

  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

  _createClass(CaptionSettingsMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      this.player().getChild('textTrackSettings').show();
    }
  }]);

  return CaptionSettingsMenuItem;
})(_textTrackMenuItemJs2['default']);

_textTrackMenuItemJs2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
exports['default'] = CaptionSettingsMenuItem;
module.exports = exports['default'];

},{"./text-track-menu-item.js":29}],23:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _textTrackButtonJs = _dereq_('./text-track-button.js');

var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

var _captionSettingsMenuItemJs = _dereq_('./caption-settings-menu-item.js');

var _captionSettingsMenuItemJs2 = _interopRequireDefault(_captionSettingsMenuItemJs);

/**
 * The button component for toggling and selecting captions
 *
 * @constructor
 */

var CaptionsButton = (function (_TextTrackButton) {
  function CaptionsButton(player, options, ready) {
    _classCallCheck(this, CaptionsButton);

    _get(Object.getPrototypeOf(CaptionsButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Captions Menu');
  }

  _inherits(CaptionsButton, _TextTrackButton);

  _createClass(CaptionsButton, [{
    key: 'update',
    value: function update() {
      var threshold = 2;
      _get(Object.getPrototypeOf(CaptionsButton.prototype), 'update', this).call(this);

      // if native, then threshold is 1 because no settings button
      if (this.player().tech && this.player().tech['featuresNativeTextTracks']) {
        threshold = 1;
      }

      if (this.items && this.items.length > threshold) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: 'createItems',
    value: function createItems() {
      var items = [];

      if (!(this.player().tech && this.player().tech['featuresNativeTextTracks'])) {
        items.push(new _captionSettingsMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
      }

      return _get(Object.getPrototypeOf(CaptionsButton.prototype), 'createItems', this).call(this, items);
    }
  }]);

  return CaptionsButton;
})(_textTrackButtonJs2['default']);

CaptionsButton.prototype.kind_ = 'captions';
CaptionsButton.prototype.buttonText = 'Captions';
CaptionsButton.prototype.className = 'vjs-captions-button';

_textTrackButtonJs2['default'].registerComponent('CaptionsButton', CaptionsButton);
exports['default'] = CaptionsButton;
module.exports = exports['default'];

},{"./caption-settings-menu-item.js":22,"./text-track-button.js":28}],24:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _textTrackButtonJs = _dereq_('./text-track-button.js');

var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

var _chaptersTrackMenuItemJs = _dereq_('./chapters-track-menu-item.js');

var _chaptersTrackMenuItemJs2 = _interopRequireDefault(_chaptersTrackMenuItemJs);

var _menuMenuJs = _dereq_('../../menu/menu.js');

var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

// Chapters act much differently than other text tracks
// Cues are navigation vs. other tracks of alternative languages
/**
 * The button component for toggling and selecting chapters
 *
 * @constructor
 */

var ChaptersButton = (function (_TextTrackButton) {
  function ChaptersButton(player, options, ready) {
    _classCallCheck(this, ChaptersButton);

    _get(Object.getPrototypeOf(ChaptersButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Chapters Menu');
  }

  _inherits(ChaptersButton, _TextTrackButton);

  _createClass(ChaptersButton, [{
    key: 'createItems',

    // Create a menu item for each text track
    value: function createItems() {
      var items = [];

      var tracks = this.player_.textTracks();

      if (!tracks) {
        return items;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (track['kind'] === this.kind_) {
          items.push(new _textTrackMenuItemJs2['default'](this.player_, {
            'track': track
          }));
        }
      }

      return items;
    }
  }, {
    key: 'createMenu',
    value: function createMenu() {
      var tracks = this.player_.textTracks() || [];
      var chaptersTrack = undefined;
      var items = this.items = [];

      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (track['kind'] === this.kind_) {
          if (!track.cues) {
            track['mode'] = 'hidden';
            /* jshint loopfunc:true */
            // TODO see if we can figure out a better way of doing this https://github.com/videojs/video.js/issues/1864
            _globalWindow2['default'].setTimeout(Lib.bind(this, function () {
              this.createMenu();
            }), 100);
            /* jshint loopfunc:false */
          } else {
            chaptersTrack = track;
            break;
          }
        }
      }

      var menu = this.menu;
      if (menu === undefined) {
        menu = new _menuMenuJs2['default'](this.player_);
        menu.contentEl().appendChild(Lib.createEl('li', {
          className: 'vjs-menu-title',
          innerHTML: Lib.capitalize(this.kind_),
          tabindex: -1
        }));
      }

      if (chaptersTrack) {
        var cues = chaptersTrack['cues'],
            cue = undefined;

        for (var i = 0, l = cues.length; i < l; i++) {
          cue = cues[i];

          var mi = new _chaptersTrackMenuItemJs2['default'](this.player_, {
            'track': chaptersTrack,
            'cue': cue
          });

          items.push(mi);

          menu.addChild(mi);
        }
        this.addChild(menu);
      }

      if (this.items.length > 0) {
        this.show();
      }

      return menu;
    }
  }]);

  return ChaptersButton;
})(_textTrackButtonJs2['default']);

ChaptersButton.prototype.kind_ = 'chapters';
ChaptersButton.prototype.buttonText = 'Chapters';
ChaptersButton.prototype.className = 'vjs-chapters-button';

_textTrackButtonJs2['default'].registerComponent('ChaptersButton', ChaptersButton);
exports['default'] = ChaptersButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu.js":51,"./chapters-track-menu-item.js":25,"./text-track-button.js":28,"./text-track-menu-item.js":29,"global/window":2}],25:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * @constructor
 */

var ChaptersTrackMenuItem = (function (_MenuItem) {
  function ChaptersTrackMenuItem(player, options) {
    _classCallCheck(this, ChaptersTrackMenuItem);

    var track = options['track'];
    var cue = options['cue'];
    var currentTime = player.currentTime();

    // Modify options for parent MenuItem class's init.
    options['label'] = cue.text;
    options['selected'] = cue['startTime'] <= currentTime && currentTime < cue['endTime'];
    _get(Object.getPrototypeOf(ChaptersTrackMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.track = track;
    this.cue = cue;
    track.addEventListener('cuechange', Lib.bind(this, this.update));
  }

  _inherits(ChaptersTrackMenuItem, _MenuItem);

  _createClass(ChaptersTrackMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      _get(Object.getPrototypeOf(ChaptersTrackMenuItem.prototype), 'handleClick', this).call(this);
      this.player_.currentTime(this.cue.startTime);
      this.update(this.cue.startTime);
    }
  }, {
    key: 'update',
    value: function update() {
      var cue = this.cue;
      var currentTime = this.player_.currentTime();

      // vjs.log(currentTime, cue.startTime);
      this.selected(cue['startTime'] <= currentTime && currentTime < cue['endTime']);
    }
  }]);

  return ChaptersTrackMenuItem;
})(_menuMenuItemJs2['default']);

_menuMenuItemJs2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
exports['default'] = ChaptersTrackMenuItem;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-item.js":50}],26:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

/**
 * A special menu item for turning of a specific type of text track
 *
 * @constructor
 */

var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
  function OffTextTrackMenuItem(player, options) {
    _classCallCheck(this, OffTextTrackMenuItem);

    // Create pseudo track info
    // Requires options['kind']
    options['track'] = {
      'kind': options['kind'],
      'player': player,
      'label': options['kind'] + ' off',
      'default': false,
      'mode': 'disabled'
    };

    _get(Object.getPrototypeOf(OffTextTrackMenuItem.prototype), 'constructor', this).call(this, player, options);
    this.selected(true);
  }

  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

  _createClass(OffTextTrackMenuItem, [{
    key: 'handleTracksChange',
    value: function handleTracksChange(event) {
      var tracks = this.player().textTracks();
      var selected = true;

      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (track['kind'] === this.track['kind'] && track['mode'] === 'showing') {
          selected = false;
          break;
        }
      }

      this.selected(selected);
    }
  }]);

  return OffTextTrackMenuItem;
})(_textTrackMenuItemJs2['default']);

_textTrackMenuItemJs2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
exports['default'] = OffTextTrackMenuItem;
module.exports = exports['default'];

},{"./text-track-menu-item.js":29}],27:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _textTrackButtonJs = _dereq_('./text-track-button.js');

var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

/**
 * The button component for toggling and selecting subtitles
 *
 * @constructor
 */

var SubtitlesButton = (function (_TextTrackButton) {
  function SubtitlesButton(player, options, ready) {
    _classCallCheck(this, SubtitlesButton);

    _get(Object.getPrototypeOf(SubtitlesButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Subtitles Menu');
  }

  _inherits(SubtitlesButton, _TextTrackButton);

  return SubtitlesButton;
})(_textTrackButtonJs2['default']);

SubtitlesButton.prototype.kind_ = 'subtitles';
SubtitlesButton.prototype.buttonText = 'Subtitles';
SubtitlesButton.prototype.className = 'vjs-subtitles-button';

_textTrackButtonJs2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
exports['default'] = SubtitlesButton;
module.exports = exports['default'];

},{"./text-track-button.js":28}],28:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x2,
    property = _x3,
    receiver = _x4; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

var _offTextTrackMenuItemJs = _dereq_('./off-text-track-menu-item.js');

var _offTextTrackMenuItemJs2 = _interopRequireDefault(_offTextTrackMenuItemJs);

/**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @constructor
 */

var TextTrackButton = (function (_MenuButton) {
  function TextTrackButton(player, options) {
    _classCallCheck(this, TextTrackButton);

    _get(Object.getPrototypeOf(TextTrackButton.prototype), 'constructor', this).call(this, player, options);

    var tracks = this.player_.textTracks();

    if (this.items.length <= 1) {
      this.hide();
    }

    if (!tracks) {
      return;
    }

    var updateHandler = Lib.bind(this, this.update);
    tracks.addEventListener('removetrack', updateHandler);
    tracks.addEventListener('addtrack', updateHandler);

    this.player_.on('dispose', function () {
      tracks.removeEventListener('removetrack', updateHandler);
      tracks.removeEventListener('addtrack', updateHandler);
    });
  }

  _inherits(TextTrackButton, _MenuButton);

  _createClass(TextTrackButton, [{
    key: 'createItems',

    // Create a menu item for each text track
    value: function createItems() {
      var items = arguments[0] === undefined ? [] : arguments[0];

      // Add an OFF menu item to turn all tracks off
      items.push(new _offTextTrackMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));

      var tracks = this.player_.textTracks();

      if (!tracks) {
        return items;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        // only add tracks that are of the appropriate kind and have a label
        if (track['kind'] === this.kind_) {
          items.push(new _textTrackMenuItemJs2['default'](this.player_, {
            'track': track
          }));
        }
      }

      return items;
    }
  }]);

  return TextTrackButton;
})(_menuMenuButtonJs2['default']);

_menuMenuButtonJs2['default'].registerComponent('TextTrackButton', TextTrackButton);
exports['default'] = TextTrackButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-button.js":49,"./off-text-track-menu-item.js":26,"./text-track-menu-item.js":29}],29:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @constructor
 */

var TextTrackMenuItem = (function (_MenuItem) {
  function TextTrackMenuItem(player, options) {
    var _this2 = this;

    _classCallCheck(this, TextTrackMenuItem);

    var track = options['track'];
    var tracks = player.textTracks();

    // Modify options for parent MenuItem class's init.
    options['label'] = track['label'] || track['language'] || 'Unknown';
    options['selected'] = track['default'] || track['mode'] === 'showing';
    _get(Object.getPrototypeOf(TextTrackMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.track = track;

    if (tracks) {
      (function () {
        var changeHandler = Lib.bind(_this2, _this2.handleTracksChange);

        tracks.addEventListener('change', changeHandler);
        _this2.on('dispose', function () {
          tracks.removeEventListener('change', changeHandler);
        });
      })();
    }

    // iOS7 doesn't dispatch change events to TextTrackLists when an
    // associated track's mode changes. Without something like
    // Object.observe() (also not present on iOS7), it's not
    // possible to detect changes to the mode attribute and polyfill
    // the change event. As a poor substitute, we manually dispatch
    // change events whenever the controls modify the mode.
    if (tracks && tracks.onchange === undefined) {
      (function () {
        var event = undefined;

        _this2.on(['tap', 'click'], function () {
          if (typeof _globalWindow2['default'].Event !== 'object') {
            // Android 2.3 throws an Illegal Constructor error for window.Event
            try {
              event = new _globalWindow2['default'].Event('change');
            } catch (err) {}
          }

          if (!event) {
            event = _globalDocument2['default'].createEvent('Event');
            event.initEvent('change', true, true);
          }

          tracks.dispatchEvent(event);
        });
      })();
    }
  }

  _inherits(TextTrackMenuItem, _MenuItem);

  _createClass(TextTrackMenuItem, [{
    key: 'handleClick',
    value: function handleClick(event) {
      var kind = this.track['kind'];
      var tracks = this.player_.textTracks();

      _get(Object.getPrototypeOf(TextTrackMenuItem.prototype), 'handleClick', this).call(this, event);

      if (!tracks) return;

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        if (track['kind'] !== kind) {
          continue;
        }

        if (track === this.track) {
          track['mode'] = 'showing';
        } else {
          track['mode'] = 'disabled';
        }
      }
    }
  }, {
    key: 'handleTracksChange',
    value: function handleTracksChange(event) {
      this.selected(this.track['mode'] === 'showing');
    }
  }]);

  return TextTrackMenuItem;
})(_menuMenuItemJs2['default']);

_menuMenuItemJs2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
exports['default'] = TextTrackMenuItem;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-item.js":50,"global/document":1,"global/window":2}],30:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * Displays the current time
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var CurrentTimeDisplay = (function (_Component) {
  function CurrentTimeDisplay(player, options) {
    _classCallCheck(this, CurrentTimeDisplay);

    _get(Object.getPrototypeOf(CurrentTimeDisplay.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(CurrentTimeDisplay, _Component);

  _createClass(CurrentTimeDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(CurrentTimeDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-current-time vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-current-time-display',
        innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00', // label the current time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      // Allows for smooth scrubbing, when player can't keep up.
      var time = this.player_.scrubbing ? this.player_.getCache().currentTime : this.player_.currentTime();
      var localizedText = this.localize('Current Time');
      var formattedTime = Lib.formatTime(time, this.player_.duration());
      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
    }
  }]);

  return CurrentTimeDisplay;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
exports['default'] = CurrentTimeDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],31:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * Displays the duration
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var DurationDisplay = (function (_Component) {
  function DurationDisplay(player, options) {
    _classCallCheck(this, DurationDisplay);

    _get(Object.getPrototypeOf(DurationDisplay.prototype), 'constructor', this).call(this, player, options);

    // this might need to be changed to 'durationchange' instead of 'timeupdate' eventually,
    // however the durationchange event fires before this.player_.duration() is set,
    // so the value cannot be written out using this method.
    // Once the order of durationchange and this.player_.duration() being set is figured out,
    // this can be updated.
    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(DurationDisplay, _Component);

  _createClass(DurationDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(DurationDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-duration vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-duration-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00', // label the duration time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      var duration = this.player_.duration();
      if (duration) {
        var localizedText = this.localize('Duration Time');
        var formattedTime = Lib.formatTime(duration);
        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
      }
    }
  }]);

  return DurationDisplay;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('DurationDisplay', DurationDisplay);
exports['default'] = DurationDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],32:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _lib = _dereq_('../../lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Displays the time left in the video
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var RemainingTimeDisplay = (function (_Component) {
  function RemainingTimeDisplay(player, options) {
    _classCallCheck(this, RemainingTimeDisplay);

    _get(Object.getPrototypeOf(RemainingTimeDisplay.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(RemainingTimeDisplay, _Component);

  _createClass(RemainingTimeDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(RemainingTimeDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-remaining-time vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-remaining-time-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00', // label the remaining time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      if (this.player_.duration()) {
        var localizedText = this.localize('Remaining Time');
        var formattedTime = Lib.formatTime(this.player_.remainingTime());
        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
      }

      // Allows for smooth scrubbing, when player can't keep up.
      // var time = (this.player_.scrubbing) ? this.player_.getCache().currentTime : this.player_.currentTime();
      // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
    }
  }]);

  return RemainingTimeDisplay;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
exports['default'] = RemainingTimeDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib":46}],33:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

/**
 * The separator between the current time and duration
 *
 * Can be hidden if it's not needed in the design.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var TimeDivider = (function (_Component) {
  function TimeDivider() {
    _classCallCheck(this, TimeDivider);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(TimeDivider, _Component);

  _createClass(TimeDivider, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TimeDivider.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-time-control vjs-time-divider',
        innerHTML: '<div><span>/</span></div>'
      });
    }
  }]);

  return TimeDivider;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('TimeDivider', TimeDivider);
exports['default'] = TimeDivider;
module.exports = exports['default'];

},{"../../component.js":7}],34:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _sliderSliderJs = _dereq_('../../slider/slider.js');

var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

// Required children

var _volumeHandleJs = _dereq_('./volume-handle.js');

var _volumeHandleJs2 = _interopRequireDefault(_volumeHandleJs);

var _volumeLevelJs = _dereq_('./volume-level.js');

var _volumeLevelJs2 = _interopRequireDefault(_volumeLevelJs);

/**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeBar = (function (_Slider) {
  function VolumeBar(player, options) {
    _classCallCheck(this, VolumeBar);

    _get(Object.getPrototypeOf(VolumeBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'volumechange', this.updateARIAAttributes);
    player.ready(Lib.bind(this, this.updateARIAAttributes));
  }

  _inherits(VolumeBar, _Slider);

  _createClass(VolumeBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-bar',
        'aria-label': 'volume level'
      });
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(event) {
      if (this.player_.muted()) {
        this.player_.muted(false);
      }

      this.player_.volume(this.calculateDistance(event));
    }
  }, {
    key: 'getPercent',
    value: function getPercent() {
      if (this.player_.muted()) {
        return 0;
      } else {
        return this.player_.volume();
      }
    }
  }, {
    key: 'stepForward',
    value: function stepForward() {
      this.player_.volume(this.player_.volume() + 0.1);
    }
  }, {
    key: 'stepBack',
    value: function stepBack() {
      this.player_.volume(this.player_.volume() - 0.1);
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Current value of volume bar as a percentage
      this.el_.setAttribute('aria-valuenow', Lib.round(this.player_.volume() * 100, 2));
      this.el_.setAttribute('aria-valuetext', Lib.round(this.player_.volume() * 100, 2) + '%');
    }
  }]);

  return VolumeBar;
})(_sliderSliderJs2['default']);

VolumeBar.prototype.options_ = {
  children: {
    'volumeLevel': {},
    'volumeHandle': {}
  },
  'barName': 'volumeLevel',
  'handleName': 'volumeHandle'
};

VolumeBar.prototype.playerEvent = 'volumechange';

_sliderSliderJs2['default'].registerComponent('VolumeBar', VolumeBar);
exports['default'] = VolumeBar;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider.js":58,"./volume-handle.js":36,"./volume-level.js":37}],35:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_libJs);

// Required children

var _volumeBarJs = _dereq_('./volume-bar.js');

var _volumeBarJs2 = _interopRequireDefault(_volumeBarJs);

/**
 * The component for controlling the volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeControl = (function (_Component) {
  function VolumeControl(player, options) {
    _classCallCheck(this, VolumeControl);

    _get(Object.getPrototypeOf(VolumeControl.prototype), 'constructor', this).call(this, player, options);

    // hide volume controls when they're not supported by the current tech
    if (player.tech && player.tech['featuresVolumeControl'] === false) {
      this.addClass('vjs-hidden');
    }
    this.on(player, 'loadstart', function () {
      if (player.tech['featuresVolumeControl'] === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
  }

  _inherits(VolumeControl, _Component);

  _createClass(VolumeControl, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeControl.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-control vjs-control'
      });
    }
  }]);

  return VolumeControl;
})(_componentJs2['default']);

VolumeControl.prototype.options_ = {
  children: {
    'volumeBar': {}
  }
};

_componentJs2['default'].registerComponent('VolumeControl', VolumeControl);
exports['default'] = VolumeControl;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46,"./volume-bar.js":34}],36:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _sliderSliderHandleJs = _dereq_('../../slider/slider-handle.js');

var _sliderSliderHandleJs2 = _interopRequireDefault(_sliderSliderHandleJs);

/**
 * The volume handle can be dragged to adjust the volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeHandle = (function (_SliderHandle) {
  function VolumeHandle() {
    _classCallCheck(this, VolumeHandle);

    if (_SliderHandle != null) {
      _SliderHandle.apply(this, arguments);
    }
  }

  _inherits(VolumeHandle, _SliderHandle);

  _createClass(VolumeHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeHandle.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-handle'
      });
    }
  }]);

  return VolumeHandle;
})(_sliderSliderHandleJs2['default']);

VolumeHandle.prototype.defaultValue = '00:00';

_sliderSliderHandleJs2['default'].registerComponent('VolumeHandle', VolumeHandle);
exports['default'] = VolumeHandle;
module.exports = exports['default'];

},{"../../slider/slider-handle.js":57}],37:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

/**
 * Shows volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeLevel = (function (_Component) {
  function VolumeLevel() {
    _classCallCheck(this, VolumeLevel);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(VolumeLevel, _Component);

  _createClass(VolumeLevel, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeLevel.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-level',
        innerHTML: '<span class="vjs-control-text"></span>'
      });
    }
  }]);

  return VolumeLevel;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('VolumeLevel', VolumeLevel);
exports['default'] = VolumeLevel;
module.exports = exports['default'];

},{"../../component.js":7}],38:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _buttonJs = _dereq_('../button.js');

var _buttonJs2 = _interopRequireDefault(_buttonJs);

var _menuMenuJs = _dereq_('../menu/menu.js');

var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

var _muteToggleJs = _dereq_('./mute-toggle.js');

var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _volumeControlVolumeBarJs = _dereq_('./volume-control/volume-bar.js');

var _volumeControlVolumeBarJs2 = _interopRequireDefault(_volumeControlVolumeBarJs);

/**
 * Menu button with a popup for showing the volume slider.
 * @constructor
 */

var VolumeMenuButton = (function (_MenuButton) {
  function VolumeMenuButton(player, options) {
    _classCallCheck(this, VolumeMenuButton);

    _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'constructor', this).call(this, player, options);

    // Same listeners as MuteToggle
    this.on(player, 'volumechange', this.volumeUpdate);

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech['featuresVolumeControl'] === false) {
      this.addClass('vjs-hidden');
    }
    this.on(player, 'loadstart', function () {
      if (player.tech['featuresVolumeControl'] === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
    this.addClass('vjs-menu-button');
  }

  _inherits(VolumeMenuButton, _MenuButton);

  _createClass(VolumeMenuButton, [{
    key: 'createMenu',
    value: function createMenu() {
      var menu = new _menuMenuJs2['default'](this.player_, {
        contentElType: 'div'
      });

      // The volumeBar is vertical by default in the base theme when used with a VolumeMenuButton
      var options = this.options_['volumeBar'] || {};
      options['vertical'] = options['vertical'] || true;

      var vc = new _volumeControlVolumeBarJs2['default'](this.player_, options);

      vc.on('focus', function () {
        menu.lockShowing();
      });
      vc.on('blur', function () {
        menu.unlockShowing();
      });
      menu.addChild(vc);
      return menu;
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      _muteToggleJs2['default'].prototype.handleClick.call(this);
      _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'handleClick', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-menu-button vjs-menu-button vjs-control vjs-button',
        innerHTML: '<div><span class="vjs-control-text">' + this.localize('Mute') + '</span></div>'
      });
    }
  }]);

  return VolumeMenuButton;
})(_menuMenuButtonJs2['default']);

VolumeMenuButton.prototype.volumeUpdate = _muteToggleJs2['default'].prototype.update;

_buttonJs2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
exports['default'] = VolumeMenuButton;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46,"../menu/menu-button.js":49,"../menu/menu.js":51,"./mute-toggle.js":11,"./volume-control/volume-bar.js":34}],39:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Core Object/Class for objects that use inheritance + constructors
 *
 * To create a class that can be subclassed itself, extend the CoreObject class.
 *
 *     var Animal = CoreObject.extend();
 *     var Horse = Animal.extend();
 *
 * The constructor can be defined through the init property of an object argument.
 *
 *     var Animal = CoreObject.extend({
 *       init: function(name, sound){
 *         this.name = name;
 *       }
 *     });
 *
 * Other methods and properties can be added the same way, or directly to the
 * prototype.
 *
 *    var Animal = CoreObject.extend({
 *       init: function(name){
 *         this.name = name;
 *       },
 *       getName: function(){
 *         return this.name;
 *       },
 *       sound: '...'
 *    });
 *
 *    Animal.prototype.makeSound = function(){
 *      alert(this.sound);
 *    };
 *
 * To create an instance of a class, use the create method.
 *
 *    var fluffy = Animal.create('Fluffy');
 *    fluffy.getName(); // -> Fluffy
 *
 * Methods and properties can be overridden in subclasses.
 *
 *     var Horse = Animal.extend({
 *       sound: 'Neighhhhh!'
 *     });
 *
 *     var horsey = Horse.create('Horsey');
 *     horsey.getName(); // -> Horsey
 *     horsey.makeSound(); // -> Alert: Neighhhhh!
 *
 * @class
 * @constructor
 */
var CoreObject = function CoreObject() {};
// Manually exporting vjs['CoreObject'] here for Closure Compiler
// because of the use of the extend/create class methods
// If we didn't do this, those functions would get flattened to something like
// `a = ...` and `this.prototype` would refer to the global object instead of
// CoreObject

/**
 * Create a new object that inherits from this Object
 *
 *     var Animal = CoreObject.extend();
 *     var Horse = Animal.extend();
 *
 * @param {Object} props Functions and properties to be applied to the
 *                       new object's prototype
 * @return {CoreObject} An object that inherits from CoreObject
 * @this {*}
 */
CoreObject.extend = function () {
  var props = arguments[0] === undefined ? {} : arguments[0];

  // Set up the constructor using the supplied init method
  // or using the init of the parent object
  // Make sure to check the unobfuscated version for external libs
  var init = props['init'] || props.init || this.prototype['init'] || this.prototype.init || function () {};
  // In Resig's simple class inheritance (previously used) the constructor
  //  is a function that calls `this.init.apply(arguments)`
  // However that would prevent us from using `ParentObject.call(this);`
  //  in a Child constructor because the `this` in `this.init`
  //  would still refer to the Child and cause an infinite loop.
  // We would instead have to do
  //    `ParentObject.prototype.init.apply(this, arguments);`
  //  Bleh. We're not creating a _super() function, so it's good to keep
  //  the parent constructor reference simple.
  var subObj = function subObj() {
    init.apply(this, arguments);
  };

  // Inherit from this object's prototype
  subObj.prototype = Lib.obj.create(this.prototype);
  // Reset the constructor property for subObj otherwise
  // instances of subObj would have the constructor of the parent Object
  subObj.prototype.constructor = subObj;

  // Make the class extendable
  subObj.extend = CoreObject.extend;
  // Make a function for creating instances
  subObj.create = CoreObject.create;

  // Extend subObj's prototype with functions and other properties from props
  for (var name in props) {
    if (props.hasOwnProperty(name)) {
      subObj.prototype[name] = props[name];
    }
  }

  return subObj;
};

/**
 * Create a new instance of this Object class
 *
 *     var myAnimal = Animal.create();
 *
 * @return {CoreObject} An instance of a CoreObject subclass
 * @this {*}
 */
CoreObject.create = function () {
  // Create a new object that inherits from this object's prototype
  var inst = Lib.obj.create(this.prototype);

  // Apply this constructor function to the new object
  this.apply(inst, arguments);

  // Return the new object
  return inst;
};

exports['default'] = CoreObject;
module.exports = exports['default'];

},{"./lib":46}],40:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * @fileoverview Main function src.
 */

var _player = _dereq_('./player');

var _player2 = _interopRequireDefault(_player);

var _plugins = _dereq_('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _options = _dereq_('./options');

var _options2 = _interopRequireDefault(_options);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var _util = _dereq_('./util');

var VjsUtil = _interopRequireWildcard(_util);

var _coreObject = _dereq_('./core-object');

var _coreObject2 = _interopRequireDefault(_coreObject);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * Doubles as the main function for users to create a player instance and also
 * the main library object.
 *
 * **ALIASES** videojs, _V_ (deprecated)
 *
 * The `vjs` function can be used to initialize or retrieve a player.
 *
 *     var myPlayer = vjs('my_video_id');
 *
 * @param  {String|Element} id      Video element or video element ID
 * @param  {Object=} options        Optional options object for config/settings
 * @param  {Function=} ready        Optional ready callback
 * @return {Player}             A player instance
 * @namespace
 */
var videojs = function videojs(id, options, ready) {
  var tag; // Element of ID

  // Allow for element or ID to be passed in
  // String ID
  if (typeof id === 'string') {

    // Adjust for jQuery ID syntax
    if (id.indexOf('#') === 0) {
      id = id.slice(1);
    }

    // If a player instance has already been created for this ID return it.
    if (_player2['default'].players[id]) {

      // If options or ready funtion are passed, warn
      if (options) {
        Lib.log.warn('Player "' + id + '" is already initialised. Options will not be applied.');
      }

      if (ready) {
        _player2['default'].players[id].ready(ready);
      }

      return _player2['default'].players[id];

      // Otherwise get element for ID
    } else {
      tag = Lib.el(id);
    }

    // ID is a media element
  } else {
    tag = id;
  }

  // Check for a useable element
  if (!tag || !tag.nodeName) {
    // re: nodeName, could be a box div also
    throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
  }

  // Element may have a player attr referring to an already created player instance.
  // If not, set up a new player and return the instance.
  return tag['player'] || new _player2['default'](tag, options, ready);
};

// CDN Version. Used to target right flash swf.
videojs.CDN_VERSION = '5.0';
videojs.ACCESS_PROTOCOL = 'https:' === _globalDocument2['default'].location.protocol ? 'https://' : 'http://';

/**
* Full player version
* @type {string}
*/
videojs['VERSION'] = '5.0.0-11';

// Set CDN Version of swf
// The added (+) blocks the replace from changing this _VERSION_NO_PATCH_ string
if (videojs.CDN_VERSION !== '__VERSION_' + 'NO_PATCH__') {
  _options2['default']['flash']['swf'] = '' + videojs.ACCESS_PROTOCOL + 'vjs.zencdn.net/' + videojs.CDN_VERSION + '/video-js.swf';
}

/**
 * Utility function for adding languages to the default options. Useful for
 * amending multiple language support at runtime.
 *
 * Example: videojs.addLanguage('es', {'Hello':'Hola'});
 *
 * @param  {String} code The language code or dictionary property
 * @param  {Object} data The data values to be translated
 * @return {Object} The resulting global languages dictionary object
 */
videojs.addLanguage = function (code, data) {
  if (_options2['default']['languages'][code] !== undefined) {
    _options2['default']['languages'][code] = VjsUtil.mergeOptions(_options2['default']['languages'][code], data);
  } else {
    _options2['default']['languages'][code] = data;
  }
  return _options2['default']['languages'];
};

/**
 * Custom Universal Module Definition (UMD)
 *
 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
 * still support requirejs and browserify. This also needs to be closure
 * compiler compatible, so string keys are used.
 */
if (typeof define === 'function' && define['amd']) {
  define('videojs', [], function () {
    return videojs;
  });

  // checking that module is an object too because of umdjs/umd#35
} else if (typeof exports === 'object' && typeof module === 'object') {
  module['exports'] = videojs;
}

exports['default'] = videojs;
module.exports = exports['default'];

},{"./core-object":39,"./lib":46,"./options":52,"./player":53,"./plugins":54,"./util":70,"global/document":1}],41:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('./component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Display that an error has occurred making the video unplayable
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var ErrorDisplay = (function (_Component) {
  function ErrorDisplay(player, options) {
    _classCallCheck(this, ErrorDisplay);

    _get(Object.getPrototypeOf(ErrorDisplay.prototype), 'constructor', this).call(this, player, options);

    this.update();
    this.on(player, 'error', this.update);
  }

  _inherits(ErrorDisplay, _Component);

  _createClass(ErrorDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(ErrorDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-error-display'
      });

      this.contentEl_ = Lib.createEl('div');
      el.appendChild(this.contentEl_);

      return el;
    }
  }, {
    key: 'update',
    value: function update() {
      if (this.player().error()) {
        this.contentEl_.innerHTML = this.localize(this.player().error().message);
      }
    }
  }]);

  return ErrorDisplay;
})(_component2['default']);

_component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
exports['default'] = ErrorDisplay;
module.exports = exports['default'];

},{"./component":7,"./lib":46}],42:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _events = _dereq_('./events');

var Events = _interopRequireWildcard(_events);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var EventEmitter = function EventEmitter() {};

EventEmitter.prototype.allowedEvents_ = {};

EventEmitter.prototype.on = function (type, fn) {
  // Remove the addEventListener alias before calling Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;
  this.addEventListener = Function.prototype;
  Events.on(this, type, fn);
  this.addEventListener = ael;
};
EventEmitter.prototype.addEventListener = EventEmitter.prototype.on;

EventEmitter.prototype.off = function (type, fn) {
  Events.off(this, type, fn);
};
EventEmitter.prototype.removeEventListener = EventEmitter.prototype.off;

EventEmitter.prototype.one = function (type, fn) {
  Events.one(this, type, fn);
};

EventEmitter.prototype.trigger = function (event) {
  var type = event.type || event;

  if (typeof event === 'string') {
    event = {
      type: type
    };
  }
  event = Events.fixEvent(event);

  if (this.allowedEvents_[type] && this['on' + type]) {
    this['on' + type](event);
  }

  Events.trigger(this, event);
};
// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
EventEmitter.prototype.dispatchEvent = EventEmitter.prototype.trigger;

exports['default'] = EventEmitter;
module.exports = exports['default'];

},{"./events":43,"./lib":46}],43:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

/**
 * @fileoverview Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 */

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * Fix a native event to have standard property values
 * @param  {Object} event Event object to fix
 * @return {Object}
 * @private
 */
var fixEvent = function fixEvent(event) {

  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }

  // Test if fixing up is needed
  // Used to check if !event.stopPropagation instead of isPropagationStopped
  // But native events return true for stopPropagation, but don't have
  // other expected methods like isPropagationStopped. Seems to be a problem
  // with the Javascript Ninja code. So we're just overriding all events now.
  if (!event || !event.isPropagationStopped) {
    var old = event || _globalWindow2['default'].event;

    event = {};
    // Clone the old object so that we can modify the values event = {};
    // IE8 Doesn't like when you mess with native event properties
    // Firefox returns false for event.hasOwnProperty('type') and other props
    //  which makes copying more difficult.
    // TODO: Probably best to create a whitelist of event props
    for (var key in old) {
      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation') {
        // Chrome 32+ warns if you try to copy deprecated returnValue, but
        // we still want to if preventDefault isn't supported (IE8).
        if (!(key === 'returnValue' && old.preventDefault)) {
          event[key] = old[key];
        }
      }
    }

    // The event occurred on this element
    if (!event.target) {
      event.target = event.srcElement || _globalDocument2['default'];
    }

    // Handle which other element the event is related to
    event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;

    // Stop the default browser action
    event.preventDefault = function () {
      if (old.preventDefault) {
        old.preventDefault();
      }
      event.returnValue = false;
      event.defaultPrevented = true;
    };

    event.defaultPrevented = false;

    // Stop the event from bubbling
    event.stopPropagation = function () {
      if (old.stopPropagation) {
        old.stopPropagation();
      }
      event.cancelBubble = true;
      event.isPropagationStopped = returnTrue;
    };

    event.isPropagationStopped = returnFalse;

    // Stop the event from bubbling and executing other handlers
    event.stopImmediatePropagation = function () {
      if (old.stopImmediatePropagation) {
        old.stopImmediatePropagation();
      }
      event.isImmediatePropagationStopped = returnTrue;
      event.stopPropagation();
    };

    event.isImmediatePropagationStopped = returnFalse;

    // Handle mouse position
    if (event.clientX != null) {
      var doc = _globalDocument2['default'].documentElement,
          body = _globalDocument2['default'].body;

      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // Handle key presses
    event.which = event.charCode || event.keyCode;

    // Fix button for mouse clicks:
    // 0 == left; 1 == middle; 2 == right
    if (event.button != null) {
      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
    }
  }

  // Returns fixed-up instance
  return event;
};

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 * @param  {Element|Object}   elem Element or object to bind listeners to
 * @param  {String|Array}   type Type of event to bind to.
 * @param  {Function} fn   Event listener.
 * @private
 */
var on = function on(elem, type, fn) {
  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(on, elem, type, fn);
  }

  var data = Lib.getData(elem);

  // We need a place to store all our handler data
  if (!data.handlers) data.handlers = {};

  if (!data.handlers[type]) data.handlers[type] = [];

  if (!fn.guid) fn.guid = Lib.guid++;

  data.handlers[type].push(fn);

  if (!data.dispatcher) {
    data.disabled = false;

    data.dispatcher = function (event) {

      if (data.disabled) return;
      event = fixEvent(event);

      var handlers = data.handlers[event.type];

      if (handlers) {
        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
        var handlersCopy = handlers.slice(0);

        for (var m = 0, n = handlersCopy.length; m < n; m++) {
          if (event.isImmediatePropagationStopped()) {
            break;
          } else {
            handlersCopy[m].call(elem, event);
          }
        }
      }
    };
  }

  if (data.handlers[type].length === 1) {
    if (elem.addEventListener) {
      elem.addEventListener(type, data.dispatcher, false);
    } else if (elem.attachEvent) {
      elem.attachEvent('on' + type, data.dispatcher);
    }
  }
};

/**
 * Removes event listeners from an element
 * @param  {Element|Object}   elem Object to remove listeners from
 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
 * @private
 */
var off = function off(elem, type, fn) {
  // Don't want to add a cache object through getData if not needed
  if (!Lib.hasData(elem)) return;

  var data = Lib.getData(elem);

  // If no events exist, nothing to unbind
  if (!data.handlers) {
    return;
  }

  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(off, elem, type, fn);
  }

  // Utility function
  var removeType = function removeType(t) {
    data.handlers[t] = [];
    cleanUpEvents(elem, t);
  };

  // Are we removing all bound events?
  if (!type) {
    for (var t in data.handlers) {
      removeType(t);
    }return;
  }

  var handlers = data.handlers[type];

  // If no handlers exist, nothing to unbind
  if (!handlers) return;

  // If no listener was provided, remove all listeners for type
  if (!fn) {
    removeType(type);
    return;
  }

  // We're only removing a single handler
  if (fn.guid) {
    for (var n = 0; n < handlers.length; n++) {
      if (handlers[n].guid === fn.guid) {
        handlers.splice(n--, 1);
      }
    }
  }

  cleanUpEvents(elem, type);
};

/**
 * Clean up the listener cache and dispatchers
 * @param  {Element|Object} elem Element to clean up
 * @param  {String} type Type of event to clean up
 * @private
 */
var cleanUpEvents = function cleanUpEvents(elem, type) {
  var data = Lib.getData(elem);

  // Remove the events of a particular type if there are none left
  if (data.handlers[type].length === 0) {
    delete data.handlers[type];
    // data.handlers[type] = null;
    // Setting to null was causing an error with data.handlers

    // Remove the meta-handler from the element
    if (elem.removeEventListener) {
      elem.removeEventListener(type, data.dispatcher, false);
    } else if (elem.detachEvent) {
      elem.detachEvent('on' + type, data.dispatcher);
    }
  }

  // Remove the events object if there are no types left
  if (Lib.isEmpty(data.handlers)) {
    delete data.handlers;
    delete data.dispatcher;
    delete data.disabled;

    // data.handlers = null;
    // data.dispatcher = null;
    // data.disabled = null;
  }

  // Finally remove the expando if there is no data left
  if (Lib.isEmpty(data)) {
    Lib.removeData(elem);
  }
};

/**
 * Trigger an event for an element
 * @param  {Element|Object}      elem  Element to trigger an event on
 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
 * @private
 */
var trigger = function trigger(elem, event) {
  // Fetches element data and a reference to the parent (for bubbling).
  // Don't want to add a data object to cache for every parent,
  // so checking hasData first.
  var elemData = Lib.hasData(elem) ? Lib.getData(elem) : {};
  var parent = elem.parentNode || elem.ownerDocument;
  // type = event.type || event,
  // handler;

  // If an event name was passed as a string, creates an event out of it
  if (typeof event === 'string') {
    event = { type: event, target: elem };
  }
  // Normalizes the event properties.
  event = fixEvent(event);

  // If the passed element has a dispatcher, executes the established handlers.
  if (elemData.dispatcher) {
    elemData.dispatcher.call(elem, event);
  }

  // Unless explicitly stopped or the event does not bubble (e.g. media events)
  // recursively calls this function to bubble the event up the DOM.
  if (parent && !event.isPropagationStopped() && event.bubbles !== false) {
    trigger(parent, event);

    // If at the top of the DOM, triggers the default action unless disabled.
  } else if (!parent && !event.defaultPrevented) {
    var targetData = Lib.getData(event.target);

    // Checks if the target has a default action for this event.
    if (event.target[event.type]) {
      // Temporarily disables event dispatching on the target as we have already executed the handler.
      targetData.disabled = true;
      // Executes the default action.
      if (typeof event.target[event.type] === 'function') {
        event.target[event.type]();
      }
      // Re-enables event dispatching.
      targetData.disabled = false;
    }
  }

  // Inform the triggerer if the default was prevented by returning false
  return !event.defaultPrevented;
};

/**
 * Trigger a listener only once for an event
 * @param  {Element|Object}   elem Element or object to
 * @param  {String|Array}   type
 * @param  {Function} fn
 * @private
 */
var one = function one(elem, type, fn) {
  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(one, elem, type, fn);
  }
  var func = function func() {
    off(elem, type, func);
    fn.apply(this, arguments);
  };
  // copy the guid to the new function so it can removed using the original function's ID
  func.guid = fn.guid = fn.guid || Lib.guid++;
  on(elem, type, func);
};

/**
 * Loops through an array of event types and calls the requested method for each type.
 * @param  {Function} fn   The event method we want to use.
 * @param  {Element|Object} elem Element or object to bind listeners to
 * @param  {String}   type Type of event to bind to.
 * @param  {Function} callback   Event listener.
 * @private
 */
function _handleMultipleEvents(fn, elem, type, callback) {
  Lib.arr.forEach(type, function (type) {
    fn(elem, type, callback); //Call the event method for each one of the types
  });
}

exports.on = on;
exports.off = off;
exports.cleanUpEvents = cleanUpEvents;
exports.fixEvent = fixEvent;
exports.one = one;
exports.trigger = trigger;

},{"./lib":46,"global/document":1,"global/window":2}],44:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * A combination of node inherits and babel's inherits (after transpile).
 * Both work the same but node adds `super_` to the subClass
 * and Bable adds the superClass as __proto__. Both seem useful.
 */
var _inherits = function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (superClass) {
    // node
    subClass.super_ = superClass;
  }
};

/**
 * Function for subclassing using the same inheritance that
 * videojs uses internally
 *
 * ```
 * var Button = videojs.getComponent('Button');
 *
 * var MyButton = videojs.extends(Button, {
 *   constructor: function(player, options) {
 *     Button.call(this, player, options);
 *   },
 *
 *   onClick: function() {
 *     // doSomething
 *   }
 * });
 * ```
 */
var extendsFn = function extendsFn(superClass) {
  var subClassMethods = arguments[1] === undefined ? {} : arguments[1];

  var subClass = function subClass() {
    superClass.apply(this, arguments);
  };
  var methods = {};

  if (subClassMethods.constructor !== Object.prototype.constructor) {
    subClass = subClassMethods.constructor;
    methods = subClassMethods;
  } else if (typeof subClassMethods === 'function') {
    subClass = subClassMethods;
  }

  _inherits(subClass, superClass);

  // Extend subObj's prototype with functions and other properties from props
  for (var name in methods) {
    if (methods.hasOwnProperty(name)) {
      subClass.prototype[name] = methods[name];
    }
  }

  return subClass;
};

exports['default'] = extendsFn;
module.exports = exports['default'];

},{"./lib":46}],45:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * Store the browser-specific methods for the fullscreen API
 * @type {Object|undefined}
 * @private
 */
var FullscreenApi = {};

// browser API methods
// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
var apiMap = [
// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

var specApi = apiMap[0];
var browserApi = undefined;

// determine the supported set of functions
for (var i = 0; i < apiMap.length; i++) {
  // check for exitFullscreen function
  if (apiMap[i][1] in _globalDocument2['default']) {
    browserApi = apiMap[i];
    break;
  }
}

// map the browser API names to the spec API names
if (browserApi) {
  for (var i = 0; i < browserApi.length; i++) {
    FullscreenApi[specApi[i]] = browserApi[i];
  }
}

exports['default'] = FullscreenApi;
module.exports = exports['default'];

},{"global/document":1}],46:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var navigator = _globalWindow2['default'].navigator;

var hasOwnProp = Object.prototype.hasOwnProperty;

/**
 * Creates an element and applies properties.
 * @param  {String=} tagName    Name of tag to be created.
 * @param  {Object=} properties Element properties to be applied.
 * @return {Element}
 * @private
 */
var createEl = function createEl() {
  var tagName = arguments[0] === undefined ? 'div' : arguments[0];
  var properties = arguments[1] === undefined ? {} : arguments[1];

  var el = _globalDocument2['default'].createElement(tagName);

  obj.each(properties, function (propName, val) {
    // Not remembering why we were checking for dash
    // but using setAttribute means you have to use getAttribute

    // The check for dash checks for the aria-* attributes, like aria-label, aria-valuemin.
    // The additional check for "role" is because the default method for adding attributes does not
    // add the attribute "role". My guess is because it's not a valid attribute in some namespaces, although
    // browsers handle the attribute just fine. The W3C allows for aria-* attributes to be used in pre-HTML5 docs.
    // http://www.w3.org/TR/wai-aria-primer/#ariahtml. Using setAttribute gets around this problem.
    if (propName.indexOf('aria-') !== -1 || propName === 'role') {
      el.setAttribute(propName, val);
    } else {
      el[propName] = val;
    }
  });

  return el;
};

/**
 * Uppercase the first letter of a string
 * @param  {String} string String to be uppercased
 * @return {String}
 * @private
 */
var capitalize = function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

/**
 * Object functions container
 * @type {Object}
 * @private
 */
var obj = {};

/**
 * Object.create shim for prototypal inheritance
 *
 * https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create
 *
 * @function
 * @param  {Object}   obj Object to use as prototype
 * @private
 */
obj.create = Object.create || function (obj) {
  //Create a new function called 'F' which is just an empty object.
  function F() {}

  //the prototype of the 'F' function should point to the
  //parameter of the anonymous function.
  F.prototype = obj;

  //create a new constructor function based off of the 'F' function.
  return new F();
};

/**
 * Loop through each property in an object and call a function
 * whose arguments are (key,value)
 * @param  {Object}   obj Object of properties
 * @param  {Function} fn  Function to be called on each property.
 * @this {*}
 * @private
 */
obj.each = function (obj, fn, context) {
  for (var key in obj) {
    if (hasOwnProp.call(obj, key)) {
      fn.call(context || this, key, obj[key]);
    }
  }
};

/**
 * Merge two objects together and return the original.
 * @param  {Object} obj1
 * @param  {Object} obj2
 * @return {Object}
 * @private
 */
obj.merge = function (obj1, obj2) {
  if (!obj2) {
    return obj1;
  }
  for (var key in obj2) {
    if (hasOwnProp.call(obj2, key)) {
      obj1[key] = obj2[key];
    }
  }
  return obj1;
};

/**
 * Merge two objects, and merge any properties that are objects
 * instead of just overwriting one. Uses to merge options hashes
 * where deeper default settings are important.
 * @param  {Object} obj1 Object to override
 * @param  {Object} obj2 Overriding object
 * @return {Object}      New object. Obj1 and Obj2 will be untouched.
 * @private
 */
obj.deepMerge = function (obj1, obj2) {
  var key, val1, val2;

  // make a copy of obj1 so we're not overwriting original values.
  // like prototype.options_ and all sub options objects
  obj1 = obj.copy(obj1);

  for (key in obj2) {
    if (hasOwnProp.call(obj2, key)) {
      val1 = obj1[key];
      val2 = obj2[key];

      // Check if both properties are pure objects and do a deep merge if so
      if (obj.isPlain(val1) && obj.isPlain(val2)) {
        obj1[key] = obj.deepMerge(val1, val2);
      } else {
        obj1[key] = obj2[key];
      }
    }
  }
  return obj1;
};

/**
 * Make a copy of the supplied object
 * @param  {Object} obj Object to copy
 * @return {Object}     Copy of object
 * @private
 */
obj.copy = function (objToCopy) {
  return obj.merge({}, objToCopy);
};

/**
 * Check if an object is plain, and not a dom node or any object sub-instance
 * @param  {Object} obj Object to check
 * @return {Boolean}     True if plain, false otherwise
 * @private
 */
obj.isPlain = function (obj) {
  return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
};

/**
 * Check if an object is Array
*  Since instanceof Array will not work on arrays created in another frame we need to use Array.isArray, but since IE8 does not support Array.isArray we need this shim
 * @param  {Object} obj Object to check
 * @return {Boolean}     True if plain, false otherwise
 * @private
 */
obj.isArray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
   It also stores a unique id on the function so it can be easily removed from events
 * @param  {*}   context The object to bind as scope
 * @param  {Function} fn      The function to be bound to a scope
 * @param  {Number=}   uid     An optional unique ID for the function to be set
 * @return {Function}
 * @private
 */
var bind = function bind(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) {
    fn.guid = (exports.guid = guid += 1, guid - 1);
  }

  // Create the new function that changes the context
  var ret = function ret() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function, then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method when you remove the listener as well.
  // currently used in text tracks
  ret.guid = uid ? uid + '_' + fn.guid : fn.guid;

  return ret;
};

/**
 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
 * Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 * @type {Object}
 * @private
 */
var cache = {};

/**
 * Unique ID for an element or function
 * @type {Number}
 * @private
 */
var guid = 1;

/**
 * Unique attribute name to store an element's guid in
 * @type {String}
 * @constant
 * @private
 */
var expando = 'vdata' + new Date().getTime();

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 * @private
 */
var getData = function getData(el) {
  var id = el[expando];
  if (!id) {
    id = el[expando] = (exports.guid = guid += 1, guid - 1);
  }
  if (!cache[id]) {
    cache[id] = {};
  }
  return cache[id];
};

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 * @private
 */
var hasData = function hasData(el) {
  var id = el[expando];
  return !(!id || isEmpty(cache[id]));
};

/**
 * Delete data for the element from the cache and the guid attr from getElementById
 * @param  {Element} el Remove data for an element
 * @private
 */
var removeData = function removeData(el) {
  var id = el[expando];
  if (!id) {
    return;
  }
  // Remove all stored data
  // Changed to = null
  // http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
  // cache[id] = null;
  delete cache[id];

  // Remove the expando property from the DOM node
  try {
    delete el[expando];
  } catch (e) {
    if (el.removeAttribute) {
      el.removeAttribute(expando);
    } else {
      // IE doesn't appear to support removeAttribute on the document element
      el[expando] = null;
    }
  }
};

/**
 * Check if an object is empty
 * @param  {Object}  obj The object to check for emptiness
 * @return {Boolean}
 * @private
 */
var isEmpty = function isEmpty(obj) {
  for (var prop in obj) {
    // Inlude null properties as empty.
    if (obj[prop] !== null) {
      return false;
    }
  }
  return true;
};

/**
 * Check if an element has a CSS class
 * @param {Element} element Element to check
 * @param {String} classToCheck Classname to check
 * @private
 */
var hasClass = function hasClass(element, classToCheck) {
  return (' ' + element.className + ' ').indexOf(' ' + classToCheck + ' ') !== -1;
};

/**
 * Add a CSS class name to an element
 * @param {Element} element    Element to add class name to
 * @param {String} classToAdd Classname to add
 * @private
 */
var addClass = function addClass(element, classToAdd) {
  if (!hasClass(element, classToAdd)) {
    element.className = element.className === '' ? classToAdd : element.className + ' ' + classToAdd;
  }
};

/**
 * Remove a CSS class name from an element
 * @param {Element} element    Element to remove from class name
 * @param {String} classToAdd Classname to remove
 * @private
 */
var removeClass = function removeClass(element, classToRemove) {
  if (!hasClass(element, classToRemove)) {
    return;
  }

  var classNames = element.className.split(' ');

  // no arr.indexOf in ie8, and we don't want to add a big shim
  for (var i = classNames.length - 1; i >= 0; i--) {
    if (classNames[i] === classToRemove) {
      classNames.splice(i, 1);
    }
  }

  element.className = classNames.join(' ');
};

/**
 * Element for testing browser HTML5 video capabilities
 * @type {Element}
 * @constant
 * @private
 */
var TEST_VID = createEl('video');
var track = _globalDocument2['default'].createElement('track');
track.kind = 'captions';
track.srclang = 'en';
track.label = 'English';
TEST_VID.appendChild(track);

/**
 * Useragent for browser testing.
 * @type {String}
 * @constant
 * @private
 */
var USER_AGENT = navigator.userAgent;

/**
 * Device is an iPhone
 * @type {Boolean}
 * @constant
 * @private
 */
var IS_IPHONE = /iPhone/i.test(USER_AGENT);
var IS_IPAD = /iPad/i.test(USER_AGENT);
var IS_IPOD = /iPod/i.test(USER_AGENT);
var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

var IOS_VERSION = (function () {
  var match = USER_AGENT.match(/OS (\d+)_/i);
  if (match && match[1]) {
    return match[1];
  }
})();

var IS_ANDROID = /Android/i.test(USER_AGENT);
var ANDROID_VERSION = (function () {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
      major,
      minor;

  if (!match) {
    return null;
  }

  major = match[1] && parseFloat(match[1]);
  minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  } else {
    return null;
  }
})();
// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;

var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
var IS_CHROME = /Chrome/i.test(USER_AGENT);
var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);

var TOUCH_ENABLED = !!('ontouchstart' in _globalWindow2['default'] || _globalWindow2['default'].DocumentTouch && _globalDocument2['default'] instanceof _globalWindow2['default'].DocumentTouch);
var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in TEST_VID.style);

/**
 * Apply attributes to an HTML element.
 * @param  {Element} el         Target element.
 * @param  {Object=} attributes Element attributes to be applied.
 * @private
 */
var setElementAttributes = function setElementAttributes(el, attributes) {
  obj.each(attributes, function (attrName, attrValue) {
    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
      el.removeAttribute(attrName);
    } else {
      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
    }
  });
};

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 * @param  {Element} tag Element from which to get tag attributes
 * @return {Object}
 * @private
 */
var getElementAttributes = function getElementAttributes(tag) {
  var obj, knownBooleans, attrs, attrName, attrVal;

  obj = {};

  // known boolean attributes
  // we can check for matching boolean properties, but older browsers
  // won't know about HTML5 boolean attributes that we still read from
  knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

  if (tag && tag.attributes && tag.attributes.length > 0) {
    attrs = tag.attributes;

    for (var i = attrs.length - 1; i >= 0; i--) {
      attrName = attrs[i].name;
      attrVal = attrs[i].value;

      // check for known booleans
      // the matching element property will return a value for typeof
      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
        // the value of an included boolean attribute is typically an empty
        // string ('') which would equal false if we just check for a false value.
        // we also don't want support bad code like autoplay='false'
        attrVal = attrVal !== null ? true : false;
      }

      obj[attrName] = attrVal;
    }
  }

  return obj;
};

/**
 * Get the computed style value for an element
 * From http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/
 * @param  {Element} el        Element to get style value for
 * @param  {String} strCssRule Style name
 * @return {String}            Style value
 * @private
 */
var getComputedDimension = function getComputedDimension(el, strCssRule) {
  var strValue = '';
  if (_globalDocument2['default'].defaultView && _globalDocument2['default'].defaultView.getComputedStyle) {
    strValue = _globalDocument2['default'].defaultView.getComputedStyle(el, '').getPropertyValue(strCssRule);
  } else if (el.currentStyle) {
    // IE8 Width/Height support
    var upperCasedRule = strCssRule.substr(0, 1).toUpperCase() + strCssRule.substr(1);
    strValue = el['client' + upperCasedRule] + 'px';
  }
  return strValue;
};

/**
 * Insert an element as the first child node of another
 * @param  {Element} child   Element to insert
 * @param  {[type]} parent Element to insert child into
 * @private
 */
var insertFirst = function insertFirst(child, parent) {
  if (parent.firstChild) {
    parent.insertBefore(child, parent.firstChild);
  } else {
    parent.appendChild(child);
  }
};

/**
 * Object to hold browser support information
 * @type {Object}
 * @private
 */
var browser = {};

/**
 * Shorthand for document.getElementById()
 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
 * @param  {String} id  Element ID
 * @return {Element}    Element with supplied ID
 * @private
 */
var el = function el(id) {
  if (id.indexOf('#') === 0) {
    id = id.slice(1);
  }

  return _globalDocument2['default'].getElementById(id);
};

/**
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 * @param  {Number} seconds Number of seconds to be turned into a string
 * @param  {Number} guide   Number (in seconds) to model the string after
 * @return {String}         Time formatted as H:MM:SS or M:SS
 * @private
 */
var formatTime = function formatTime(seconds) {
  var guide = arguments[1] === undefined ? seconds : arguments[1];
  return (function () {
    var s = Math.floor(seconds % 60);
    var m = Math.floor(seconds / 60 % 60);
    var h = Math.floor(seconds / 3600);
    var gm = Math.floor(guide / 60 % 60);
    var gh = Math.floor(guide / 3600);

    // handle invalid times
    if (isNaN(seconds) || seconds === Infinity) {
      // '-' is false for all relational operators (e.g. <, >=) so this setting
      // will add the minimum number of fields specified by the guide
      h = m = s = '-';
    }

    // Check if we need to show hours
    h = h > 0 || gh > 0 ? h + ':' : '';

    // If hours are showing, we may need to add a leading zero.
    // Always show at least one digit of minutes.
    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

    // Check if leading zero is need for seconds
    s = s < 10 ? '0' + s : s;

    return h + m + s;
  })();
};

// Attempt to block the ability to select text while dragging controls
var blockTextSelection = function blockTextSelection() {
  _globalDocument2['default'].body.focus();
  _globalDocument2['default'].onselectstart = function () {
    return false;
  };
};
// Turn off text selection blocking
var unblockTextSelection = function unblockTextSelection() {
  _globalDocument2['default'].onselectstart = function () {
    return true;
  };
};

/**
 * Trim whitespace from the ends of a string.
 * @param  {String} string String to trim
 * @return {String}        Trimmed string
 * @private
 */
var trim = function trim(str) {
  return (str + '').replace(/^\s+|\s+$/g, '');
};

/**
 * Should round off a number to a decimal place
 * @param  {Number} num Number to round
 * @param  {Number} dec Number of decimal places to round to
 * @return {Number}     Rounded number
 * @private
 */
var round = function round(num) {
  var dec = arguments[1] === undefined ? 0 : arguments[1];

  return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
};

/**
 * Should create a fake TimeRange object
 * Mimics an HTML5 time range instance, which has functions that
 * return the start and end times for a range
 * TimeRanges are returned by the buffered() method
 * @param  {Number} start Start time in seconds
 * @param  {Number} end   End time in seconds
 * @return {Object}       Fake TimeRange object
 * @private
 */
var createTimeRange = function createTimeRange(_start, _end) {
  return {
    length: 1,
    start: function start() {
      return _start;
    },
    end: function end() {
      return _end;
    }
  };
};

/**
 * Add to local storage (maybe removable)
 * @private
 */
var setLocalStorage = function setLocalStorage(key, value) {
  try {
    // IE was throwing errors referencing the var anywhere without this
    var _localStorage = _globalWindow2['default'].localStorage || false;
    if (!_localStorage) {
      return;
    }
    _localStorage[key] = value;
  } catch (e) {
    if (e.code === 22 || e.code === 1014) {
      // Webkit == 22 / Firefox == 1014
      log('LocalStorage Full (VideoJS)', e);
    } else {
      if (e.code === 18) {
        log('LocalStorage not allowed (VideoJS)', e);
      } else {
        log('LocalStorage Error (VideoJS)', e);
      }
    }
  }
};

/**
 * Get absolute version of relative URL. Used to tell flash correct URL.
 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 * @param  {String} url URL to make absolute
 * @return {String}     Absolute URL
 * @private
 */
var getAbsoluteURL = function getAbsoluteURL(url) {
  // Check if absolute URL
  if (!url.match(/^https?:\/\//)) {
    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
    url = createEl('div', {
      innerHTML: '<a href="' + url + '">x</a>'
    }).firstChild.href;
  }

  return url;
};

/**
 * Resolve and parse the elements of a URL
 * @param  {String} url The url to parse
 * @return {Object}     An object of url details
 */
var parseUrl = function parseUrl(url) {
  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

  // add the url to an anchor and let the browser parse the URL
  var a = createEl('a', { href: url });

  // IE8 (and 9?) Fix
  // ie8 doesn't parse the URL correctly until the anchor is actually
  // added to the body, and an innerHTML is needed to trigger the parsing
  var addToBody = a.host === '' && a.protocol !== 'file:';
  var div = undefined;
  if (addToBody) {
    div = createEl('div');
    div.innerHTML = '<a href="' + url + '"></a>';
    a = div.firstChild;
    // prevent the div from affecting layout
    div.setAttribute('style', 'display:none; position:absolute;');
    _globalDocument2['default'].body.appendChild(div);
  }

  // Copy the specific URL properties to a new object
  // This is also needed for IE8 because the anchor loses its
  // properties when it's removed from the dom
  var details = {};
  for (var i = 0; i < props.length; i++) {
    details[props[i]] = a[props[i]];
  }

  // IE9 adds the port to the host property unlike everyone else. If
  // a port identifier is added for standard ports, strip it.
  if (details.protocol === 'http:') {
    details.host = details.host.replace(/:80$/, '');
  }
  if (details.protocol === 'https:') {
    details.host = details.host.replace(/:443$/, '');
  }

  if (addToBody) {
    _globalDocument2['default'].body.removeChild(div);
  }

  return details;
};

/**
 * Log messages to the console and history based on the type of message
 *
 * @param  {String} type The type of message, or `null` for `log`
 * @param  {[type]} args The args to be passed to the log
 * @private
 */
function _logType(type, args) {
  // convert args to an array to get array functions
  var argsArray = Array.prototype.slice.call(args);
  // if there's no console then don't try to output messages
  // they will still be stored in Lib.log.history
  // Was setting these once outside of this function, but containing them
  // in the function makes it easier to test cases where console doesn't exist
  var noop = function noop() {};

  var console = _globalWindow2['default']['console'] || {
    'log': noop,
    'warn': noop,
    'error': noop
  };

  if (type) {
    // add the type to the front of the message
    argsArray.unshift(type.toUpperCase() + ':');
  } else {
    // default to log with no prefix
    type = 'log';
  }

  // add to history
  log.history.push(argsArray);

  // add console prefix after adding to history
  argsArray.unshift('VIDEOJS:');

  // call appropriate log function
  if (console[type].apply) {
    console[type].apply(console, argsArray);
  } else {
    // ie8 doesn't allow error.apply, but it will just join() the array anyway
    console[type](argsArray.join(' '));
  }
}

/**
 * Log plain debug messages
 */
var log = function log() {
  _logType(null, arguments);
};

/**
 * Keep a history of log messages
 * @type {Array}
 */
log.history = [];

/**
 * Log error messages
 */
log.error = function () {
  _logType('error', arguments);
};

/**
 * Log warning messages
 */
log.warn = function () {
  _logType('warn', arguments);
};

// Offset Left
// getBoundingClientRect technique from John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
var findPosition = function findPosition(el) {
  var box = undefined;

  if (el.getBoundingClientRect && el.parentNode) {
    box = el.getBoundingClientRect();
  }

  if (!box) {
    return {
      left: 0,
      top: 0
    };
  }

  var docEl = _globalDocument2['default'].documentElement;
  var body = _globalDocument2['default'].body;

  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var scrollLeft = _globalWindow2['default'].pageXOffset || body.scrollLeft;
  var left = box.left + scrollLeft - clientLeft;

  var clientTop = docEl.clientTop || body.clientTop || 0;
  var scrollTop = _globalWindow2['default'].pageYOffset || body.scrollTop;
  var top = box.top + scrollTop - clientTop;

  // Android sometimes returns slightly off decimal values, so need to round
  return {
    left: round(left),
    top: round(top)
  };
};

/**
 * Array functions container
 * @type {Object}
 * @private
 */
var arr = {};

/*
 * Loops through an array and runs a function for each item inside it.
 * @param  {Array}    array       The array
 * @param  {Function} callback    The function to be run for each item
 * @param  {*}        thisArg     The `this` binding of callback
 * @returns {Array}               The array
 * @private
 */
arr.forEach = function (array, callback, thisArg) {
  thisArg = thisArg || this;

  if (obj.isArray(array) && callback instanceof Function) {
    for (var i = 0, len = array.length; i < len; ++i) {
      callback.call(thisArg, array[i], i, array);
    }
  }

  return array;
};

/**
 * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
 *
 * @param {String}    path    The fileName path like '/path/to/file.mp4'
 * @returns {String}          The extension in lower case or an empty string if no extension could be found.
 */
var getFileExtension = function getFileExtension(path) {
  if (typeof path === 'string') {
    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
    var pathParts = splitPathRe.exec(path);

    if (pathParts) {
      return pathParts.pop().toLowerCase();
    }
  }

  return '';
};

exports.createEl = createEl;
exports.capitalize = capitalize;
exports.obj = obj;
exports.isNaN = isNaN;
exports.bind = bind;
exports.cache = cache;
exports.guid = guid;
exports.expando = expando;
exports.getData = getData;
exports.hasData = hasData;
exports.removeData = removeData;
exports.isEmpty = isEmpty;
exports.hasClass = hasClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.TEST_VID = TEST_VID;
exports.USER_AGENT = USER_AGENT;
exports.IS_IPHONE = IS_IPHONE;
exports.IS_IPAD = IS_IPAD;
exports.IS_IPOD = IS_IPOD;
exports.IS_IOS = IS_IOS;
exports.IOS_VERSION = IOS_VERSION;
exports.IS_ANDROID = IS_ANDROID;
exports.ANDROID_VERSION = ANDROID_VERSION;
exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
exports.IS_FIREFOX = IS_FIREFOX;
exports.IS_IE8 = IS_IE8;
exports.IS_CHROME = IS_CHROME;
exports.TOUCH_ENABLED = TOUCH_ENABLED;
exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;
exports.setElementAttributes = setElementAttributes;
exports.getElementAttributes = getElementAttributes;
exports.getComputedDimension = getComputedDimension;
exports.insertFirst = insertFirst;
exports.browser = browser;
exports.el = el;
exports.formatTime = formatTime;
exports.blockTextSelection = blockTextSelection;
exports.unblockTextSelection = unblockTextSelection;
exports.trim = trim;
exports.round = round;
exports.createTimeRange = createTimeRange;
exports.setLocalStorage = setLocalStorage;
exports.getAbsoluteURL = getAbsoluteURL;
exports.parseUrl = parseUrl;
exports.log = log;
exports.findPosition = findPosition;
exports.arr = arr;
exports.getFileExtension = getFileExtension;

},{"global/document":1,"global/window":2}],47:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('./component');

var _component2 = _interopRequireDefault(_component);

/* Loading Spinner
================================================================================ */
/**
 * Loading spinner for waiting events
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var LoadingSpinner = (function (_Component) {
  function LoadingSpinner() {
    _classCallCheck(this, LoadingSpinner);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(LoadingSpinner, _Component);

  _createClass(LoadingSpinner, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(LoadingSpinner.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-loading-spinner'
      });
    }
  }]);

  return LoadingSpinner;
})(_component2['default']);

_component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
exports['default'] = LoadingSpinner;
module.exports = exports['default'];

},{"./component":7}],48:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

/**
 * Custom MediaError to mimic the HTML5 MediaError
 * @param {Number} code The media error code
 */
var MediaError = function MediaError(code) {
  if (typeof code === 'number') {
    this.code = code;
  } else if (typeof code === 'string') {
    // default code is zero, so this is a custom error
    this.message = code;
  } else if (typeof code === 'object') {
    // object
    Lib.obj.merge(this, code);
  }

  if (!this.message) {
    this.message = MediaError.defaultMessages[this.code] || '';
  }
};

/**
 * The error code that refers two one of the defined
 * MediaError types
 * @type {Number}
 */
MediaError.prototype.code = 0;

/**
 * An optional message to be shown with the error.
 * Message is not part of the HTML5 video spec
 * but allows for more informative custom errors.
 * @type {String}
 */
MediaError.prototype.message = '';

/**
 * An optional status code that can be set by plugins
 * to allow even more detail about the error.
 * For example the HLS plugin might provide the specific
 * HTTP status code that was returned when the error
 * occurred, then allowing a custom error overlay
 * to display more information.
 * @type {[type]}
 */
MediaError.prototype.status = null;

MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
'MEDIA_ERR_ABORTED', // = 1
'MEDIA_ERR_NETWORK', // = 2
'MEDIA_ERR_DECODE', // = 3
'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
'MEDIA_ERR_ENCRYPTED' // = 5
];

MediaError.defaultMessages = {
  1: 'You aborted the video playback',
  2: 'A network error caused the video download to fail part-way.',
  3: 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support.',
  4: 'The video could not be loaded, either because the server or network failed or because the format is not supported.',
  5: 'The video is encrypted and we do not have the keys to decrypt it.'
};

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
  MediaError[MediaError.errorTypes[errNum]] = errNum;
  // values should be accessible on both the class and instance
  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
}

exports['default'] = MediaError;
module.exports = exports['default'];

},{"./lib":46}],49:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _buttonJs = _dereq_('../button.js');

var _buttonJs2 = _interopRequireDefault(_buttonJs);

var _menuJs = _dereq_('./menu.js');

var _menuJs2 = _interopRequireDefault(_menuJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * A button class with a popup menu
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var MenuButton = (function (_Button) {
  function MenuButton(player, options) {
    _classCallCheck(this, MenuButton);

    _get(Object.getPrototypeOf(MenuButton.prototype), 'constructor', this).call(this, player, options);

    this.update();

    this.on('keydown', this.handleKeyPress);
    this.el_.setAttribute('aria-haspopup', true);
    this.el_.setAttribute('role', 'button');
  }

  _inherits(MenuButton, _Button);

  _createClass(MenuButton, [{
    key: 'update',
    value: function update() {
      var menu = this.createMenu();

      if (this.menu) {
        this.removeChild(this.menu);
      }

      this.menu = menu;
      this.addChild(menu);

      /**
       * Track the state of the menu button
       * @type {Boolean}
       * @private
       */
      this.buttonPressed_ = false;

      if (this.items && this.items.length === 0) {
        this.hide();
      } else if (this.items && this.items.length > 1) {
        this.show();
      }
    }
  }, {
    key: 'createMenu',
    value: function createMenu() {
      var menu = new _menuJs2['default'](this.player_);

      // Add a title list item to the top
      if (this.options().title) {
        menu.contentEl().appendChild(Lib.createEl('li', {
          className: 'vjs-menu-title',
          innerHTML: Lib.capitalize(this.options().title),
          tabindex: -1
        }));
      }

      this.items = this['createItems']();

      if (this.items) {
        // Add menu items to the menu
        for (var i = 0; i < this.items.length; i++) {
          menu.addItem(this.items[i]);
        }
      }

      return menu;
    }
  }, {
    key: 'createItems',

    /**
     * Create the list of menu items. Specific to each subclass.
     */
    value: function createItems() {}
  }, {
    key: 'buildCSSClass',

    /** @inheritDoc */
    value: function buildCSSClass() {
      return '' + this.className + ' vjs-menu-button ' + _get(Object.getPrototypeOf(MenuButton.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleFocus',

    // Focus - Add keyboard functionality to element
    // This function is not needed anymore. Instead, the keyboard functionality is handled by
    // treating the button as triggering a submenu. When the button is pressed, the submenu
    // appears. Pressing the button again makes the submenu disappear.
    value: function handleFocus() {}
  }, {
    key: 'handleBlur',

    // Can't turn off list display that we turned on with focus, because list would go away.
    value: function handleBlur() {}
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // When you click the button it adds focus, which will show the menu indefinitely.
      // So we'll remove focus when the mouse leaves the button.
      // Focus is needed for tab navigation.
      this.one('mouseout', Lib.bind(this, function () {
        this.menu.unlockShowing();
        this.el_.blur();
      }));
      if (this.buttonPressed_) {
        this.unpressButton();
      } else {
        this.pressButton();
      }
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {

      // Check for space bar (32) or enter (13) keys
      if (event.which === 32 || event.which === 13) {
        if (this.buttonPressed_) {
          this.unpressButton();
        } else {
          this.pressButton();
        }
        event.preventDefault();
        // Check for escape (27) key
      } else if (event.which === 27) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }
        event.preventDefault();
      }
    }
  }, {
    key: 'pressButton',
    value: function pressButton() {
      this.buttonPressed_ = true;
      this.menu.lockShowing();
      this.el_.setAttribute('aria-pressed', true);
      if (this.items && this.items.length > 0) {
        this.items[0].el().focus(); // set the focus to the title of the submenu
      }
    }
  }, {
    key: 'unpressButton',
    value: function unpressButton() {
      this.buttonPressed_ = false;
      this.menu.unlockShowing();
      this.el_.setAttribute('aria-pressed', false);
    }
  }]);

  return MenuButton;
})(_buttonJs2['default']);

_buttonJs2['default'].registerComponent('MenuButton', MenuButton);
exports['default'] = MenuButton;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46,"./menu.js":51}],50:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _buttonJs = _dereq_('../button.js');

var _buttonJs2 = _interopRequireDefault(_buttonJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * The component for a menu item. `<li>`
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var MenuItem = (function (_Button) {
  function MenuItem(player, options) {
    _classCallCheck(this, MenuItem);

    _get(Object.getPrototypeOf(MenuItem.prototype), 'constructor', this).call(this, player, options);
    this.selected(options['selected']);
  }

  _inherits(MenuItem, _Button);

  _createClass(MenuItem, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl(type, props) {
      return _get(Object.getPrototypeOf(MenuItem.prototype), 'createEl', this).call(this, 'li', Lib.obj.merge({
        className: 'vjs-menu-item',
        innerHTML: this.localize(this.options_['label'])
      }, props));
    }
  }, {
    key: 'handleClick',

    /**
     * Handle a click on the menu item, and set it to selected
     */
    value: function handleClick() {
      this.selected(true);
    }
  }, {
    key: 'selected',

    /**
     * Set this menu item as selected or not
     * @param  {Boolean} selected
     */
    value: function selected(_selected) {
      if (_selected) {
        this.addClass('vjs-selected');
        this.el_.setAttribute('aria-selected', true);
      } else {
        this.removeClass('vjs-selected');
        this.el_.setAttribute('aria-selected', false);
      }
    }
  }]);

  return MenuItem;
})(_buttonJs2['default']);

_buttonJs2['default'].registerComponent('MenuItem', MenuItem);
exports['default'] = MenuItem;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46}],51:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _eventsJs = _dereq_('../events.js');

var Events = _interopRequireWildcard(_eventsJs);

/* Menu
================================================================================ */
/**
 * The Menu component is used to build pop up menus, including subtitle and
 * captions selection menus.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Menu = (function (_Component) {
  function Menu() {
    _classCallCheck(this, Menu);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(Menu, _Component);

  _createClass(Menu, [{
    key: 'addItem',

    /**
     * Add a menu item to the menu
     * @param {Object|String} component Component or component type to add
     */
    value: function addItem(component) {
      this.addChild(component);
      component.on('click', Lib.bind(this, function () {
        this.unlockShowing();
      }));
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var contentElType = this.options().contentElType || 'ul';
      this.contentEl_ = Lib.createEl(contentElType, {
        className: 'vjs-menu-content'
      });
      var el = _get(Object.getPrototypeOf(Menu.prototype), 'createEl', this).call(this, 'div', {
        append: this.contentEl_,
        className: 'vjs-menu'
      });
      el.appendChild(this.contentEl_);

      // Prevent clicks from bubbling up. Needed for Menu Buttons,
      // where a click on the parent is significant
      Events.on(el, 'click', function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
      });

      return el;
    }
  }]);

  return Menu;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('Menu', Menu);
exports['default'] = Menu;
module.exports = exports['default'];

},{"../component.js":7,"../events.js":43,"../lib.js":46}],52:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var navigator = _globalWindow2['default'].navigator;

/**
 * Global Player instance options, surfaced from Player.prototype.options_
 * options = Player.prototype.options_
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 */
exports['default'] = {
  // Default order of fallback technology
  'techOrder': ['html5', 'flash'],
  // techOrder: ['flash','html5'],

  'html5': {},
  'flash': {},

  // Default of web browser is 300x150. Should rely on source width/height.
  'width': 300,
  'height': 150,
  // defaultVolume: 0.85,
  'defaultVolume': 0, // The freakin seaguls are driving me crazy!

  // default inactivity timeout
  'inactivityTimeout': 2000,

  // default playback rates
  'playbackRates': [],
  // Add playback rate selection by adding rates
  // 'playbackRates': [0.5, 1, 1.5, 2],

  // Included control sets
  'children': {
    'mediaLoader': {},
    'posterImage': {},
    'textTrackDisplay': {},
    'loadingSpinner': {},
    'bigPlayButton': {},
    'controlBar': {},
    'errorDisplay': {},
    'textTrackSettings': {}
  },

  'language': _globalDocument2['default'].getElementsByTagName('html')[0].getAttribute('lang') || navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',

  // locales and their language translations
  'languages': {},

  // Default message to show when a video cannot be played.
  'notSupportedMessage': 'No compatible source was found for this video.'
};
module.exports = exports['default'];

},{"global/document":1,"global/window":2}],53:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x2,
    property = _x3,
    receiver = _x4; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('./component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('./lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _eventsJs = _dereq_('./events.js');

var Events = _interopRequireWildcard(_eventsJs);

var _fullscreenApiJs = _dereq_('./fullscreen-api.js');

var _fullscreenApiJs2 = _interopRequireDefault(_fullscreenApiJs);

var _mediaErrorJs = _dereq_('./media-error.js');

var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

var _optionsJs = _dereq_('./options.js');

var _optionsJs2 = _interopRequireDefault(_optionsJs);

var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

// Include required child components

var _techLoaderJs = _dereq_('./tech/loader.js');

var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);

var _posterImageJs = _dereq_('./poster-image.js');

var _posterImageJs2 = _interopRequireDefault(_posterImageJs);

var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');

var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);

var _loadingSpinnerJs = _dereq_('./loading-spinner.js');

var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);

var _bigPlayButtonJs = _dereq_('./big-play-button.js');

var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);

var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');

var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);

var _errorDisplayJs = _dereq_('./error-display.js');

var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);

var _tracksTextTrackSettingsJs = _dereq_('./tracks/text-track-settings.js');

var _tracksTextTrackSettingsJs2 = _interopRequireDefault(_tracksTextTrackSettingsJs);

// Require html5 for disposing the original video tag

var _techHtml5Js = _dereq_('./tech/html5.js');

var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

/**
 * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
 *
 * ```js
 * var myPlayer = videojs('example_video_1');
 * ```
 *
 * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
 *
 * ```html
 * <video id="example_video_1" data-setup='{}' controls>
 *   <source src="my-source.mp4" type="video/mp4">
 * </video>
 * ```
 *
 * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
 *
 * @class
 * @extends Component
 */

var Player = (function (_Component) {

  /**
   * player's constructor function
   *
   * @constructs
   * @method init
   * @param {Element} tag        The original video tag used for configuring options
   * @param {Object=} options    Player options
   * @param {Function=} ready    Ready callback function
   */

  function Player(tag, options, ready) {
    _classCallCheck(this, Player);

    // Make sure tag ID exists
    tag.id = tag.id || 'vjs_video_' + Lib.guid++;

    // Set Options
    // The options argument overrides options set in the video tag
    // which overrides globally set options.
    // This latter part coincides with the load order
    // (tag must exist before Player)
    options = Lib.obj.merge(Player.getTagSettings(tag), options);

    // Delay the initialization of children because we need to set up
    // player properties first, and can't use `this` before `super()`
    options.initChildren = false;

    // Same with creating the element
    options.createEl = false;

    // we don't want the player to report touch activity on itself
    // see enableTouchActivity in Component
    options.reportTouchActivity = false;

    // Run base component initializing with new options
    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, null, options, ready);

    // if the global option object was accidentally blown away by
    // someone, bail early with an informative error
    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
    }

    this.tag = tag; // Store the original tag used to set options

    // Store the tag attributes used to restore html5 element
    this.tagAttributes = tag && Lib.getElementAttributes(tag);

    // Update Current Language
    this.language_ = options['language'] || _optionsJs2['default']['language'];

    // Update Supported Languages
    this.languages_ = options['languages'] || _optionsJs2['default']['languages'];

    // Cache for video property values.
    this.cache_ = {};

    // Set poster
    this.poster_ = options['poster'] || '';

    // Set controls
    this.controls_ = !!options['controls'];
    // Original tag settings stored in options
    // now remove immediately so native controls don't flash.
    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
    tag.controls = false;

    /**
    * Store the internal state of scrubbing
    * @private
    * @return {Boolean} True if the user is scrubbing
    */
    this.scrubbing_ = false;

    this.el_ = this.createEl();

    // Load plugins
    if (options['plugins']) {
      Lib.obj.each(options['plugins'], function (key, val) {
        this[key](val);
      }, this);
    }

    this.initChildren();

    // Set isAudio based on whether or not an audio tag was used
    this.isAudio(tag.nodeName.toLowerCase() === 'audio');

    // Update controls className. Can't do this when the controls are initially
    // set because the element doesn't exist yet.
    if (this.controls()) {
      this.addClass('vjs-controls-enabled');
    } else {
      this.addClass('vjs-controls-disabled');
    }

    if (this.isAudio()) {
      this.addClass('vjs-audio');
    }

    if (this.flexNotSupported_()) {
      this.addClass('vjs-no-flex');
    }

    // TODO: Make this smarter. Toggle user state between touching/mousing
    // using events, since devices can have both touch and mouse events.
    // if (Lib.TOUCH_ENABLED) {
    //   this.addClass('vjs-touch-enabled');
    // }

    // Make player easily findable by ID
    Player.players[this.id_] = this;

    // When the player is first initialized, trigger activity so components
    // like the control bar show themselves if needed
    this.userActive_ = true;
    this.reportUserActivity();
    this.listenForUserActivity();

    this.on('fullscreenchange', this.handleFullscreenChange);
    this.on('stageclick', this.handleStageClick);
  }

  _inherits(Player, _Component);

  _createClass(Player, [{
    key: 'dispose',

    /**
     * Destroys the video player and does any necessary cleanup
     *
     *     myPlayer.dispose();
     *
     * This is especially helpful if you are dynamically adding and removing videos
     * to/from the DOM.
     */
    value: function dispose() {
      this.trigger('dispose');
      // prevent dispose from being called twice
      this.off('dispose');

      // Kill reference to this player
      Player.players[this.id_] = null;
      if (this.tag && this.tag['player']) {
        this.tag['player'] = null;
      }
      if (this.el_ && this.el_['player']) {
        this.el_['player'] = null;
      }

      if (this.tech) {
        this.tech.dispose();
      }

      _get(Object.getPrototypeOf(Player.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var el = this.el_ = _get(Object.getPrototypeOf(Player.prototype), 'createEl', this).call(this, 'div');
      var tag = this.tag;

      // Remove width/height attrs from tag so CSS can make it 100% width/height
      tag.removeAttribute('width');
      tag.removeAttribute('height');

      // Copy over all the attributes from the tag, including ID and class
      // ID will now reference player box, not the video tag
      var attrs = Lib.getElementAttributes(tag);
      Lib.obj.each(attrs, function (attr) {
        // workaround so we don't totally break IE7
        // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
        if (attr === 'class') {
          el.className = attrs[attr];
        } else {
          el.setAttribute(attr, attrs[attr]);
        }
      });

      // Update tag id/class for use as HTML5 playback tech
      // Might think we should do this after embedding in container so .vjs-tech class
      // doesn't flash 100% width/height, but class only applies with .video-js parent
      tag.id += '_html5_api';
      tag.className = 'vjs-tech';

      // Make player findable on elements
      tag['player'] = el['player'] = this;
      // Default state of video is paused
      this.addClass('vjs-paused');

      // Make box use width/height of tag, or rely on default implementation
      // Enforce with CSS since width/height attrs don't work on divs
      this.width(this.options_['width'], true); // (true) Skip resize listener on load
      this.height(this.options_['height'], true);

      // Lib.insertFirst seems to cause the networkState to flicker from 3 to 2, so
      // keep track of the original for later so we can know if the source originally failed
      tag.initNetworkState_ = tag.networkState;

      // Wrap video tag in div (el/box) container
      if (tag.parentNode) {
        tag.parentNode.insertBefore(el, tag);
      }
      Lib.insertFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.

      this.el_ = el;

      return el;
    }
  }, {
    key: 'loadTech',

    /**
     * Load the Media Playback Technology (tech)
     * Load/Create an instance of playback technology including element and API methods
     * And append playback element in player div.
     */
    value: function loadTech(techName, source) {

      // Pause and remove current playback technology
      if (this.tech) {
        this.unloadTech();
      }

      // get rid of the HTML5 video tag as soon as we are using another tech
      if (techName !== 'Html5' && this.tag) {
        _componentJs2['default'].getComponent('Html5').disposeMediaElement(this.tag);
        this.tag.player = null;
        this.tag = null;
      }

      this.techName = techName;

      // Turn off API access because we're loading a new tech that might load asynchronously
      this.isReady_ = false;

      var techReady = Lib.bind(this, function () {
        this.triggerReady();
      });

      // Grab tech-specific options from player options and add source and parent element to use.
      var techOptions = Lib.obj.merge({
        'source': source,
        'playerId': this.id(),
        'textTracks': this.textTracks_
      }, this.options_[techName.toLowerCase()]);

      if (this.tag) {
        techOptions.tag = this.tag;
      }

      if (source) {
        this.currentType_ = source.type;
        if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
          techOptions['startTime'] = this.cache_.currentTime;
        }

        this.cache_.src = source.src;
      }

      // Initialize tech instance
      var techComponent = _componentJs2['default'].getComponent(techName);
      this.tech = new techComponent(techOptions);

      this.on(this.tech, 'ready', this.handleTechReady);
      this.on(this.tech, 'usenativecontrols', this.handleTechUseNativeControls);

      // Listen to every HTML5 events and trigger them back on the player for the plugins
      this.on(this.tech, 'loadstart', this.handleTechLoadStart);
      this.on(this.tech, 'waiting', this.handleTechWaiting);
      this.on(this.tech, 'canplay', this.handleTechCanPlay);
      this.on(this.tech, 'canplaythrough', this.handleTechCanPlayThrough);
      this.on(this.tech, 'playing', this.handleTechPlaying);
      this.on(this.tech, 'ended', this.handleTechEnded);
      this.on(this.tech, 'seeking', this.handleTechSeeking);
      this.on(this.tech, 'seeked', this.handleTechSeeked);
      this.on(this.tech, 'play', this.handleTechPlay);
      this.on(this.tech, 'firstplay', this.handleTechFirstPlay);
      this.on(this.tech, 'pause', this.handleTechPause);
      this.on(this.tech, 'progress', this.handleTechProgress);
      this.on(this.tech, 'durationchange', this.handleTechDurationChange);
      this.on(this.tech, 'fullscreenchange', this.handleTechFullscreenChange);
      this.on(this.tech, 'error', this.handleTechError);
      this.on(this.tech, 'suspend', this.handleTechSuspend);
      this.on(this.tech, 'abort', this.handleTechAbort);
      this.on(this.tech, 'emptied', this.handleTechEmptied);
      this.on(this.tech, 'stalled', this.handleTechStalled);
      this.on(this.tech, 'loadedmetadata', this.handleTechLoadedMetaData);
      this.on(this.tech, 'metadataupdate', this.handleMetaDataUpdate);
      this.on(this.tech, 'loadeddata', this.handleTechLoadedData);
      this.on(this.tech, 'timeupdate', this.handleTechTimeUpdate);
      this.on(this.tech, 'ratechange', this.handleTechRateChange);
      this.on(this.tech, 'volumechange', this.handleTechVolumeChange);
      this.on(this.tech, 'texttrackchange', this.onTextTrackChange);

      if (this.controls() && !this.usingNativeControls()) {
        this.addTechControlsListeners();
      }

      // Add the tech element in the DOM if it was not already there
      // Make sure to not insert the original video element if using Html5
      if (this.tech.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
        Lib.insertFirst(this.tech.el(), this.el());
      }

      // Get rid of the original video tag reference after the first tech is loaded
      if (this.tag) {
        this.tag.player = null;
        this.tag = null;
      }

      this.tech.ready(techReady);
    }
  }, {
    key: 'unloadTech',
    value: function unloadTech() {
      // Save the current text tracks so that we can reuse the same text tracks with the next tech
      this.textTracks_ = this.textTracks();

      this.isReady_ = false;

      this.tech.dispose();

      this.tech = false;
    }
  }, {
    key: 'addTechControlsListeners',
    value: function addTechControlsListeners() {
      // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
      // trigger mousedown/up.
      // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
      // Any touch events are set to block the mousedown event from happening
      this.on(this.tech, 'mousedown', this.handleTechClick);

      // If the controls were hidden we don't want that to change without a tap event
      // so we'll check if the controls were already showing before reporting user
      // activity
      this.on(this.tech, 'touchstart', this.handleTechTouchStart);
      this.on(this.tech, 'touchmove', this.handleTechTouchMove);
      this.on(this.tech, 'touchend', this.handleTechTouchEnd);

      // Turn on component tap events
      this.tech.emitTapEvents();

      // The tap listener needs to come after the touchend listener because the tap
      // listener cancels out any reportedUserActivity when setting userActive(false)
      this.on(this.tech, 'tap', this.handleTechTap);
    }
  }, {
    key: 'removeTechControlsListeners',

    /**
     * Remove the listeners used for click and tap controls. This is needed for
     * toggling to controls disabled, where a tap/touch should do nothing.
     */
    value: function removeTechControlsListeners() {
      // We don't want to just use `this.off()` because there might be other needed
      // listeners added by techs that extend this.
      this.off(this.tech, 'tap', this.handleTechTap);
      this.off(this.tech, 'touchstart', this.handleTechTouchStart);
      this.off(this.tech, 'touchmove', this.handleTechTouchMove);
      this.off(this.tech, 'touchend', this.handleTechTouchEnd);
      this.off(this.tech, 'mousedown', this.handleTechClick);
    }
  }, {
    key: 'handleTechReady',

    /**
     * Player waits for the tech to be ready
     * @private
     */
    value: function handleTechReady() {
      this.triggerReady();

      // Chrome and Safari both have issues with autoplay.
      // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
      // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
      // This fixes both issues. Need to wait for API, so it updates displays correctly
      if (this.tag && this.options_.autoplay && this.paused()) {
        delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
        this.play();
      }
    }
  }, {
    key: 'handleTechUseNativeControls',

    /**
     * Fired when the native controls are used
     * @private
     */
    value: function handleTechUseNativeControls() {
      this.usingNativeControls(true);
    }
  }, {
    key: 'handleTechLoadStart',

    /**
     * Fired when the user agent begins looking for media data
     * @event loadstart
     */
    value: function handleTechLoadStart() {
      // TODO: Update to use `emptied` event instead. See #1277.

      this.removeClass('vjs-ended');

      // reset the error state
      this.error(null);

      // If it's already playing we want to trigger a firstplay event now.
      // The firstplay event relies on both the play and loadstart events
      // which can happen in any order for a new source
      if (!this.paused()) {
        this.trigger('loadstart');
        this.trigger('firstplay');
      } else {
        // reset the hasStarted state
        this.hasStarted(false);
        this.trigger('loadstart');
      }
    }
  }, {
    key: 'hasStarted',
    value: function hasStarted(_hasStarted) {
      if (_hasStarted !== undefined) {
        // only update if this is a new value
        if (this.hasStarted_ !== _hasStarted) {
          this.hasStarted_ = _hasStarted;
          if (_hasStarted) {
            this.addClass('vjs-has-started');
            // trigger the firstplay event if this newly has played
            this.trigger('firstplay');
          } else {
            this.removeClass('vjs-has-started');
          }
        }
        return this;
      }
      return !!this.hasStarted_;
    }
  }, {
    key: 'handleTechPlay',

    /**
     * Fired whenever the media begins or resumes playback
     * @event play
     */
    value: function handleTechPlay() {
      this.removeClass('vjs-ended');
      this.removeClass('vjs-paused');
      this.addClass('vjs-playing');

      // hide the poster when the user hits play
      // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
      this.hasStarted(true);

      this.trigger('play');
    }
  }, {
    key: 'handleTechWaiting',

    /**
     * Fired whenever the media begins waiting
     * @event waiting
     */
    value: function handleTechWaiting() {
      this.addClass('vjs-waiting');
      this.trigger('waiting');
    }
  }, {
    key: 'handleTechCanPlay',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event canplay
     */
    value: function handleTechCanPlay() {
      this.removeClass('vjs-waiting');
      this.trigger('canplay');
    }
  }, {
    key: 'handleTechCanPlayThrough',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event canplaythrough
     */
    value: function handleTechCanPlayThrough() {
      this.removeClass('vjs-waiting');
      this.trigger('canplaythrough');
    }
  }, {
    key: 'handleTechPlaying',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event playing
     */
    value: function handleTechPlaying() {
      this.removeClass('vjs-waiting');
      this.trigger('playing');
    }
  }, {
    key: 'handleTechSeeking',

    /**
     * Fired whenever the player is jumping to a new time
     * @event seeking
     */
    value: function handleTechSeeking() {
      this.addClass('vjs-seeking');
      this.trigger('seeking');
    }
  }, {
    key: 'handleTechSeeked',

    /**
     * Fired when the player has finished jumping to a new time
     * @event seeked
     */
    value: function handleTechSeeked() {
      this.removeClass('vjs-seeking');
      this.trigger('seeked');
    }
  }, {
    key: 'handleTechFirstPlay',

    /**
     * Fired the first time a video is played
     *
     * Not part of the HLS spec, and we're not sure if this is the best
     * implementation yet, so use sparingly. If you don't have a reason to
     * prevent playback, use `myPlayer.one('play');` instead.
     *
     * @event firstplay
     */
    value: function handleTechFirstPlay() {
      //If the first starttime attribute is specified
      //then we will start at the given offset in seconds
      if (this.options_['starttime']) {
        this.currentTime(this.options_['starttime']);
      }

      this.addClass('vjs-has-started');
      this.trigger('firstplay');
    }
  }, {
    key: 'handleTechPause',

    /**
     * Fired whenever the media has been paused
     * @event pause
     */
    value: function handleTechPause() {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      this.trigger('pause');
    }
  }, {
    key: 'handleTechProgress',

    /**
     * Fired while the user agent is downloading media data
     * @event progress
     */
    value: function handleTechProgress() {
      this.trigger('progress');

      // Add custom event for when source is finished downloading.
      if (this.bufferedPercent() === 1) {
        this.trigger('loadedalldata');
      }
    }
  }, {
    key: 'handleTechEnded',

    /**
     * Fired when the end of the media resource is reached (currentTime == duration)
     * @event ended
     */
    value: function handleTechEnded() {
      this.addClass('vjs-ended');
      if (this.options_['loop']) {
        this.currentTime(0);
        this.play();
      } else if (!this.paused()) {
        this.pause();
      }

      this.trigger('ended');
    }
  }, {
    key: 'handleTechDurationChange',

    /**
     * Fired when the duration of the media resource is first known or changed
     * @event durationchange
     */
    value: function handleTechDurationChange() {
      this.updateDuration();
      this.trigger('durationchange');
    }
  }, {
    key: 'handleTechClick',

    /**
     * Handle a click on the media element to play/pause
     */
    value: function handleTechClick(event) {
      // We're using mousedown to detect clicks thanks to Flash, but mousedown
      // will also be triggered with right-clicks, so we need to prevent that
      if (event.button !== 0) return;

      // When controls are disabled a click should not toggle playback because
      // the click is considered a control
      if (this.controls()) {
        if (this.paused()) {
          this.play();
        } else {
          this.pause();
        }
      }
    }
  }, {
    key: 'handleTechTap',

    /**
     * Handle a tap on the media element. It will toggle the user
     * activity state, which hides and shows the controls.
     */
    value: function handleTechTap() {
      this.userActive(!this.userActive());
    }
  }, {
    key: 'handleTechTouchStart',
    value: function handleTechTouchStart() {
      this.userWasActive = this.userActive();
    }
  }, {
    key: 'handleTechTouchMove',
    value: function handleTechTouchMove() {
      if (this.userWasActive) {
        this.reportUserActivity();
      }
    }
  }, {
    key: 'handleTechTouchEnd',
    value: function handleTechTouchEnd(event) {
      // Stop the mouse events from also happening
      event.preventDefault();
    }
  }, {
    key: 'updateDuration',

    /**
     * Update the duration of the player using the tech
     * @private
     */
    value: function updateDuration() {
      // Allows for caching value instead of asking player each time.
      // We need to get the techGet response and check for a value so we don't
      // accidentally cause the stack to blow up.
      var duration = this.techGet('duration');
      if (duration) {
        if (duration < 0) {
          duration = Infinity;
        }
        this.duration(duration);
        // Determine if the stream is live and propagate styles down to UI.
        if (duration === Infinity) {
          this.addClass('vjs-live');
        } else {
          this.removeClass('vjs-live');
        }
      }
    }
  }, {
    key: 'handleFullscreenChange',

    /**
     * Fired when the player switches in or out of fullscreen mode
     * @event fullscreenchange
     */
    value: function handleFullscreenChange() {
      if (this.isFullscreen()) {
        this.addClass('vjs-fullscreen');
      } else {
        this.removeClass('vjs-fullscreen');
      }
    }
  }, {
    key: 'handleStageClick',

    /**
     * native click events on the SWF aren't triggered on IE11, Win8.1RT
     * use stageclick events triggered from inside the SWF instead
     * @private
     */
    value: function handleStageClick() {
      this.reportUserActivity();
    }
  }, {
    key: 'handleTechFullscreenChange',
    value: function handleTechFullscreenChange() {
      this.trigger('fullscreenchange');
    }
  }, {
    key: 'handleTechError',

    /**
     * Fires when an error occurred during the loading of an audio/video
     * @event error
     */
    value: function handleTechError() {
      this.error(this.tech.error().code);
    }
  }, {
    key: 'handleTechSuspend',

    /**
     * Fires when the browser is intentionally not getting media data
     * @event suspend
     */
    value: function handleTechSuspend() {
      this.trigger('suspend');
    }
  }, {
    key: 'handleTechAbort',

    /**
     * Fires when the loading of an audio/video is aborted
     * @event abort
     */
    value: function handleTechAbort() {
      this.trigger('abort');
    }
  }, {
    key: 'handleTechEmptied',

    /**
     * Fires when the current playlist is empty
     * @event emptied
     */
    value: function handleTechEmptied() {
      this.trigger('emptied');
    }
  }, {
    key: 'handleTechStalled',

    /**
     * Fires when the browser is trying to get media data, but data is not available
     * @event stalled
     */
    value: function handleTechStalled() {
      this.trigger('stalled');
    }
  }, {
    key: 'handleTechLoadedMetaData',

    /**
     * Fires when the browser has loaded meta data for the audio/video
     * @event loadedmetadata
     */
    value: function handleTechLoadedMetaData() {
      this.trigger('loadedmetadata');
    }
  }, {
    key: 'handleMetaDataUpdate',

    /**
     * Fires when the swf issues a metadataupdate event, an event specific to our
     * Abacast stream that uses Flash's onMetaData event to surface synced banner
     * ads to listeners.
     * @event metadataupdate
     * @todo How to we pass the metadata object from Flash to JavaScript?
     */
    value: function handleMetaDataUpdate() {
      this.trigger('metadataupdate');
    }
  }, {
    key: 'handleTechLoadedData',

    /**
     * Fires when the browser has loaded the current frame of the audio/video
     * @event loaddata
     */
    value: function handleTechLoadedData() {
      this.trigger('loadeddata');
    }
  }, {
    key: 'handleTechTimeUpdate',

    /**
     * Fires when the current playback position has changed
     * @event timeupdate
     */
    value: function handleTechTimeUpdate() {
      this.trigger('timeupdate');
    }
  }, {
    key: 'handleTechRateChange',

    /**
     * Fires when the playing speed of the audio/video is changed
     * @event ratechange
     */
    value: function handleTechRateChange() {
      this.trigger('ratechange');
    }
  }, {
    key: 'handleTechVolumeChange',

    /**
     * Fires when the volume has been changed
     * @event volumechange
     */
    value: function handleTechVolumeChange() {
      this.trigger('volumechange');
    }
  }, {
    key: 'onTextTrackChange',

    /**
     * Fires when the text track has been changed
     * @event texttrackchange
     */
    value: function onTextTrackChange() {
      this.trigger('texttrackchange');
    }
  }, {
    key: 'getCache',

    /**
     * Object for cached values.
     */
    value: function getCache() {
      return this.cache_;
    }
  }, {
    key: 'techCall',

    // Pass values to the playback tech
    value: function techCall(method, arg) {
      // If it's not ready yet, call method when it is
      if (this.tech && !this.tech.isReady_) {
        this.tech.ready(function () {
          this[method](arg);
        });

        // Otherwise call method now
      } else {
        try {
          this.tech[method](arg);
        } catch (e) {
          Lib.log(e);
          throw e;
        }
      }
    }
  }, {
    key: 'techGet',

    // Get calls can't wait for the tech, and sometimes don't need to.
    value: function techGet(method) {
      if (this.tech && this.tech.isReady_) {

        // Flash likes to die and reload when you hide or reposition it.
        // In these cases the object methods go away and we get errors.
        // When that happens we'll catch the errors and inform tech that it's not ready any more.
        try {
          return this.tech[method]();
        } catch (e) {
          // When building additional tech libs, an expected method may not be defined yet
          if (this.tech[method] === undefined) {
            Lib.log('Video.js: ' + method + ' method not defined for ' + this.techName + ' playback technology.', e);
          } else {
            // When a method isn't available on the object it throws a TypeError
            if (e.name === 'TypeError') {
              Lib.log('Video.js: ' + method + ' unavailable on ' + this.techName + ' playback technology element.', e);
              this.tech.isReady_ = false;
            } else {
              Lib.log(e);
            }
          }
          throw e;
        }
      }

      return;
    }
  }, {
    key: 'play',

    /**
     * start media playback
     *
     *     myPlayer.play();
     *
     * @return {Player} self
     */
    value: function play() {
      this.techCall('play');
      return this;
    }
  }, {
    key: 'pause',

    /**
     * Pause the video playback
     *
     *     myPlayer.pause();
     *
     * @return {Player} self
     */
    value: function pause() {
      this.techCall('pause');
      return this;
    }
  }, {
    key: 'paused',

    /**
     * Check if the player is paused
     *
     *     var isPaused = myPlayer.paused();
     *     var isPlaying = !myPlayer.paused();
     *
     * @return {Boolean} false if the media is currently playing, or true otherwise
     */
    value: function paused() {
      // The initial state of paused should be true (in Safari it's actually false)
      return this.techGet('paused') === false ? false : true;
    }
  }, {
    key: 'scrubbing',

    /**
    * Returns whether or not the user is "scrubbing". Scrubbing is when the user
    * has clicked the progress bar handle and is dragging it along the progress bar.
    * @param  {Boolean} isScrubbing   True/false the user is scrubbing
    * @return {Boolean}               The scrubbing status when getting
    * @return {Object}                The player when setting
    */
    value: function scrubbing(isScrubbing) {
      if (isScrubbing !== undefined) {
        this.scrubbing_ = !!isScrubbing;

        if (isScrubbing) {
          this.addClass('vjs-scrubbing');
        } else {
          this.removeClass('vjs-scrubbing');
        }

        return this;
      }

      return this.scrubbing_;
    }
  }, {
    key: 'currentTime',

    /**
     * Get or set the current time (in seconds)
     *
     *     // get
     *     var whereYouAt = myPlayer.currentTime();
     *
     *     // set
     *     myPlayer.currentTime(120); // 2 minutes into the video
     *
     * @param  {Number|String=} seconds The time to seek to
     * @return {Number}        The time in seconds, when not setting
     * @return {Player}    self, when the current time is set
     */
    value: function currentTime(seconds) {
      if (seconds !== undefined) {

        this.techCall('setCurrentTime', seconds);

        return this;
      }

      // cache last currentTime and return. default to 0 seconds
      //
      // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
      // currentTime when scrubbing, but may not provide much performance benefit afterall.
      // Should be tested. Also something has to read the actual current time or the cache will
      // never get updated.
      return this.cache_.currentTime = this.techGet('currentTime') || 0;
    }
  }, {
    key: 'duration',

    /**
     * Get the length in time of the video in seconds
     *
     *     var lengthOfVideo = myPlayer.duration();
     *
     * **NOTE**: The video must have started loading before the duration can be
     * known, and in the case of Flash, may not be known until the video starts
     * playing.
     *
     * @return {Number} The duration of the video in seconds
     */
    value: function duration(seconds) {
      if (seconds !== undefined) {

        // cache the last set value for optimized scrubbing (esp. Flash)
        this.cache_.duration = parseFloat(seconds);

        return this;
      }

      if (this.cache_.duration === undefined) {
        this.updateDuration();
      }

      return this.cache_.duration || 0;
    }
  }, {
    key: 'remainingTime',

    /**
     * Calculates how much time is left.
     *
     *     var timeLeft = myPlayer.remainingTime();
     *
     * Not a native video element function, but useful
     * @return {Number} The time remaining in seconds
     */
    value: function remainingTime() {
      return this.duration() - this.currentTime();
    }
  }, {
    key: 'buffered',

    // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
    // Buffered returns a timerange object.
    // Kind of like an array of portions of the video that have been downloaded.

    /**
     * Get a TimeRange object with the times of the video that have been downloaded
     *
     * If you just want the percent of the video that's been downloaded,
     * use bufferedPercent.
     *
     *     // Number of different ranges of time have been buffered. Usually 1.
     *     numberOfRanges = bufferedTimeRange.length,
     *
     *     // Time in seconds when the first range starts. Usually 0.
     *     firstRangeStart = bufferedTimeRange.start(0),
     *
     *     // Time in seconds when the first range ends
     *     firstRangeEnd = bufferedTimeRange.end(0),
     *
     *     // Length in seconds of the first time range
     *     firstRangeLength = firstRangeEnd - firstRangeStart;
     *
     * @return {Object} A mock TimeRange object (following HTML spec)
     */
    value: function buffered() {
      var buffered = this.techGet('buffered');

      if (!buffered || !buffered.length) {
        buffered = Lib.createTimeRange(0, 0);
      }

      return buffered;
    }
  }, {
    key: 'bufferedPercent',

    /**
     * Get the percent (as a decimal) of the video that's been downloaded
     *
     *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
     *
     * 0 means none, 1 means all.
     * (This method isn't in the HTML5 spec, but it's very convenient)
     *
     * @return {Number} A decimal between 0 and 1 representing the percent
     */
    value: function bufferedPercent() {
      var duration = this.duration(),
          buffered = this.buffered(),
          bufferedDuration = 0,
          start,
          end;

      if (!duration) {
        return 0;
      }

      for (var i = 0; i < buffered.length; i++) {
        start = buffered.start(i);
        end = buffered.end(i);

        // buffered end can be bigger than duration by a very small fraction
        if (end > duration) {
          end = duration;
        }

        bufferedDuration += end - start;
      }

      return bufferedDuration / duration;
    }
  }, {
    key: 'bufferedEnd',

    /**
     * Get the ending time of the last buffered time range
     *
     * This is used in the progress bar to encapsulate all time ranges.
     * @return {Number} The end of the last buffered time range
     */
    value: function bufferedEnd() {
      var buffered = this.buffered(),
          duration = this.duration(),
          end = buffered.end(buffered.length - 1);

      if (end > duration) {
        end = duration;
      }

      return end;
    }
  }, {
    key: 'volume',

    /**
     * Get or set the current volume of the media
     *
     *     // get
     *     var howLoudIsIt = myPlayer.volume();
     *
     *     // set
     *     myPlayer.volume(0.5); // Set volume to half
     *
     * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
     *
     * @param  {Number} percentAsDecimal The new volume as a decimal percent
     * @return {Number}                  The current volume, when getting
     * @return {Player}              self, when setting
     */
    value: function volume(percentAsDecimal) {
      var vol = undefined;

      if (percentAsDecimal !== undefined) {
        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
        this.cache_.volume = vol;
        this.techCall('setVolume', vol);
        Lib.setLocalStorage('volume', vol);
        return this;
      }

      // Default to 1 when returning current volume.
      vol = parseFloat(this.techGet('volume'));
      return isNaN(vol) ? 1 : vol;
    }
  }, {
    key: 'muted',

    /**
     * Get the current muted state, or turn mute on or off
     *
     *     // get
     *     var isVolumeMuted = myPlayer.muted();
     *
     *     // set
     *     myPlayer.muted(true); // mute the volume
     *
     * @param  {Boolean=} muted True to mute, false to unmute
     * @return {Boolean} True if mute is on, false if not, when getting
     * @return {Player} self, when setting mute
     */
    value: function muted(_muted) {
      if (_muted !== undefined) {
        this.techCall('setMuted', _muted);
        return this;
      }
      return this.techGet('muted') || false; // Default to false
    }
  }, {
    key: 'supportsFullScreen',

    // Check if current tech can support native fullscreen
    // (e.g. with built in controls like iOS, so not our flash swf)
    value: function supportsFullScreen() {
      return this.techGet('supportsFullScreen') || false;
    }
  }, {
    key: 'isFullscreen',

    /**
     * Check if the player is in fullscreen mode
     *
     *     // get
     *     var fullscreenOrNot = myPlayer.isFullscreen();
     *
     *     // set
     *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
     *
     * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
     * property and instead document.fullscreenElement is used. But isFullscreen is
     * still a valuable property for internal player workings.
     *
     * @param  {Boolean=} isFS Update the player's fullscreen state
     * @return {Boolean} true if fullscreen, false if not
     * @return {Player} self, when setting
     */
    value: function isFullscreen(isFS) {
      if (isFS !== undefined) {
        this.isFullscreen_ = !!isFS;
        return this;
      }
      return !!this.isFullscreen_;
    }
  }, {
    key: 'isFullScreen',

    /**
     * Old naming for isFullscreen()
     * @deprecated for lowercase 's' version
     */
    value: function isFullScreen(isFS) {
      Lib.log.warn('player.isFullScreen() has been deprecated, use player.isFullscreen() with a lowercase "s")');
      return this.isFullscreen(isFS);
    }
  }, {
    key: 'requestFullscreen',

    /**
     * Increase the size of the video to full screen
     *
     *     myPlayer.requestFullscreen();
     *
     * In some browsers, full screen is not supported natively, so it enters
     * "full window mode", where the video fills the browser window.
     * In browsers and devices that support native full screen, sometimes the
     * browser's default controls will be shown, and not the Video.js custom skin.
     * This includes most mobile devices (iOS, Android) and older versions of
     * Safari.
     *
     * @return {Player} self
     */
    value: function requestFullscreen() {
      var fsApi = _fullscreenApiJs2['default'];

      this.isFullscreen(true);

      if (fsApi) {
        // the browser supports going fullscreen at the element level so we can
        // take the controls fullscreen as well as the video

        // Trigger fullscreenchange event after change
        // We have to specifically add this each time, and remove
        // when canceling fullscreen. Otherwise if there's multiple
        // players on a page, they would all be reacting to the same fullscreen
        // events
        Events.on(_globalDocument2['default'], fsApi['fullscreenchange'], Lib.bind(this, function documentFullscreenChange(e) {
          this.isFullscreen(_globalDocument2['default'][fsApi.fullscreenElement]);

          // If cancelling fullscreen, remove event listener.
          if (this.isFullscreen() === false) {
            Events.off(_globalDocument2['default'], fsApi['fullscreenchange'], documentFullscreenChange);
          }

          this.trigger('fullscreenchange');
        }));

        this.el_[fsApi.requestFullscreen]();
      } else if (this.tech.supportsFullScreen()) {
        // we can't take the video.js controls fullscreen but we can go fullscreen
        // with native controls
        this.techCall('enterFullScreen');
      } else {
        // fullscreen isn't supported so we'll just stretch the video element to
        // fill the viewport
        this.enterFullWindow();
        this.trigger('fullscreenchange');
      }

      return this;
    }
  }, {
    key: 'requestFullScreen',

    /**
     * Old naming for requestFullscreen
     * @deprecated for lower case 's' version
     */
    value: function requestFullScreen() {
      Lib.log.warn('player.requestFullScreen() has been deprecated, use player.requestFullscreen() with a lowercase "s")');
      return this.requestFullscreen();
    }
  }, {
    key: 'exitFullscreen',

    /**
     * Return the video to its normal size after having been in full screen mode
     *
     *     myPlayer.exitFullscreen();
     *
     * @return {Player} self
     */
    value: function exitFullscreen() {
      var fsApi = _fullscreenApiJs2['default'];
      this.isFullscreen(false);

      // Check for browser element fullscreen support
      if (fsApi) {
        _globalDocument2['default'][fsApi.exitFullscreen]();
      } else if (this.tech.supportsFullScreen()) {
        this.techCall('exitFullScreen');
      } else {
        this.exitFullWindow();
        this.trigger('fullscreenchange');
      }

      return this;
    }
  }, {
    key: 'cancelFullScreen',

    /**
     * Old naming for exitFullscreen
     * @deprecated for exitFullscreen
     */
    value: function cancelFullScreen() {
      Lib.log.warn('player.cancelFullScreen() has been deprecated, use player.exitFullscreen()');
      return this.exitFullscreen();
    }
  }, {
    key: 'enterFullWindow',

    // When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
    value: function enterFullWindow() {
      this.isFullWindow = true;

      // Storing original doc overflow value to return to when fullscreen is off
      this.docOrigOverflow = _globalDocument2['default'].documentElement.style.overflow;

      // Add listener for esc key to exit fullscreen
      Events.on(_globalDocument2['default'], 'keydown', Lib.bind(this, this.fullWindowOnEscKey));

      // Hide any scroll bars
      _globalDocument2['default'].documentElement.style.overflow = 'hidden';

      // Apply fullscreen styles
      Lib.addClass(_globalDocument2['default'].body, 'vjs-full-window');

      this.trigger('enterFullWindow');
    }
  }, {
    key: 'fullWindowOnEscKey',
    value: function fullWindowOnEscKey(event) {
      if (event.keyCode === 27) {
        if (this.isFullscreen() === true) {
          this.exitFullscreen();
        } else {
          this.exitFullWindow();
        }
      }
    }
  }, {
    key: 'exitFullWindow',
    value: function exitFullWindow() {
      this.isFullWindow = false;
      Events.off(_globalDocument2['default'], 'keydown', this.fullWindowOnEscKey);

      // Unhide scroll bars.
      _globalDocument2['default'].documentElement.style.overflow = this.docOrigOverflow;

      // Remove fullscreen styles
      Lib.removeClass(_globalDocument2['default'].body, 'vjs-full-window');

      // Resize the box, controller, and poster to original sizes
      // this.positionAll();
      this.trigger('exitFullWindow');
    }
  }, {
    key: 'selectSource',
    value: function selectSource(sources) {
      // Loop through each playback technology in the options order
      for (var i = 0, j = this.options_['techOrder']; i < j.length; i++) {
        var techName = Lib.capitalize(j[i]);
        var tech = _componentJs2['default'].getComponent(techName);

        // Check if the current tech is defined before continuing
        if (!tech) {
          Lib.log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
          continue;
        }

        // Check if the browser supports this technology
        if (tech.isSupported()) {
          // Loop through each source object
          for (var a = 0, b = sources; a < b.length; a++) {
            var source = b[a];

            // Check if source can be played with this technology
            if (tech['canPlaySource'](source)) {
              return { source: source, tech: techName };
            }
          }
        }
      }

      return false;
    }
  }, {
    key: 'src',

    /**
     * The source function updates the video source
     *
     * There are three types of variables you can pass as the argument.
     *
     * **URL String**: A URL to the the video file. Use this method if you are sure
     * the current playback technology (HTML5/Flash) can support the source you
     * provide. Currently only MP4 files can be used in both HTML5 and Flash.
     *
     *     myPlayer.src("http://www.example.com/path/to/video.mp4");
     *
     * **Source Object (or element):** A javascript object containing information
     * about the source file. Use this method if you want the player to determine if
     * it can support the file using the type information.
     *
     *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
     *
     * **Array of Source Objects:** To provide multiple versions of the source so
     * that it can be played using HTML5 across browsers you can use an array of
     * source objects. Video.js will detect which version is supported and load that
     * file.
     *
     *     myPlayer.src([
     *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
     *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
     *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
     *     ]);
     *
     * @param  {String|Object|Array=} source The source URL, object, or array of sources
     * @return {String} The current video source when getting
     * @return {String} The player when setting
     */
    value: function src() {
      var source = arguments[0] === undefined ? this.techGet('src') : arguments[0];

      var currentTech = _componentJs2['default'].getComponent(this.techName);

      // case: Array of source objects to choose from and pick the best to play
      if (Lib.obj.isArray(source)) {
        this.sourceList_(source);

        // case: URL String (http://myvideo...)
      } else if (typeof source === 'string') {
        // create a source object from the string
        this.src({ src: source });

        // case: Source object { src: '', type: '' ... }
      } else if (source instanceof Object) {
        // check if the source has a type and the loaded tech cannot play the source
        // if there's no type we'll just try the current tech
        if (source.type && !currentTech['canPlaySource'](source)) {
          // create a source list with the current source and send through
          // the tech loop to check for a compatible technology
          this.sourceList_([source]);
        } else {
          this.cache_.src = source.src;
          this.currentType_ = source.type || '';

          // wait until the tech is ready to set the source
          this.ready(function () {

            // The setSource tech method was added with source handlers
            // so older techs won't support it
            // We need to check the direct prototype for the case where subclasses
            // of the tech do not support source handlers
            if (currentTech.prototype.hasOwnProperty('setSource')) {
              this.techCall('setSource', source);
            } else {
              this.techCall('src', source.src);
            }

            if (this.options_['preload'] === 'auto') {
              this.load();
            }

            if (this.options_['autoplay']) {
              this.play();
            }
          });
        }
      }

      return this;
    }
  }, {
    key: 'sourceList_',

    /**
     * Handle an array of source objects
     * @param  {[type]} sources Array of source objects
     * @private
     */
    value: function sourceList_(sources) {
      var sourceTech = this.selectSource(sources);

      if (sourceTech) {
        if (sourceTech.tech === this.techName) {
          // if this technology is already loaded, set the source
          this.src(sourceTech.source);
        } else {
          // load this technology with the chosen source
          this.loadTech(sourceTech.tech, sourceTech.source);
        }
      } else {
        // We need to wrap this in a timeout to give folks a chance to add error event handlers
        this.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options()['notSupportedMessage']) });
        }, 0);

        // we could not find an appropriate tech, but let's still notify the delegate that this is it
        // this needs a better comment about why this is needed
        this.triggerReady();
      }
    }
  }, {
    key: 'load',

    /**
     * Begin loading the src data.
     * @return {Player} Returns the player
     */
    value: function load() {
      this.techCall('load');
      return this;
    }
  }, {
    key: 'currentSrc',

    /**
     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
     * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
     * @return {String} The current source
     */
    value: function currentSrc() {
      return this.techGet('currentSrc') || this.cache_.src || '';
    }
  }, {
    key: 'currentType',

    /**
     * Get the current source type e.g. video/mp4
     * This can allow you rebuild the current source object so that you could load the same
     * source and tech later
     * @return {String} The source MIME type
     */
    value: function currentType() {
      return this.currentType_ || '';
    }
  }, {
    key: 'preload',

    /**
     * Get or set the preload attribute.
     * @return {String} The preload attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function preload(value) {
      if (value !== undefined) {
        this.techCall('setPreload', value);
        this.options_['preload'] = value;
        return this;
      }
      return this.techGet('preload');
    }
  }, {
    key: 'autoplay',

    /**
     * Get or set the autoplay attribute.
     * @return {String} The autoplay attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function autoplay(value) {
      if (value !== undefined) {
        this.techCall('setAutoplay', value);
        this.options_['autoplay'] = value;
        return this;
      }
      return this.techGet('autoplay', value);
    }
  }, {
    key: 'loop',

    /**
     * Get or set the loop attribute on the video element.
     * @return {String} The loop attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function loop(value) {
      if (value !== undefined) {
        this.techCall('setLoop', value);
        this.options_['loop'] = value;
        return this;
      }
      return this.techGet('loop');
    }
  }, {
    key: 'poster',

    /**
     * get or set the poster image source url
     *
     * ##### EXAMPLE:
     *
     *     // getting
     *     var currentPoster = myPlayer.poster();
     *
     *     // setting
     *     myPlayer.poster('http://example.com/myImage.jpg');
     *
     * @param  {String=} [src] Poster image source URL
     * @return {String} poster URL when getting
     * @return {Player} self when setting
     */
    value: function poster(src) {
      if (src === undefined) {
        return this.poster_;
      }

      // The correct way to remove a poster is to set as an empty string
      // other falsey values will throw errors
      if (!src) {
        src = '';
      }

      // update the internal poster variable
      this.poster_ = src;

      // update the tech's poster
      this.techCall('setPoster', src);

      // alert components that the poster has been set
      this.trigger('posterchange');

      return this;
    }
  }, {
    key: 'controls',

    /**
     * Get or set whether or not the controls are showing.
     * @param  {Boolean} controls Set controls to showing or not
     * @return {Boolean}    Controls are showing
     */
    value: function controls(bool) {
      if (bool !== undefined) {
        bool = !!bool; // force boolean
        // Don't trigger a change event unless it actually changed
        if (this.controls_ !== bool) {
          this.controls_ = bool;

          if (this.usingNativeControls()) {
            this.techCall('setControls', bool);
          }

          if (bool) {
            this.removeClass('vjs-controls-disabled');
            this.addClass('vjs-controls-enabled');
            this.trigger('controlsenabled');

            if (!this.usingNativeControls()) {
              this.addTechControlsListeners();
            }
          } else {
            this.removeClass('vjs-controls-enabled');
            this.addClass('vjs-controls-disabled');
            this.trigger('controlsdisabled');

            if (!this.usingNativeControls()) {
              this.removeTechControlsListeners();
            }
          }
        }
        return this;
      }
      return !!this.controls_;
    }
  }, {
    key: 'usingNativeControls',

    /**
     * Toggle native controls on/off. Native controls are the controls built into
     * devices (e.g. default iPhone controls), Flash, or other techs
     * (e.g. Vimeo Controls)
     *
     * **This should only be set by the current tech, because only the tech knows
     * if it can support native controls**
     *
     * @param  {Boolean} bool    True signals that native controls are on
     * @return {Player}      Returns the player
     * @private
     */
    value: function usingNativeControls(bool) {
      if (bool !== undefined) {
        bool = !!bool; // force boolean
        // Don't trigger a change event unless it actually changed
        if (this.usingNativeControls_ !== bool) {
          this.usingNativeControls_ = bool;
          if (bool) {
            this.addClass('vjs-using-native-controls');

            /**
             * player is using the native device controls
             *
             * @event usingnativecontrols
             * @memberof Player
             * @instance
             * @private
             */
            this.trigger('usingnativecontrols');
          } else {
            this.removeClass('vjs-using-native-controls');

            /**
             * player is using the custom HTML controls
             *
             * @event usingcustomcontrols
             * @memberof Player
             * @instance
             * @private
             */
            this.trigger('usingcustomcontrols');
          }
        }
        return this;
      }
      return !!this.usingNativeControls_;
    }
  }, {
    key: 'error',

    /**
     * Set or get the current MediaError
     * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
     * @return {MediaError|null}     when getting
     * @return {Player}              when setting
     */
    value: function error(err) {
      if (err === undefined) {
        return this.error_ || null;
      }

      // restoring to default
      if (err === null) {
        this.error_ = err;
        this.removeClass('vjs-error');
        return this;
      }

      // error instance
      if (err instanceof _mediaErrorJs2['default']) {
        this.error_ = err;
      } else {
        this.error_ = new _mediaErrorJs2['default'](err);
      }

      // fire an error event on the player
      this.trigger('error');

      // add the vjs-error classname to the player
      this.addClass('vjs-error');

      // log the name of the error type and any message
      // ie8 just logs "[object object]" if you just log the error object
      Lib.log.error('(CODE:' + this.error_.code + ' ' + _mediaErrorJs2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

      return this;
    }
  }, {
    key: 'ended',

    /**
     * Returns whether or not the player is in the "ended" state.
     * @return {Boolean} True if the player is in the ended state, false if not.
     */
    value: function ended() {
      return this.techGet('ended');
    }
  }, {
    key: 'seeking',

    /**
     * Returns whether or not the player is in the "seeking" state.
     * @return {Boolean} True if the player is in the seeking state, false if not.
     */
    value: function seeking() {
      return this.techGet('seeking');
    }
  }, {
    key: 'reportUserActivity',
    value: function reportUserActivity(event) {
      this.userActivity_ = true;
    }
  }, {
    key: 'userActive',
    value: function userActive(bool) {
      if (bool !== undefined) {
        bool = !!bool;
        if (bool !== this.userActive_) {
          this.userActive_ = bool;
          if (bool) {
            // If the user was inactive and is now active we want to reset the
            // inactivity timer
            this.userActivity_ = true;
            this.removeClass('vjs-user-inactive');
            this.addClass('vjs-user-active');
            this.trigger('useractive');
          } else {
            // We're switching the state to inactive manually, so erase any other
            // activity
            this.userActivity_ = false;

            // Chrome/Safari/IE have bugs where when you change the cursor it can
            // trigger a mousemove event. This causes an issue when you're hiding
            // the cursor when the user is inactive, and a mousemove signals user
            // activity. Making it impossible to go into inactive mode. Specifically
            // this happens in fullscreen when we really need to hide the cursor.
            //
            // When this gets resolved in ALL browsers it can be removed
            // https://code.google.com/p/chromium/issues/detail?id=103041
            if (this.tech) {
              this.tech.one('mousemove', function (e) {
                e.stopPropagation();
                e.preventDefault();
              });
            }

            this.removeClass('vjs-user-active');
            this.addClass('vjs-user-inactive');
            this.trigger('userinactive');
          }
        }
        return this;
      }
      return this.userActive_;
    }
  }, {
    key: 'listenForUserActivity',
    value: function listenForUserActivity() {
      var mouseInProgress = undefined,
          lastMoveX = undefined,
          lastMoveY = undefined;

      var handleActivity = Lib.bind(this, this.reportUserActivity);

      var handleMouseMove = function handleMouseMove(e) {
        // #1068 - Prevent mousemove spamming
        // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
          lastMoveX = e.screenX;
          lastMoveY = e.screenY;
          handleActivity();
        }
      };

      var handleMouseDown = function handleMouseDown() {
        handleActivity();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(mouseInProgress);
        // Setting userActivity=true now and setting the interval to the same time
        // as the activityCheck interval (250) should ensure we never miss the
        // next activityCheck
        mouseInProgress = this.setInterval(handleActivity, 250);
      };

      var handleMouseUp = function handleMouseUp(event) {
        handleActivity();
        // Stop the interval that maintains activity if the mouse/touch is down
        this.clearInterval(mouseInProgress);
      };

      // Any mouse movement will be considered user activity
      this.on('mousedown', handleMouseDown);
      this.on('mousemove', handleMouseMove);
      this.on('mouseup', handleMouseUp);

      // Listen for keyboard navigation
      // Shouldn't need to use inProgress interval because of key repeat
      this.on('keydown', handleActivity);
      this.on('keyup', handleActivity);

      // Run an interval every 250 milliseconds instead of stuffing everything into
      // the mousemove/touchmove function itself, to prevent performance degradation.
      // `this.reportUserActivity` simply sets this.userActivity_ to true, which
      // then gets picked up by this loop
      // http://ejohn.org/blog/learning-from-twitter/
      var activityCheck = this.setInterval(function () {
        var inactivityTimeout = undefined;

        // Check to see if mouse/touch activity has happened
        if (this.userActivity_) {
          // Reset the activity tracker
          this.userActivity_ = false;

          // If the user state was inactive, set the state to active
          this.userActive(true);

          // Clear any existing inactivity timeout to start the timer over
          this.clearTimeout(inactivityTimeout);

          var timeout = this.options()['inactivityTimeout'];
          if (timeout > 0) {
            // In <timeout> milliseconds, if no more activity has occurred the
            // user will be considered inactive
            inactivityTimeout = this.setTimeout(function () {
              // Protect against the case where the inactivityTimeout can trigger just
              // before the next user activity is picked up by the activityCheck loop
              // causing a flicker
              if (!this.userActivity_) {
                this.userActive(false);
              }
            }, timeout);
          }
        }
      }, 250);
    }
  }, {
    key: 'playbackRate',

    /**
     * Gets or sets the current playback rate.  A playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed
     * playback, for instance.
     * @param  {Number} rate    New playback rate to set.
     * @return {Number}         Returns the new playback rate when setting
     * @return {Number}         Returns the current playback rate when getting
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
     */
    value: function playbackRate(rate) {
      if (rate !== undefined) {
        this.techCall('setPlaybackRate', rate);
        return this;
      }

      if (this.tech && this.tech['featuresPlaybackRate']) {
        return this.techGet('playbackRate');
      } else {
        return 1;
      }
    }
  }, {
    key: 'isAudio',

    /**
     * Gets or sets the audio flag
     *
     * @param  {Boolean} bool    True signals that this is an audio player.
     * @return {Boolean}         Returns true if player is audio, false if not when getting
     * @return {Player}      Returns the player if setting
     * @private
     */
    value: function isAudio(bool) {
      if (bool !== undefined) {
        this.isAudio_ = !!bool;
        return this;
      }

      return !!this.isAudio_;
    }
  }, {
    key: 'networkState',

    /**
     * Returns the current state of network activity for the element, from
     * the codes in the list below.
     * - NETWORK_EMPTY (numeric value 0)
     *   The element has not yet been initialised. All attributes are in
     *   their initial states.
     * - NETWORK_IDLE (numeric value 1)
     *   The element's resource selection algorithm is active and has
     *   selected a resource, but it is not actually using the network at
     *   this time.
     * - NETWORK_LOADING (numeric value 2)
     *   The user agent is actively trying to download data.
     * - NETWORK_NO_SOURCE (numeric value 3)
     *   The element's resource selection algorithm is active, but it has
     *   not yet found a resource to use.
     * @return {Number} the current network activity state
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
     */
    value: function networkState() {
      return this.techGet('networkState');
    }
  }, {
    key: 'readyState',

    /**
     * Returns a value that expresses the current state of the element
     * with respect to rendering the current playback position, from the
     * codes in the list below.
     * - HAVE_NOTHING (numeric value 0)
     *   No information regarding the media resource is available.
     * - HAVE_METADATA (numeric value 1)
     *   Enough of the resource has been obtained that the duration of the
     *   resource is available.
     * - HAVE_CURRENT_DATA (numeric value 2)
     *   Data for the immediate current playback position is available.
     * - HAVE_FUTURE_DATA (numeric value 3)
     *   Data for the immediate current playback position is available, as
     *   well as enough data for the user agent to advance the current
     *   playback position in the direction of playback.
     * - HAVE_ENOUGH_DATA (numeric value 4)
     *   The user agent estimates that enough data is available for
     *   playback to proceed uninterrupted.
     * @return {Number} the current playback rendering state
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
     */
    value: function readyState() {
      return this.techGet('readyState');
    }
  }, {
    key: 'textTracks',

    /**
     * Text tracks are tracks of timed text events.
     * Captions - text displayed over the video for the hearing impaired
     * Subtitles - text displayed over the video for those who don't understand language in the video
     * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
     * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
     */

    /**
     * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
     * @return {Array}           Array of track objects
     */
    value: function textTracks() {
      // cannot use techGet directly because it checks to see whether the tech is ready.
      // Flash is unlikely to be ready in time but textTracks should still work.
      return this.tech && this.tech['textTracks']();
    }
  }, {
    key: 'remoteTextTracks',
    value: function remoteTextTracks() {
      return this.tech && this.tech['remoteTextTracks']();
    }
  }, {
    key: 'addTextTrack',

    /**
     * Add a text track
     * In addition to the W3C settings we allow adding additional info through options.
     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
     * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
     * @param {String=} label       Optional label
     * @param {String=} language    Optional language
     */
    value: function addTextTrack(kind, label, language) {
      return this.tech && this.tech['addTextTrack'](kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack(options) {
      return this.tech && this.tech['addRemoteTextTrack'](options);
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      this.tech && this.tech['removeRemoteTextTrack'](track);
    }
  }, {
    key: 'language',

    // Methods to add support for
    // initialTime: function(){ return this.techCall('initialTime'); },
    // startOffsetTime: function(){ return this.techCall('startOffsetTime'); },
    // played: function(){ return this.techCall('played'); },
    // seekable: function(){ return this.techCall('seekable'); },
    // videoTracks: function(){ return this.techCall('videoTracks'); },
    // audioTracks: function(){ return this.techCall('audioTracks'); },
    // videoWidth: function(){ return this.techCall('videoWidth'); },
    // videoHeight: function(){ return this.techCall('videoHeight'); },
    // defaultPlaybackRate: function(){ return this.techCall('defaultPlaybackRate'); },
    // mediaGroup: function(){ return this.techCall('mediaGroup'); },
    // controller: function(){ return this.techCall('controller'); },
    // defaultMuted: function(){ return this.techCall('defaultMuted'); }

    // TODO
    // currentSrcList: the array of sources including other formats and bitrates
    // playList: array of source lists in order of playback

    /**
     * The player's language code
     * @param  {String} languageCode  The locale string
     * @return {String}             The locale string when getting
     * @return {Player}         self, when setting
     */
    value: function language(languageCode) {
      if (languageCode === undefined) {
        return this.language_;
      }

      this.language_ = languageCode;
      return this;
    }
  }, {
    key: 'languages',

    /**
     * Get the player's language dictionary
     */
    value: function languages() {
      return this.languages_;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var options = Lib.obj.deepMerge({}, this.options());
      var tracks = options.tracks;

      options.tracks = [];

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        // deep merge tracks and null out player so no circular references
        track = Lib.obj.deepMerge({}, track);
        track.player = undefined;
        options.tracks[i] = track;
      }

      return options;
    }
  }], [{
    key: 'getTagSettings',
    value: function getTagSettings(tag) {
      var baseOptions = {
        'sources': [],
        'tracks': []
      };

      var tagOptions = Lib.getElementAttributes(tag);
      var dataSetup = tagOptions['data-setup'];

      // Check if data-setup attr exists.
      if (dataSetup !== null) {
        // Parse options JSON
        // If empty string, make it a parsable json object.

        var _safeParseTuple = _safeJsonParseTuple2['default'](dataSetup || '{}');

        var _safeParseTuple2 = _slicedToArray(_safeParseTuple, 2);

        var err = _safeParseTuple2[0];
        var data = _safeParseTuple2[1];

        if (err) {
          Lib.log.error(err);
        }
        Lib.obj.merge(tagOptions, data);
      }

      Lib.obj.merge(baseOptions, tagOptions);

      // Get tag children settings
      if (tag.hasChildNodes()) {
        var children = tag.childNodes;

        for (var i = 0, j = children.length; i < j; i++) {
          var child = children[i];
          // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
          var childName = child.nodeName.toLowerCase();
          if (childName === 'source') {
            baseOptions['sources'].push(Lib.getElementAttributes(child));
          } else if (childName === 'track') {
            baseOptions['tracks'].push(Lib.getElementAttributes(child));
          }
        }
      }

      return baseOptions;
    }
  }]);

  return Player;
})(_componentJs2['default']);

/**
 * Global player list
 * @type {Object}
 */
Player.players = {};

/**
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 * @private
 */
Player.prototype.options_ = _optionsJs2['default'];

/**
 * Fired when the player has initial duration and dimension information
 * @event loadedmetadata
 */
Player.prototype.handleLoadedMetaData;

/**
 * Fired when the player has downloaded data at the current playback position
 * @event loadeddata
 */
Player.prototype.handleLoadedData;

/**
 * Fired when the player has finished downloading the source data
 * @event loadedalldata
 */
Player.prototype.handleLoadedAllData;

/**
 * Fired when the user is active, e.g. moves the mouse over the player
 * @event useractive
 */
Player.prototype.handleUserActive;

/**
 * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
 * @event userinactive
 */
Player.prototype.handleUserInactive;

/**
 * Fired when the current playback position has changed
 *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 * @event timeupdate
 */
Player.prototype.handleTimeUpdate;

/**
 * Fired when the volume changes
 * @event volumechange
 */
Player.prototype.handleVolumeChange;

/**
 * Fired when an error occurs
 * @event error
 */
Player.prototype.handleError;

Player.prototype.flexNotSupported_ = function () {
  var elem = _globalDocument2['default'].createElement('i');

  return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style);
};

_componentJs2['default'].registerComponent('Player', Player);
exports['default'] = Player;
module.exports = exports['default'];

},{"./big-play-button.js":5,"./component.js":7,"./control-bar/control-bar.js":8,"./error-display.js":41,"./events.js":43,"./fullscreen-api.js":45,"./lib.js":46,"./loading-spinner.js":47,"./media-error.js":48,"./options.js":52,"./poster-image.js":55,"./tech/html5.js":61,"./tech/loader.js":62,"./tracks/text-track-display.js":65,"./tracks/text-track-settings.js":68,"global/document":1,"global/window":2,"safe-json-parse/tuple":4}],54:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _player = _dereq_('./player');

var _player2 = _interopRequireDefault(_player);

/**
 * the method for registering a video.js plugin
 *
 * @param  {String} name The name of the plugin
 * @param  {Function} init The function that is run when the player inits
 */
var plugin = function plugin(name, init) {
  _player2['default'].prototype[name] = init;
};

exports['default'] = plugin;
module.exports = exports['default'];

},{"./player":53}],55:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _button = _dereq_('./button');

var _button2 = _interopRequireDefault(_button);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

/* Poster Image
================================================================================ */
/**
 * The component that handles showing the poster image.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PosterImage = (function (_Button) {
  function PosterImage(player, options) {
    _classCallCheck(this, PosterImage);

    _get(Object.getPrototypeOf(PosterImage.prototype), 'constructor', this).call(this, player, options);

    this.update();
    player.on('posterchange', Lib.bind(this, this.update));
  }

  _inherits(PosterImage, _Button);

  _createClass(PosterImage, [{
    key: 'dispose',

    /**
     * Clean up the poster image
     */
    value: function dispose() {
      this.player().off('posterchange', this.update);
      _get(Object.getPrototypeOf(PosterImage.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',

    /**
     * Create the poster image element
     * @return {Element}
     */
    value: function createEl() {
      var el = Lib.createEl('div', {
        className: 'vjs-poster',

        // Don't want poster to be tabbable.
        tabIndex: -1
      });

      // To ensure the poster image resizes while maintaining its original aspect
      // ratio, use a div with `background-size` when available. For browsers that
      // do not support `background-size` (e.g. IE8), fall back on using a regular
      // img element.
      if (!Lib.BACKGROUND_SIZE_SUPPORTED) {
        this.fallbackImg_ = Lib.createEl('img');
        el.appendChild(this.fallbackImg_);
      }

      return el;
    }
  }, {
    key: 'update',

    /**
     * Event handler for updates to the player's poster source
     */
    value: function update() {
      var url = this.player().poster();

      this.setSrc(url);

      // If there's no poster source we should display:none on this component
      // so it's not still clickable or right-clickable
      if (url) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: 'setSrc',

    /**
     * Set the poster source depending on the display method
     */
    value: function setSrc(url) {
      if (this.fallbackImg_) {
        this.fallbackImg_.src = url;
      } else {
        var backgroundImage = '';
        // Any falsey values should stay as an empty string, otherwise
        // this will throw an extra error
        if (url) {
          backgroundImage = 'url("' + url + '")';
        }

        this.el_.style.backgroundImage = backgroundImage;
      }
    }
  }, {
    key: 'handleClick',

    /**
     * Event handler for clicks on the poster image
     */
    value: function handleClick() {
      // We don't want a click to trigger playback when controls are disabled
      // but CSS should be hiding the poster to prevent that from happening
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    }
  }]);

  return PosterImage;
})(_button2['default']);

_button2['default'].registerComponent('PosterImage', PosterImage);
exports['default'] = PosterImage;
module.exports = exports['default'];

},{"./button":6,"./lib":46}],56:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _events = _dereq_('./events');

var Events = _interopRequireWildcard(_events);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _windowLoaded = false;
var videojs = undefined;

/**
 * @fileoverview Functions for automatically setting up a player
 * based on the data-setup attribute of the video tag
 */

// Automatically set up any tags that have a data-setup attribute
var autoSetup = function autoSetup() {
  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
  // var mediaEls = vids.concat(audios);

  // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
  // to build up a new, combined list of elements.
  var vids = _globalDocument2['default'].getElementsByTagName('video');
  var audios = _globalDocument2['default'].getElementsByTagName('audio');
  var mediaEls = [];
  if (vids && vids.length > 0) {
    for (var i = 0, e = vids.length; i < e; i++) {
      mediaEls.push(vids[i]);
    }
  }
  if (audios && audios.length > 0) {
    for (var i = 0, e = audios.length; i < e; i++) {
      mediaEls.push(audios[i]);
    }
  }

  // Check if any media elements exist
  if (mediaEls && mediaEls.length > 0) {

    for (var i = 0, e = mediaEls.length; i < e; i++) {
      var mediaEl = mediaEls[i];

      // Check if element exists, has getAttribute func.
      // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
      if (mediaEl && mediaEl.getAttribute) {

        // Make sure this player hasn't already been set up.
        if (mediaEl['player'] === undefined) {
          var options = mediaEl.getAttribute('data-setup');

          // Check if data-setup attr exists.
          // We only auto-setup if they've added the data-setup attr.
          if (options !== null) {
            // Create new video.js instance.
            var player = videojs(mediaEl);
          }
        }

        // If getAttribute isn't defined, we need to wait for the DOM.
      } else {
        autoSetupTimeout(1);
        break;
      }
    }

    // No videos were found, so keep looping unless page is finished loading.
  } else if (!_windowLoaded) {
    autoSetupTimeout(1);
  }
};

// Pause to let the DOM keep processing
var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
  videojs = vjs;
  setTimeout(autoSetup, wait);
};

if (_globalDocument2['default'].readyState === 'complete') {
  _windowLoaded = true;
} else {
  Events.one(_globalWindow2['default'], 'load', function () {
    _windowLoaded = true;
  });
}

var hasLoaded = function hasLoaded() {
  return _windowLoaded;
};

exports.autoSetup = autoSetup;
exports.autoSetupTimeout = autoSetupTimeout;
exports.hasLoaded = hasLoaded;

},{"./events":43,"global/document":1,"global/window":2}],57:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

/**
 * SeekBar Behavior includes play progress bar, and seek handle
 * Needed so it can determine seek position based on handle position/size
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SliderHandle = (function (_Component) {
  function SliderHandle() {
    _classCallCheck(this, SliderHandle);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(SliderHandle, _Component);

  _createClass(SliderHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl(type, props) {
      props = props || {};
      // Add the slider element class to all sub classes
      props.className = props.className + ' vjs-slider-handle';
      props = Lib.obj.merge({
        innerHTML: '<span class="vjs-control-text">' + (this.defaultValue || 0) + '</span>'
      }, props);

      return _get(Object.getPrototypeOf(SliderHandle.prototype), 'createEl', this).call(this, 'div', props);
    }
  }]);

  return SliderHandle;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('SliderHandle', SliderHandle);
exports['default'] = SliderHandle;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46}],58:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x2,
    property = _x3,
    receiver = _x4; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _componentJs = _dereq_('../component.js');

var _componentJs2 = _interopRequireDefault(_componentJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/* Slider
================================================================================ */
/**
 * The base functionality for sliders like the volume bar and seek bar
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var Slider = (function (_Component) {
  function Slider(player, options) {
    _classCallCheck(this, Slider);

    _get(Object.getPrototypeOf(Slider.prototype), 'constructor', this).call(this, player, options);

    // Set property names to bar and handle to match with the child Slider class is looking for
    this.bar = this.getChild(this.options_['barName']);
    this.handle = this.getChild(this.options_['handleName']);

    // Set a horizontal or vertical class on the slider depending on the slider type
    this.vertical(!!this.options()['vertical']);

    this.on('mousedown', this.handleMouseDown);
    this.on('touchstart', this.handleMouseDown);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
    this.on('click', this.handleClick);

    this.on(player, 'controlsvisible', this.update);
    this.on(player, this.playerEvent, this.update);
  }

  _inherits(Slider, _Component);

  _createClass(Slider, [{
    key: 'createEl',
    value: function createEl(type) {
      var props = arguments[1] === undefined ? {} : arguments[1];

      // Add the slider element class to all sub classes
      props.className = props.className + ' vjs-slider';
      props = Lib.obj.merge({
        'role': 'slider',
        'aria-valuenow': 0,
        'aria-valuemin': 0,
        'aria-valuemax': 100,
        tabIndex: 0
      }, props);

      return _get(Object.getPrototypeOf(Slider.prototype), 'createEl', this).call(this, type, props);
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      event.preventDefault();
      Lib.blockTextSelection();
      this.addClass('vjs-sliding');

      this.on(_globalDocument2['default'], 'mousemove', this.handleMouseMove);
      this.on(_globalDocument2['default'], 'mouseup', this.handleMouseUp);
      this.on(_globalDocument2['default'], 'touchmove', this.handleMouseMove);
      this.on(_globalDocument2['default'], 'touchend', this.handleMouseUp);

      this.handleMouseMove(event);
    }
  }, {
    key: 'handleMouseMove',

    // To be overridden by a subclass
    value: function handleMouseMove() {}
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp() {
      Lib.unblockTextSelection();
      this.removeClass('vjs-sliding');

      this.off(_globalDocument2['default'], 'mousemove', this.handleMouseMove);
      this.off(_globalDocument2['default'], 'mouseup', this.handleMouseUp);
      this.off(_globalDocument2['default'], 'touchmove', this.handleMouseMove);
      this.off(_globalDocument2['default'], 'touchend', this.handleMouseUp);

      this.update();
    }
  }, {
    key: 'update',
    value: function update() {
      // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
      // execution stack. The player is destroyed before then update will cause an error
      if (!this.el_) return;

      // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
      // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
      // var progress =  (this.player_.scrubbing) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
      var progress = this.getPercent();
      var bar = this.bar;

      // If there's no bar...
      if (!bar) return;

      // Protect against no duration and other division issues
      if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
        progress = 0;
      }

      // If there is a handle, we need to account for the handle in our calculation for progress bar
      // so that it doesn't fall short of or extend past the handle.
      var barProgress = this.updateHandlePosition(progress);

      // Convert to a percentage for setting
      var percentage = Lib.round(barProgress * 100, 2) + '%';

      // Set the new bar width or height
      if (this.vertical()) {
        bar.el().style.height = percentage;
      } else {
        bar.el().style.width = percentage;
      }
    }
  }, {
    key: 'updateHandlePosition',

    /**
    * Update the handle position.
    */
    value: function updateHandlePosition(progress) {
      var handle = this.handle;
      if (!handle) return;

      var vertical = this.vertical();
      var box = this.el_;

      var boxSize = undefined,
          handleSize = undefined;
      if (vertical) {
        boxSize = box.offsetHeight;
        handleSize = handle.el().offsetHeight;
      } else {
        boxSize = box.offsetWidth;
        handleSize = handle.el().offsetWidth;
      }

      // The width of the handle in percent of the containing box
      // In IE, widths may not be ready yet causing NaN
      var handlePercent = handleSize ? handleSize / boxSize : 0;

      // Get the adjusted size of the box, considering that the handle's center never touches the left or right side.
      // There is a margin of half the handle's width on both sides.
      var boxAdjustedPercent = 1 - handlePercent;

      // Adjust the progress that we'll use to set widths to the new adjusted box width
      var adjustedProgress = progress * boxAdjustedPercent;

      // The bar does reach the left side, so we need to account for this in the bar's width
      var barProgress = adjustedProgress + handlePercent / 2;

      var percentage = Lib.round(adjustedProgress * 100, 2) + '%';

      if (vertical) {
        handle.el().style.bottom = percentage;
      } else {
        handle.el().style.left = percentage;
      }

      return barProgress;
    }
  }, {
    key: 'calculateDistance',
    value: function calculateDistance(event) {
      var el = this.el_;
      var box = Lib.findPosition(el);
      var boxW = el.offsetWidth;
      var boxH = el.offsetHeight;
      var handle = this.handle;

      if (this.options()['vertical']) {
        var boxY = box.top;

        var pageY = undefined;
        if (event.changedTouches) {
          pageY = event.changedTouches[0].pageY;
        } else {
          pageY = event.pageY;
        }

        if (handle) {
          var handleH = handle.el().offsetHeight;
          // Adjusted X and Width, so handle doesn't go outside the bar
          boxY = boxY + handleH / 2;
          boxH = boxH - handleH;
        }

        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
      } else {
        var boxX = box.left;

        var pageX = undefined;
        if (event.changedTouches) {
          pageX = event.changedTouches[0].pageX;
        } else {
          pageX = event.pageX;
        }

        if (handle) {
          var handleW = handle.el().offsetWidth;

          // Adjusted X and Width, so handle doesn't go outside the bar
          boxX = boxX + handleW / 2;
          boxW = boxW - handleW;
        }

        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, (pageX - boxX) / boxW));
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.on(_globalDocument2['default'], 'keydown', this.handleKeyPress);
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {
      if (event.which === 37 || event.which === 40) {
        // Left and Down Arrows
        event.preventDefault();
        this.stepBack();
      } else if (event.which === 38 || event.which === 39) {
        // Up and Right Arrows
        event.preventDefault();
        this.stepForward();
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.off(_globalDocument2['default'], 'keydown', this.handleKeyPress);
    }
  }, {
    key: 'handleClick',

    /**
     * Listener for click events on slider, used to prevent clicks
     *   from bubbling up to parent elements like button menus.
     * @param  {Object} event Event object
     */
    value: function handleClick(event) {
      event.stopImmediatePropagation();
      event.preventDefault();
    }
  }, {
    key: 'vertical',
    value: function vertical(bool) {
      if (bool === undefined) {
        return this.vertical_ || false;
      }

      this.vertical_ = !!bool;

      if (this.vertical_) {
        this.addClass('vjs-slider-vertical');
      } else {
        this.addClass('vjs-slider-horizontal');
      }

      return this;
    }
  }]);

  return Slider;
})(_componentJs2['default']);

_componentJs2['default'].registerComponent('Slider', Slider);
exports['default'] = Slider;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46,"global/document":1}],59:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function FlashRtmpDecorator(Flash) {
  Flash.streamingFormats = {
    'rtmp/mp4': 'MP4',
    'rtmp/flv': 'FLV'
  };

  Flash.streamFromParts = function (connection, stream) {
    return connection + '&' + stream;
  };

  Flash.streamToParts = function (src) {
    var parts = {
      connection: '',
      stream: ''
    };

    if (!src) return parts;

    // Look for the normal URL separator we expect, '&'.
    // If found, we split the URL into two pieces around the
    // first '&'.
    var connEnd = src.indexOf('&');
    var streamBegin = undefined;
    if (connEnd !== -1) {
      streamBegin = connEnd + 1;
    } else {
      // If there's not a '&', we use the last '/' as the delimiter.
      connEnd = streamBegin = src.lastIndexOf('/') + 1;
      if (connEnd === 0) {
        // really, there's not a '/'?
        connEnd = streamBegin = src.length;
      }
    }
    parts.connection = src.substring(0, connEnd);
    parts.stream = src.substring(streamBegin, src.length);

    return parts;
  };

  Flash.isStreamingType = function (srcType) {
    return srcType in Flash.streamingFormats;
  };

  // RTMP has four variations, any string starting
  // with one of these protocols should be valid
  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

  Flash.isStreamingSrc = function (src) {
    return Flash.RTMP_RE.test(src);
  };

  /**
   * A source handler for RTMP urls
   * @type {Object}
   */
  Flash.rtmpSourceHandler = {};

  /**
   * Check Flash can handle the source natively
   * @param  {Object} source  The source object
   * @return {String}         'probably', 'maybe', or '' (empty string)
   */
  Flash.rtmpSourceHandler.canHandleSource = function (source) {
    if (Flash.isStreamingType(source.type) || Flash.isStreamingSrc(source.src)) {
      return 'maybe';
    }

    return '';
  };

  /**
   * Pass the source to the flash object
   * Adaptive source handlers will have more complicated workflows before passing
   * video data to the video element
   * @param  {Object} source    The source object
   * @param  {Flash} tech   The instance of the Flash tech
   */
  Flash.rtmpSourceHandler.handleSource = function (source, tech) {
    var srcParts = Flash.streamToParts(source.src);

    tech['setRtmpConnection'](srcParts.connection);
    tech['setRtmpStream'](srcParts.stream);
  };

  // Register the native source handler
  Flash.registerSourceHandler(Flash.rtmpSourceHandler);

  return Flash;
}

exports['default'] = FlashRtmpDecorator;
module.exports = exports['default'];

},{}],60:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

/**
 * @fileoverview VideoJS-SWF - Custom Flash Player with HTML5-ish API
 * https://github.com/zencoder/video-js-swf
 * Not using setupTriggers. Using global onEvent func to distribute events
 */

var _tech = _dereq_('./tech');

var _tech2 = _interopRequireDefault(_tech);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _flashRtmp = _dereq_('./flash-rtmp');

var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var navigator = _globalWindow2['default'].navigator;
/**
 * Flash Media Controller - Wrapper for fallback SWF API
 *
 * @param {Player} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */

var Flash = (function (_Tech) {
  function Flash(options, ready) {
    _classCallCheck(this, Flash);

    _get(Object.getPrototypeOf(Flash.prototype), 'constructor', this).call(this, options, ready);

    var source = options.source;
    var parentEl = options.parentEl;

    // Generate ID for swf object
    var objId = options.playerId + '_flash_api';

    // Merge default flashvars with ones passed in to init
    var flashVars = Lib.obj.merge({

      // SWF Callback Functions
      'readyFunction': 'videojs.Flash.onReady',
      'eventProxyFunction': 'videojs.Flash.onEvent',
      'errorEventProxyFunction': 'videojs.Flash.onError',

      // Player Settings
      'autoplay': options.autoplay,
      'preload': options.preload,
      'loop': options.loop,
      'muted': options.muted

    }, options.flashVars);

    // Merge default parames with ones passed in
    var params = Lib.obj.merge({
      'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
      'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
    }, options.params);

    // Merge default attributes with ones passed in
    var attributes = Lib.obj.merge({
      'id': objId,
      'name': objId, // Both ID and Name needed or swf to identify itself
      'class': 'vjs-tech'
    }, options.attributes);

    // If source was supplied pass as a flash var.
    if (source) {
      this.ready(function () {
        this.setSource(source);
      });
    }

    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
    // This allows resetting the playhead when we catch the reload
    if (options.startTime) {
      this.ready(function () {
        this.load();
        this.play();
        this.currentTime(options.startTime);
      });
    }

    _globalWindow2['default'].videojs = _globalWindow2['default'].videojs || {};
    _globalWindow2['default'].videojs.Flash = _globalWindow2['default'].videojs.Flash || {};
    _globalWindow2['default'].videojs.Flash.onReady = Flash.onReady;
    _globalWindow2['default'].videojs.Flash.onEvent = Flash.onEvent;
    _globalWindow2['default'].videojs.Flash.onError = Flash.onError;

    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
    this.el_.tech = this;
  }

  _inherits(Flash, _Tech);

  _createClass(Flash, [{
    key: 'play',
    value: function play() {
      this.el_.vjs_play();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.el_.vjs_pause();
    }
  }, {
    key: 'src',
    value: function src(_src) {
      if (_src === undefined) {
        return this.currentSrc();
      }

      // Setting src through `src` not `setSrc` will be deprecated
      return this.setSrc(_src);
    }
  }, {
    key: 'setSrc',
    value: function setSrc(src) {
      // Make sure source URL is absolute.
      src = Lib.getAbsoluteURL(src);
      this.el_.vjs_src(src);

      // Currently the SWF doesn't autoplay if you load a source later.
      // e.g. Load player w/ no source, wait 2s, set src.
      if (this.autoplay()) {
        var tech = this;
        this.setTimeout(function () {
          tech.play();
        }, 0);
      }
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(time) {
      this.lastSeekTarget_ = time;
      this.el_.vjs_setProperty('currentTime', time);
      _get(Object.getPrototypeOf(Flash.prototype), 'setCurrentTime', this).call(this);
    }
  }, {
    key: 'currentTime',
    value: function currentTime(time) {
      // when seeking make the reported time keep up with the requested time
      // by reading the time we're seeking to
      if (this.seeking()) {
        return this.lastSeekTarget_ || 0;
      }
      return this.el_.vjs_getProperty('currentTime');
    }
  }, {
    key: 'currentSrc',
    value: function currentSrc() {
      if (this.currentSource_) {
        return this.currentSource_.src;
      } else {
        return this.el_.vjs_getProperty('currentSrc');
      }
    }
  }, {
    key: 'load',
    value: function load() {
      this.el_.vjs_load();
    }
  }, {
    key: 'poster',
    value: function poster() {
      this.el_.vjs_getProperty('poster');
    }
  }, {
    key: 'setPoster',

    // poster images are not handled by the Flash tech so make this a no-op
    value: function setPoster() {}
  }, {
    key: 'buffered',
    value: function buffered() {
      return Lib.createTimeRange(0, this.el_.vjs_getProperty('buffered'));
    }
  }, {
    key: 'supportsFullScreen',
    value: function supportsFullScreen() {
      return false; // Flash does not allow fullscreen through javascript
    }
  }, {
    key: 'enterFullScreen',
    value: function enterFullScreen() {
      return false;
    }
  }]);

  return Flash;
})(_tech2['default']);

// Create setters and getters for attributes
var _api = Flash.prototype;
var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
var _readOnly = 'error,networkState,readyState,seeking,initialTime,duration,startOffsetTime,paused,played,seekable,ended,videoTracks,audioTracks,videoWidth,videoHeight'.split(',');

function _createSetter(attr) {
  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
  _api['set' + attrUpper] = function (val) {
    return this.el_.vjs_setProperty(attr, val);
  };
}
function _createGetter(attr) {
  _api[attr] = function () {
    return this.el_.vjs_getProperty(attr);
  };
}

// Create getter and setters for all read/write attributes
for (var i = 0; i < _readWrite.length; i++) {
  _createGetter(_readWrite[i]);
  _createSetter(_readWrite[i]);
}

// Create getters for read-only attributes
for (var i = 0; i < _readOnly.length; i++) {
  _createGetter(_readOnly[i]);
}

/* Flash Support Testing -------------------------------------------------------- */

Flash.isSupported = function () {
  return Flash.version()[0] >= 10;
  // return swfobject.hasFlashPlayerVersion('10');
};

// Add Source Handler pattern functions to this tech
_tech2['default'].withSourceHandlers(Flash);

/**
 * The default native source handler.
 * This simply passes the source to the video element. Nothing fancy.
 * @param  {Object} source   The source object
 * @param  {Flash} tech  The instance of the Flash tech
 */
Flash.nativeSourceHandler = {};

/**
 * Check Flash can handle the source natively
 * @param  {Object} source  The source object
 * @return {String}         'probably', 'maybe', or '' (empty string)
 */
Flash.nativeSourceHandler.canHandleSource = function (source) {
  var type;

  function guessMimeType(src) {
    var ext = Lib.getFileExtension(src);
    if (ext) {
      return 'video/' + ext;
    }
    return '';
  }

  if (!source.type) {
    type = guessMimeType(source.src);
  } else {
    // Strip code information from the type because we don't get that specific
    type = source.type.replace(/;.*/, '').toLowerCase();
  }

  if (type in Flash.formats) {
    return 'maybe';
  }

  return '';
};

/**
 * Pass the source to the flash object
 * Adaptive source handlers will have more complicated workflows before passing
 * video data to the video element
 * @param  {Object} source    The source object
 * @param  {Flash} tech   The instance of the Flash tech
 */
Flash.nativeSourceHandler.handleSource = function (source, tech) {
  tech.setSrc(source.src);
};

/**
 * Clean up the source handler when disposing the player or switching sources..
 * (no cleanup is needed when supporting the format natively)
 */
Flash.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Flash.registerSourceHandler(Flash.nativeSourceHandler);

Flash.formats = {
  'video/flv': 'FLV',
  'video/x-flv': 'FLV',
  'video/mp4': 'MP4',
  'video/m4v': 'MP4'
};

Flash.onReady = function (currSwf) {
  var el = Lib.el(currSwf);
  var tech = el && el.tech;

  // if there is no el then the tech has been disposed
  // and the tech element was removed from the player div
  if (tech && tech.el()) {
    // check that the flash object is really ready
    Flash.checkReady(tech);
  }
};

// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
// If it's not ready, we set a timeout to check again shortly.
Flash.checkReady = function (tech) {
  // stop worrying if the tech has been disposed
  if (!tech.el()) {
    return;
  }

  // check if API property exists
  if (tech.el().vjs_getProperty) {
    // tell tech it's ready
    tech.triggerReady();
  } else {
    // wait longer
    this.setTimeout(function () {
      Flash['checkReady'](tech);
    }, 50);
  }
};

// Trigger events from the swf on the player
Flash.onEvent = function (swfID, eventName) {
  var tech = Lib.el(swfID).tech;
  tech.trigger(eventName);
};

// Log errors from the swf
Flash.onError = function (swfID, err) {
  var tech = Lib.el(swfID).tech;
  var msg = 'FLASH: ' + err;

  if (err === 'srcnotfound') {
    tech.trigger('error', { code: 4, message: msg });

    // errors we haven't categorized into the media errors
  } else {
    tech.trigger('error', msg);
  }
};

// Flash Version Check
Flash.version = function () {
  var version = '0,0,0';

  // IE
  try {
    version = new _globalWindow2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

    // other browsers
  } catch (e) {
    try {
      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
      }
    } catch (err) {}
  }
  return version.split(',');
};

// Flash embedding method. Only used in non-iframe mode
Flash.embed = function (swf, flashVars, params, attributes) {
  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

  // Get element by embedding code and retrieving created element
  var obj = Lib.createEl('div', { innerHTML: code }).childNodes[0];

  return obj;
};

Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
  var objTag = '<object type="application/x-shockwave-flash" ';
  var flashVarsString = '';
  var paramsString = '';
  var attrsString = '';

  // Convert flash vars to string
  if (flashVars) {
    Lib.obj.each(flashVars, function (key, val) {
      flashVarsString += '' + key + '=' + val + '&amp;';
    });
  }

  // Add swf, flashVars, and other default params
  params = Lib.obj.merge({
    'movie': swf,
    'flashvars': flashVarsString,
    'allowScriptAccess': 'always', // Required to talk to swf
    'allowNetworking': 'all' // All should be default, but having security issues.
  }, params);

  // Create param tags string
  Lib.obj.each(params, function (key, val) {
    paramsString += '<param name="' + key + '" value="' + val + '" />';
  });

  attributes = Lib.obj.merge({
    // Add swf to attributes (need both for IE and Others to work)
    'data': swf,

    // Default to 100% width/height
    'width': '100%',
    'height': '100%'

  }, attributes);

  // Create Attributes string
  Lib.obj.each(attributes, function (key, val) {
    attrsString += '' + key + '="' + val + '" ';
  });

  return '' + objTag + '' + attrsString + '>' + paramsString + '</object>';
};

// Run Flash through the RTMP decorator
_flashRtmp2['default'](Flash);

_tech2['default'].registerComponent('Flash', Flash);
exports['default'] = Flash;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"./flash-rtmp":59,"./tech":63,"global/window":2}],61:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x2,
    property = _x3,
    receiver = _x4; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

/**
 * @fileoverview HTML5 Media Controller - Wrapper for HTML5 Media API
 */

var _techJs = _dereq_('./tech.js');

var _techJs2 = _interopRequireDefault(_techJs);

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _util = _dereq_('../util');

var VjsUtil = _interopRequireWildcard(_util);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 * @param {Player|Object} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */

var Html5 = (function (_Tech) {
  function Html5(options, ready) {
    _classCallCheck(this, Html5);

    _get(Object.getPrototypeOf(Html5.prototype), 'constructor', this).call(this, options, ready);

    var source = options.source;

    // Set the source if one is provided
    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
    // anyway so the error gets fired.
    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
      this.setSource(source);
    }

    if (this.el_.hasChildNodes()) {

      var nodes = this.el_.childNodes;
      var nodesLength = nodes.length;
      var removeNodes = [];

      while (nodesLength--) {
        var node = nodes[nodesLength];
        var nodeName = node.nodeName.toLowerCase();
        if (nodeName === 'track') {
          if (!this.featuresNativeTextTracks) {
            // Empty video tag tracks so the built-in player doesn't use them also.
            // This may not be fast enough to stop HTML5 browsers from reading the tags
            // so we'll need to turn off any default tracks if we're manually doing
            // captions and subtitles. videoElement.textTracks
            removeNodes.push(node);
          } else {
            this.remoteTextTracks().addTrack_(node.track);
          }
        }
      }

      for (var i = 0; i < removeNodes.length; i++) {
        this.el_.removeChild(removeNodes[i]);
      }
    }

    if (this.featuresNativeTextTracks) {
      this.on('loadstart', Lib.bind(this, this.hideCaptions));
    }

    // Determine if native controls should be used
    // Our goal should be to get the custom controls on mobile solid everywhere
    // so we can remove this all together. Right now this will block custom
    // controls on touch enabled laptops like the Chrome Pixel
    if (Lib.TOUCH_ENABLED && options.nativeControlsForTouch === true) {
      this.trigger('usenativecontrols');
    }

    this.triggerReady();
  }

  _inherits(Html5, _Tech);

  _createClass(Html5, [{
    key: 'dispose',
    value: function dispose() {
      Html5.disposeMediaElement(this.el_);
      _get(Object.getPrototypeOf(Html5.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var el = this.options_.tag;

      // Check if this browser supports moving the element into the box.
      // On the iPhone video will break if you move the element,
      // So we have to create a brand new element.
      if (!el || this['movingMediaElementInDOM'] === false) {

        // If the original tag is still there, clone and remove it.
        if (el) {
          var clone = el.cloneNode(false);
          Html5.disposeMediaElement(el);
          el = clone;
        } else {
          el = Lib.createEl('video');

          // determine if native controls should be used
          var tagAttributes = this.options_.tag && Lib.getElementAttributes(this.options_.tag);
          var attributes = VjsUtil.mergeOptions({}, tagAttributes);
          if (!Lib.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
            delete attributes.controls;
          }

          Lib.setElementAttributes(el, Lib.obj.merge(attributes, {
            id: this.options_.playerId + '_html5_api',
            'class': 'vjs-tech'
          }));
        }

        if (this.options_.tracks) {
          for (var i = 0; i < this.options_.tracks.length; i++) {
            var track = this.options_.tracks[i];
            var trackEl = _globalDocument2['default'].createElement('track');
            trackEl.kind = track.kind;
            trackEl.label = track.label;
            trackEl.srclang = track.srclang;
            trackEl.src = track.src;
            if ('default' in track) {
              trackEl.setAttribute('default', 'default');
            }
            el.appendChild(trackEl);
          }
        }
      }

      // Update specific tag settings, in case they were overridden
      var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
      for (var i = settingsAttrs.length - 1; i >= 0; i--) {
        var attr = settingsAttrs[i];
        var overwriteAttrs = {};
        if (typeof this.options_[attr] !== 'undefined') {
          overwriteAttrs[attr] = this.options_[attr];
        }
        Lib.setElementAttributes(el, overwriteAttrs);
      }

      return el;
      // jenniisawesome = true;
    }
  }, {
    key: 'hideCaptions',
    value: function hideCaptions() {
      var tracks = this.el_.querySelectorAll('track');
      var i = tracks.length;
      var kinds = {
        'captions': 1,
        'subtitles': 1
      };

      while (i--) {
        var track = tracks[i].track;
        if (track && track['kind'] in kinds && !tracks[i]['default']) {
          track.mode = 'disabled';
        }
      }
    }
  }, {
    key: 'play',
    value: function play() {
      this.el_.play();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.el_.pause();
    }
  }, {
    key: 'paused',
    value: function paused() {
      return this.el_.paused;
    }
  }, {
    key: 'currentTime',
    value: function currentTime() {
      return this.el_.currentTime;
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(seconds) {
      try {
        this.el_.currentTime = seconds;
      } catch (e) {
        Lib.log(e, 'Video is not ready. (Video.js)');
        // this.warning(VideoJS.warnings.videoNotReady);
      }
    }
  }, {
    key: 'duration',
    value: function duration() {
      return this.el_.duration || 0;
    }
  }, {
    key: 'buffered',
    value: function buffered() {
      return this.el_.buffered;
    }
  }, {
    key: 'volume',
    value: function volume() {
      return this.el_.volume;
    }
  }, {
    key: 'setVolume',
    value: function setVolume(percentAsDecimal) {
      this.el_.volume = percentAsDecimal;
    }
  }, {
    key: 'muted',
    value: function muted() {
      return this.el_.muted;
    }
  }, {
    key: 'setMuted',
    value: function setMuted(muted) {
      this.el_.muted = muted;
    }
  }, {
    key: 'width',
    value: function width() {
      return this.el_.offsetWidth;
    }
  }, {
    key: 'height',
    value: function height() {
      return this.el_.offsetHeight;
    }
  }, {
    key: 'supportsFullScreen',
    value: function supportsFullScreen() {
      if (typeof this.el_.webkitEnterFullScreen === 'function') {

        // Seems to be broken in Chromium/Chrome && Safari in Leopard
        if (/Android/.test(Lib.USER_AGENT) || !/Chrome|Mac OS X 10.5/.test(Lib.USER_AGENT)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'enterFullScreen',
    value: function enterFullScreen() {
      var video = this.el_;

      if ('webkitDisplayingFullscreen' in video) {
        this.one('webkitbeginfullscreen', function () {
          this.one('webkitendfullscreen', function () {
            this.trigger('fullscreenchange');
          });

          this.trigger('fullscreenchange');
        });
      }

      if (video.paused && video.networkState <= video.HAVE_METADATA) {
        // attempt to prime the video element for programmatic access
        // this isn't necessary on the desktop but shouldn't hurt
        this.el_.play();

        // playing and pausing synchronously during the transition to fullscreen
        // can get iOS ~6.1 devices into a play/pause loop
        this.setTimeout(function () {
          video.pause();
          video.webkitEnterFullScreen();
        }, 0);
      } else {
        video.webkitEnterFullScreen();
      }
    }
  }, {
    key: 'exitFullScreen',
    value: function exitFullScreen() {
      this.el_.webkitExitFullScreen();
    }
  }, {
    key: 'src',
    value: function src(_src) {
      if (_src === undefined) {
        return this.el_.src;
      } else {
        // Setting src through `src` instead of `setSrc` will be deprecated
        this.setSrc(_src);
      }
    }
  }, {
    key: 'setSrc',
    value: function setSrc(src) {
      this.el_.src = src;
    }
  }, {
    key: 'load',
    value: function load() {
      this.el_.load();
    }
  }, {
    key: 'currentSrc',
    value: function currentSrc() {
      return this.el_.currentSrc;
    }
  }, {
    key: 'poster',
    value: function poster() {
      return this.el_.poster;
    }
  }, {
    key: 'setPoster',
    value: function setPoster(val) {
      this.el_.poster = val;
    }
  }, {
    key: 'preload',
    value: function preload() {
      return this.el_.preload;
    }
  }, {
    key: 'setPreload',
    value: function setPreload(val) {
      this.el_.preload = val;
    }
  }, {
    key: 'autoplay',
    value: function autoplay() {
      return this.el_.autoplay;
    }
  }, {
    key: 'setAutoplay',
    value: function setAutoplay(val) {
      this.el_.autoplay = val;
    }
  }, {
    key: 'controls',
    value: function controls() {
      return this.el_.controls;
    }
  }, {
    key: 'setControls',
    value: function setControls(val) {
      this.el_.controls = !!val;
    }
  }, {
    key: 'loop',
    value: function loop() {
      return this.el_.loop;
    }
  }, {
    key: 'setLoop',
    value: function setLoop(val) {
      this.el_.loop = val;
    }
  }, {
    key: 'error',
    value: function error() {
      return this.el_.error;
    }
  }, {
    key: 'seeking',
    value: function seeking() {
      return this.el_.seeking;
    }
  }, {
    key: 'ended',
    value: function ended() {
      return this.el_.ended;
    }
  }, {
    key: 'defaultMuted',
    value: function defaultMuted() {
      return this.el_.defaultMuted;
    }
  }, {
    key: 'playbackRate',
    value: function playbackRate() {
      return this.el_.playbackRate;
    }
  }, {
    key: 'setPlaybackRate',
    value: function setPlaybackRate(val) {
      this.el_.playbackRate = val;
    }
  }, {
    key: 'networkState',
    value: function networkState() {
      return this.el_.networkState;
    }
  }, {
    key: 'readyState',
    value: function readyState() {
      return this.el_.readyState;
    }
  }, {
    key: 'textTracks',
    value: function textTracks() {
      if (!this['featuresNativeTextTracks']) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'textTracks', this).call(this);
      }

      return this.el_.textTracks;
    }
  }, {
    key: 'addTextTrack',
    value: function addTextTrack(kind, label, language) {
      if (!this['featuresNativeTextTracks']) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'addTextTrack', this).call(this, kind, label, language);
      }

      return this.el_.addTextTrack(kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack() {
      var options = arguments[0] === undefined ? {} : arguments[0];

      if (!this['featuresNativeTextTracks']) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'addRemoteTextTrack', this).call(this, options);
      }

      var track = _globalDocument2['default'].createElement('track');

      if (options['kind']) {
        track['kind'] = options['kind'];
      }
      if (options['label']) {
        track['label'] = options['label'];
      }
      if (options['language'] || options['srclang']) {
        track['srclang'] = options['language'] || options['srclang'];
      }
      if (options['default']) {
        track['default'] = options['default'];
      }
      if (options['id']) {
        track['id'] = options['id'];
      }
      if (options['src']) {
        track['src'] = options['src'];
      }

      this.el().appendChild(track);

      if (track.track['kind'] === 'metadata') {
        track['track']['mode'] = 'hidden';
      } else {
        track['track']['mode'] = 'disabled';
      }

      track['onload'] = function () {
        var tt = track['track'];
        if (track.readyState >= 2) {
          if (tt['kind'] === 'metadata' && tt['mode'] !== 'hidden') {
            tt['mode'] = 'hidden';
          } else if (tt['kind'] !== 'metadata' && tt['mode'] !== 'disabled') {
            tt['mode'] = 'disabled';
          }
          track['onload'] = null;
        }
      };

      this.remoteTextTracks().addTrack_(track.track);

      return track;
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      if (!this['featuresNativeTextTracks']) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'removeRemoteTextTrack', this).call(this, track);
      }

      var tracks, i;

      this.remoteTextTracks().removeTrack_(track);

      tracks = this.el()['querySelectorAll']('track');

      for (i = 0; i < tracks.length; i++) {
        if (tracks[i] === track || tracks[i]['track'] === track) {
          tracks[i]['parentNode']['removeChild'](tracks[i]);
          break;
        }
      }
    }
  }]);

  return Html5;
})(_techJs2['default']);

/* HTML5 Support Testing ---------------------------------------------------- */

/**
 * Check if HTML5 video is supported by this browser/device
 * @return {Boolean}
 */
Html5.isSupported = function () {
  // IE9 with no Media Player is a LIAR! (#984)
  try {
    Lib.TEST_VID['volume'] = 0.5;
  } catch (e) {
    return false;
  }

  return !!Lib.TEST_VID.canPlayType;
};

// Add Source Handler pattern functions to this tech
_techJs2['default'].withSourceHandlers(Html5);

/**
 * The default native source handler.
 * This simply passes the source to the video element. Nothing fancy.
 * @param  {Object} source   The source object
 * @param  {Html5} tech  The instance of the HTML5 tech
 */
Html5.nativeSourceHandler = {};

/**
 * Check if the video element can handle the source natively
 * @param  {Object} source  The source object
 * @return {String}         'probably', 'maybe', or '' (empty string)
 */
Html5.nativeSourceHandler.canHandleSource = function (source) {
  var match, ext;

  function canPlayType(type) {
    // IE9 on Windows 7 without MediaPlayer throws an error here
    // https://github.com/videojs/video.js/issues/519
    try {
      return Lib.TEST_VID.canPlayType(type);
    } catch (e) {
      return '';
    }
  }

  // If a type was provided we should rely on that
  if (source.type) {
    return canPlayType(source.type);
  } else if (source.src) {
    // If no type, fall back to checking 'video/[EXTENSION]'
    ext = Lib.getFileExtension(source.src);

    return canPlayType('video/' + ext);
  }

  return '';
};

/**
 * Pass the source to the video element
 * Adaptive source handlers will have more complicated workflows before passing
 * video data to the video element
 * @param  {Object} source    The source object
 * @param  {Html5} tech   The instance of the Html5 tech
 */
Html5.nativeSourceHandler.handleSource = function (source, tech) {
  tech.setSrc(source.src);
};

/**
 * Clean up the source handler when disposing the player or switching sources..
 * (no cleanup is needed when supporting the format natively)
 */
Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Html5.registerSourceHandler(Html5.nativeSourceHandler);

/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 * @return {Boolean}
 */
Html5.canControlVolume = function () {
  var volume = Lib.TEST_VID.volume;
  Lib.TEST_VID.volume = volume / 2 + 0.1;
  return volume !== Lib.TEST_VID.volume;
};

/**
 * Check if playbackRate is supported in this browser/device.
 * @return {[type]} [description]
 */
Html5.canControlPlaybackRate = function () {
  var playbackRate = Lib.TEST_VID.playbackRate;
  Lib.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
  return playbackRate !== Lib.TEST_VID.playbackRate;
};

/**
 * Check to see if native text tracks are supported by this browser/device
 * @return {Boolean}
 */
Html5.supportsNativeTextTracks = function () {
  var supportsTextTracks;

  // Figure out native text track support
  // If mode is a number, we cannot change it because it'll disappear from view.
  // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
  // Firefox isn't playing nice either with modifying the mode
  // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
  supportsTextTracks = !!Lib.TEST_VID.textTracks;
  if (supportsTextTracks && Lib.TEST_VID.textTracks.length > 0) {
    supportsTextTracks = typeof Lib.TEST_VID.textTracks[0]['mode'] !== 'number';
  }
  if (supportsTextTracks && Lib.IS_FIREFOX) {
    supportsTextTracks = false;
  }

  return supportsTextTracks;
};

/**
 * Set the tech's volume control support status
 * @type {Boolean}
 */
Html5.prototype['featuresVolumeControl'] = Html5.canControlVolume();

/**
 * Set the tech's playbackRate support status
 * @type {Boolean}
 */
Html5.prototype['featuresPlaybackRate'] = Html5.canControlPlaybackRate();

/**
 * Set the tech's status on moving the video element.
 * In iOS, if you move a video element in the DOM, it breaks video playback.
 * @type {Boolean}
 */
Html5.prototype['movingMediaElementInDOM'] = !Lib.IS_IOS;

/**
 * Set the the tech's fullscreen resize support status.
 * HTML video is able to automatically resize when going to fullscreen.
 * (No longer appears to be used. Can probably be removed.)
 */
Html5.prototype['featuresFullscreenResize'] = true;

/**
 * Set the tech's progress event support status
 * (this disables the manual progress events of the Tech)
 */
Html5.prototype['featuresProgressEvents'] = true;

/**
 * Sets the tech's status on native text track support
 * @type {Boolean}
 */
Html5.prototype['featuresNativeTextTracks'] = Html5.supportsNativeTextTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
var canPlayType = undefined;
var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
var mp4RE = /^video\/mp4/i;

Html5.patchCanPlayType = function () {
  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
  if (Lib.ANDROID_VERSION >= 4) {
    if (!canPlayType) {
      canPlayType = Lib.TEST_VID.constructor.prototype.canPlayType;
    }

    Lib.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mpegurlRE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }

  // Override Android 2.2 and less canPlayType method which is broken
  if (Lib.IS_OLD_ANDROID) {
    if (!canPlayType) {
      canPlayType = Lib.TEST_VID.constructor.prototype.canPlayType;
    }

    Lib.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mp4RE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }
};

Html5.unpatchCanPlayType = function () {
  var r = Lib.TEST_VID.constructor.prototype.canPlayType;
  Lib.TEST_VID.constructor.prototype.canPlayType = canPlayType;
  canPlayType = null;
  return r;
};

// by default, patch the video element
Html5.patchCanPlayType();

Html5.disposeMediaElement = function (el) {
  if (!el) {
    return;
  }

  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }

  // remove any child track or source nodes to prevent their loading
  while (el.hasChildNodes()) {
    el.removeChild(el.firstChild);
  }

  // remove any src reference. not setting `src=''` because that causes a warning
  // in firefox
  el.removeAttribute('src');

  // force the media element to update its loading state by calling load()
  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {}
    })();
  }
};

_component2['default'].registerComponent('Html5', Html5);
exports['default'] = Html5;
module.exports = exports['default'];

// not supported

},{"../component":7,"../lib":46,"../util":70,"./tech.js":63,"global/document":1}],62:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

/**
 * The Media Loader is the component that decides which playback technology to load
 * when the player is initialized.
 *
 * @constructor
 */

var MediaLoader = (function (_Component) {
  function MediaLoader(player, options, ready) {
    _classCallCheck(this, MediaLoader);

    _get(Object.getPrototypeOf(MediaLoader.prototype), 'constructor', this).call(this, player, options, ready);

    // If there are no sources when the player is initialized,
    // load the first supported playback technology.
    if (!player.options_['sources'] || player.options_['sources'].length === 0) {
      for (var i = 0, j = player.options_['techOrder']; i < j.length; i++) {
        var techName = Lib.capitalize(j[i]);
        var tech = _component2['default'].getComponent(techName);

        // Check if the browser supports this technology
        if (tech && tech.isSupported()) {
          player.loadTech(techName);
          break;
        }
      }
    } else {
      // // Loop through playback technologies (HTML5, Flash) and check for support.
      // // Then load the best source.
      // // A few assumptions here:
      // //   All playback technologies respect preload false.
      player.src(player.options_['sources']);
    }
  }

  _inherits(MediaLoader, _Component);

  return MediaLoader;
})(_component2['default']);

_component2['default'].registerComponent('MediaLoader', MediaLoader);
exports['default'] = MediaLoader;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"global/window":2}],63:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x4,
    property = _x5,
    receiver = _x6; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

/**
 * @fileoverview Media Technology Controller - Base class for media playback
 * technology controllers like Flash and HTML5
 */

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _tracksTextTrack = _dereq_('../tracks/text-track');

var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

var _tracksTextTrackList = _dereq_('../tracks/text-track-list');

var _tracksTextTrackList2 = _interopRequireDefault(_tracksTextTrackList);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/**
 * Base class for media (HTML5 Video, Flash) controllers
 * @param {Player|Object} player  Central player instance
 * @param {Object=} options Options object
 * @constructor
 */

var Tech = (function (_Component) {
  function Tech() {
    var options = arguments[0] === undefined ? {} : arguments[0];
    var ready = arguments[1] === undefined ? function () {} : arguments[1];

    _classCallCheck(this, Tech);

    options = options || {};
    // we don't want the tech to report user activity automatically.
    // This is done manually in addControlsListeners
    options.reportTouchActivity = false;
    _get(Object.getPrototypeOf(Tech.prototype), 'constructor', this).call(this, null, options, ready);

    this.textTracks_ = options.textTracks;

    // Manually track progress in cases where the browser/flash player doesn't report it.
    if (!this.featuresProgressEvents) {
      this.manualProgressOn();
    }

    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
    if (!this.featuresTimeupdateEvents) {
      this.manualTimeUpdatesOn();
    }

    this.initControlsListeners();

    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
      this.featuresNativeTextTracks = false;
    }

    if (!this.featuresNativeTextTracks) {
      this.emulateTextTracks();
    }

    this.initTextTrackListeners();
  }

  _inherits(Tech, _Component);

  _createClass(Tech, [{
    key: 'initControlsListeners',

    /**
     * Set up click and touch listeners for the playback element
     * On desktops, a click on the video itself will toggle playback,
     * on a mobile device a click on the video toggles controls.
     * (toggling controls is done by toggling the user state between active and
     * inactive)
     *
     * A tap can signal that a user has become active, or has become inactive
     * e.g. a quick tap on an iPhone movie should reveal the controls. Another
     * quick tap should hide them again (signaling the user is in an inactive
     * viewing state)
     *
     * In addition to this, we still want the user to be considered inactive after
     * a few seconds of inactivity.
     *
     * Note: the only part of iOS interaction we can't mimic with this setup
     * is a touch and hold on the video element counting as activity in order to
     * keep the controls showing, but that shouldn't be an issue. A touch and hold on
     * any controls will still keep the user active
     */
    value: function initControlsListeners() {
      // if we're loading the playback object after it has started loading or playing the
      // video (often with autoplay on) then the loadstart event has already fired and we
      // need to fire it manually because many things rely on it.
      // Long term we might consider how we would do this for other events like 'canplay'
      // that may also have fired.
      this.ready(function () {
        if (this.networkState && this.networkState() > 0) {
          this.trigger('loadstart');
        }
      });
    }
  }, {
    key: 'manualProgressOn',

    /* Fallbacks for unsupported event types
    ================================================================================ */
    // Manually trigger progress events based on changes to the buffered amount
    // Many flash players and older HTML5 browsers don't send progress or progress-like events
    value: function manualProgressOn() {
      this.on('durationchange', this.onDurationChange);

      this.manualProgress = true;

      // Trigger progress watching when a source begins loading
      this.trackProgress();
    }
  }, {
    key: 'manualProgressOff',
    value: function manualProgressOff() {
      this.manualProgress = false;
      this.stopTrackingProgress();

      this.off('durationchange', this.onDurationChange);
    }
  }, {
    key: 'trackProgress',
    value: function trackProgress() {
      this.progressInterval = this.setInterval(Lib.bind(this, function () {
        // Don't trigger unless buffered amount is greater than last time

        var bufferedPercent = this.bufferedPercent();

        if (this.bufferedPercent_ !== bufferedPercent) {
          this.trigger('progress');
        }

        this.bufferedPercent_ = bufferedPercent;

        if (bufferedPercent === 1) {
          this.stopTrackingProgress();
        }
      }), 500);
    }
  }, {
    key: 'onDurationChange',
    value: function onDurationChange() {
      this.duration_ = this.duration();
    }
  }, {
    key: 'bufferedPercent',
    value: function bufferedPercent() {
      var bufferedDuration = 0,
          start = undefined,
          end = undefined;

      if (!this.duration_) {
        return 0;
      }

      var buffered = this.buffered();

      if (!buffered || !buffered.length) {
        buffered = Lib.createTimeRange(0, 0);
      }

      for (var i = 0; i < buffered.length; i++) {
        start = buffered.start(i);
        end = buffered.end(i);

        // buffered end can be bigger than duration by a very small fraction
        if (end > this.duration_) {
          end = this.duration_;
        }

        bufferedDuration += end - start;
      }

      return bufferedDuration / this.duration_;
    }
  }, {
    key: 'stopTrackingProgress',
    value: function stopTrackingProgress() {
      this.clearInterval(this.progressInterval);
    }
  }, {
    key: 'manualTimeUpdatesOn',

    /*! Time Tracking -------------------------------------------------------------- */
    value: function manualTimeUpdatesOn() {
      this.manualTimeUpdates = true;

      this.on('play', this.trackCurrentTime);
      this.on('pause', this.stopTrackingCurrentTime);
      // timeupdate is also called by .currentTime whenever current time is set

      // Watch for native timeupdate event only
      var onTimeUpdate = function onTimeUpdate(e) {
        if (e.manuallyTriggered) return;

        this.off('timeupdate', onTimeUpdate);

        // Update known progress support for this playback technology
        this.featuresTimeupdateEvents = true;
        // Turn off manual progress tracking
        this.manualTimeUpdatesOff();
      };

      this.on('timeupdate', onTimeUpdate);
    }
  }, {
    key: 'manualTimeUpdatesOff',
    value: function manualTimeUpdatesOff() {
      this.manualTimeUpdates = false;
      this.stopTrackingCurrentTime();
      this.off('play', this.trackCurrentTime);
      this.off('pause', this.stopTrackingCurrentTime);
    }
  }, {
    key: 'trackCurrentTime',
    value: function trackCurrentTime() {
      if (this.currentTimeInterval) {
        this.stopTrackingCurrentTime();
      }
      this.currentTimeInterval = this.setInterval(function () {
        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
      }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
    }
  }, {
    key: 'stopTrackingCurrentTime',

    // Turn off play progress tracking (when paused or dragging)
    value: function stopTrackingCurrentTime() {
      this.clearInterval(this.currentTimeInterval);

      // #1002 - if the video ends right before the next timeupdate would happen,
      // the progress bar won't make it all the way to the end
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      // Turn off any manual progress or timeupdate tracking
      if (this.manualProgress) {
        this.manualProgressOff();
      }

      if (this.manualTimeUpdates) {
        this.manualTimeUpdatesOff();
      }

      _get(Object.getPrototypeOf(Tech.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime() {
      // improve the accuracy of manual timeupdates
      if (this.manualTimeUpdates) {
        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
      }
    }
  }, {
    key: 'initTextTrackListeners',
    value: function initTextTrackListeners() {
      var textTrackListChanges = Lib.bind(this, function () {
        this.trigger('texttrackchange');
      });

      var tracks = this.textTracks();

      if (!tracks) return;

      tracks.addEventListener('removetrack', textTrackListChanges);
      tracks.addEventListener('addtrack', textTrackListChanges);

      this.on('dispose', Lib.bind(this, function () {
        tracks.removeEventListener('removetrack', textTrackListChanges);
        tracks.removeEventListener('addtrack', textTrackListChanges);
      }));
    }
  }, {
    key: 'emulateTextTracks',
    value: function emulateTextTracks() {
      if (!_globalWindow2['default']['WebVTT'] && this.el().parentNode != null) {
        var script = _globalDocument2['default'].createElement('script');
        script.src = this.options_['vtt.js'] || '../node_modules/vtt.js/dist/vtt.js';
        this.el().parentNode.appendChild(script);
        _globalWindow2['default']['WebVTT'] = true;
      }

      var tracks = this.textTracks();
      if (!tracks) {
        return;
      }

      var textTracksChanges = function textTracksChanges() {
        var updateDisplay = Lib.bind(this, function () {
          this.trigger('texttrackchange');
        });

        this.trigger('texttrackchange');

        for (var i = 0; i < this.length; i++) {
          var track = this[i];
          track.removeEventListener('cuechange', updateDisplay);
          if (track.mode === 'showing') {
            track.addEventListener('cuechange', updateDisplay);
          }
        }
      };

      tracks.addEventListener('change', textTracksChanges);

      this.on('dispose', Lib.bind(this, function () {
        tracks.removeEventListener('change', textTracksChanges);
      }));
    }
  }, {
    key: 'textTracks',

    /**
     * Provide default methods for text tracks.
     *
     * Html5 tech overrides these.
     */

    value: function textTracks() {
      this.textTracks_ = this.textTracks_ || new _tracksTextTrackList2['default']();
      return this.textTracks_;
    }
  }, {
    key: 'remoteTextTracks',
    value: function remoteTextTracks() {
      this.remoteTextTracks_ = this.remoteTextTracks_ || new _tracksTextTrackList2['default']();
      return this.remoteTextTracks_;
    }
  }, {
    key: 'addTextTrack',
    value: function addTextTrack(kind, label, language) {
      if (!kind) {
        throw new Error('TextTrack kind is required but was not provided');
      }

      return createTrackHelper(this, kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack(options) {
      var track = createTrackHelper(this, options.kind, options.label, options.language, options);
      this.remoteTextTracks().addTrack_(track);
      return {
        track: track
      };
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      this.textTracks().removeTrack_(track);
      this.remoteTextTracks().removeTrack_(track);
    }
  }, {
    key: 'setPoster',

    /**
     * Provide a default setPoster method for techs
     *
     * Poster support for techs should be optional, so we don't want techs to
     * break if they don't have a way to set a poster.
     */
    value: function setPoster() {}
  }]);

  return Tech;
})(_component2['default']);

/**
 * List of associated text tracks
 * @type {Array}
 * @private
 */
Tech.prototype.textTracks_;

var createTrackHelper = function createTrackHelper(self, kind, label, language) {
  var options = arguments[4] === undefined ? {} : arguments[4];

  var tracks = self.textTracks();

  options.kind = kind;

  if (label) {
    options.label = label;
  }
  if (language) {
    options.language = language;
  }
  options.tech = self;

  var track = new _tracksTextTrack2['default'](options);
  tracks.addTrack_(track);

  return track;
};

Tech.prototype.featuresVolumeControl = true;

// Resizing plugins using request fullscreen reloads the plugin
Tech.prototype.featuresFullscreenResize = false;
Tech.prototype.featuresPlaybackRate = false;

// Optional events that we can manually mimic with timers
// currently not triggered by video-js-swf
Tech.prototype.featuresProgressEvents = false;
Tech.prototype.featuresTimeupdateEvents = false;

Tech.prototype.featuresNativeTextTracks = false;

/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 *
 * ##### EXAMPLE:
 *
 *   Tech.withSourceHandlers.call(MyTech);
 *
 */
Tech.withSourceHandlers = function (_Tech) {
  /**
   * Register a source handler
   * Source handlers are scripts for handling specific formats.
   * The source handler pattern is used for adaptive formats (HLS, DASH) that
   * manually load video data and feed it into a Source Buffer (Media Source Extensions)
   * @param  {Function} handler  The source handler
   * @param  {Boolean}  first    Register it before any existing handlers
   */
  _Tech.registerSourceHandler = function (handler, index) {
    var handlers = _Tech.sourceHandlers;

    if (!handlers) {
      handlers = _Tech.sourceHandlers = [];
    }

    if (index === undefined) {
      // add to the end of the list
      index = handlers.length;
    }

    handlers.splice(index, 0, handler);
  };

  /**
   * Return the first source handler that supports the source
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   * @param  {Object} source The source object
   * @returns {Object}       The first source handler that supports the source
   * @returns {null}         Null if no source handler is found
   */
  _Tech.selectSourceHandler = function (source) {
    var handlers = _Tech.sourceHandlers || [];
    var can = undefined;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canHandleSource(source);

      if (can) {
        return handlers[i];
      }
    }

    return null;
  };

  /**
  * Check if the tech can support the given source
  * @param  {Object} srcObj  The source object
  * @return {String}         'probably', 'maybe', or '' (empty string)
  */
  _Tech.canPlaySource = function (srcObj) {
    var sh = _Tech.selectSourceHandler(srcObj);

    if (sh) {
      return sh.canHandleSource(srcObj);
    }

    return '';
  };

  /**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   * @param {Object} source  A source object with src and type keys
   * @return {Tech} self
   */
  _Tech.prototype.setSource = function (source) {
    var sh = _Tech.selectSourceHandler(source);

    if (!sh) {
      // Fall back to a native source hander when unsupported sources are
      // deliberately set
      if (_Tech.nativeSourceHandler) {
        sh = _Tech.nativeSourceHandler;
      } else {
        Lib.log.error('No source hander found for the current source.');
      }
    }

    // Dispose any existing source handler
    this.disposeSourceHandler();
    this.off('dispose', this.disposeSourceHandler);

    this.currentSource_ = source;
    this.sourceHandler_ = sh.handleSource(source, this);
    this.on('dispose', this.disposeSourceHandler);

    return this;
  };

  /**
   * Clean up any existing source handler
   */
  _Tech.prototype.disposeSourceHandler = function () {
    if (this.sourceHandler_ && this.sourceHandler_.dispose) {
      this.sourceHandler_.dispose();
    }
  };
};

_component2['default'].registerComponent('Tech', Tech);
// Old name for Tech
_component2['default'].registerComponent('MediaTechController', Tech);
exports['default'] = Tech;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"../tracks/text-track":69,"../tracks/text-track-list":67,"global/document":1,"global/window":2}],64:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
 *
 * interface TextTrackCueList {
 *   readonly attribute unsigned long length;
 *   getter TextTrackCue (unsigned long index);
 *   TextTrackCue? getCueById(DOMString id);
 * };
 */

var TextTrackCueList = function TextTrackCueList(cues) {
  var list = this;

  if (Lib.IS_IE8) {
    list = _globalDocument2['default'].createElement('custom');

    for (var prop in TextTrackCueList.prototype) {
      list[prop] = TextTrackCueList.prototype[prop];
    }
  }

  TextTrackCueList.prototype.setCues_.call(list, cues);

  Object.defineProperty(list, 'length', {
    get: function get() {
      return this.length_;
    }
  });

  if (Lib.IS_IE8) {
    return list;
  }
};

TextTrackCueList.prototype.setCues_ = function (cues) {
  var oldLength = this.length || 0;
  var i = 0;
  var l = cues.length;

  this.cues_ = cues;
  this.length_ = cues.length;

  var defineProp = function defineProp(i) {
    if (!('' + i in this)) {
      Object.defineProperty(this, '' + i, {
        get: function get() {
          return this.cues_[i];
        }
      });
    }
  };

  if (oldLength < l) {
    i = oldLength;

    for (; i < l; i++) {
      defineProp.call(this, i);
    }
  }
};

TextTrackCueList.prototype.getCueById = function (id) {
  var result = null;
  for (var i = 0, l = this.length; i < l; i++) {
    var cue = this[i];
    if (cue.id === id) {
      result = cue;
      break;
    }
  }

  return result;
};

exports['default'] = TextTrackCueList;
module.exports = exports['default'];

},{"../lib":46,"global/document":1}],65:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _menuMenuJs = _dereq_('../menu/menu.js');

var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

var _menuMenuItemJs = _dereq_('../menu/menu-item.js');

var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

var _libJs = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_libJs);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var darkGray = '#222';
var lightGray = '#ccc';
var fontMap = {
  monospace: 'monospace',
  sansSerif: 'sans-serif',
  serif: 'serif',
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: 'sans-serif',
  proportionalSerif: 'serif',
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};

/**
 * The component for displaying text track cues
 *
 * @constructor
 */

var TextTrackDisplay = (function (_Component) {
  function TextTrackDisplay(player, options, ready) {
    _classCallCheck(this, TextTrackDisplay);

    _get(Object.getPrototypeOf(TextTrackDisplay.prototype), 'constructor', this).call(this, player, options, ready);

    player.on('loadstart', Lib.bind(this, this.toggleDisplay));
    player.on('texttrackchange', Lib.bind(this, this.toggleDisplay));

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    player.ready(Lib.bind(this, function () {
      if (player.tech && player.tech['featuresNativeTextTracks']) {
        this.hide();
        return;
      }

      player.on('fullscreenchange', Lib.bind(this, this.updateDisplay));

      var tracks = player.options_['tracks'] || [];
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        this.player_.addRemoteTextTrack(track);
      }
    }));
  }

  _inherits(TextTrackDisplay, _Component);

  _createClass(TextTrackDisplay, [{
    key: 'toggleDisplay',
    value: function toggleDisplay() {
      if (this.player_.tech && this.player_.tech['featuresNativeTextTracks']) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TextTrackDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-text-track-display'
      });
    }
  }, {
    key: 'clearDisplay',
    value: function clearDisplay() {
      if (typeof _globalWindow2['default']['WebVTT'] === 'function') {
        _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], [], this.el_);
      }
    }
  }, {
    key: 'updateDisplay',
    value: function updateDisplay() {
      var tracks = this.player_.textTracks();

      this.clearDisplay();

      if (!tracks) {
        return;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (track['mode'] === 'showing') {
          this.updateForTrack(track);
        }
      }
    }
  }, {
    key: 'updateForTrack',
    value: function updateForTrack(track) {
      if (typeof _globalWindow2['default']['WebVTT'] !== 'function' || !track['activeCues']) {
        return;
      }

      var overrides = this.player_['textTrackSettings'].getValues();

      var cues = [];
      for (var _i = 0; _i < track['activeCues'].length; _i++) {
        cues.push(track['activeCues'][_i]);
      }

      _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], track['activeCues'], this.el_);

      var i = cues.length;
      while (i--) {
        var cueDiv = cues[i].displayState;
        if (overrides.color) {
          cueDiv.firstChild.style.color = overrides.color;
        }
        if (overrides.textOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
        }
        if (overrides.backgroundColor) {
          cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
        }
        if (overrides.backgroundOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
        }
        if (overrides.windowColor) {
          if (overrides.windowOpacity) {
            tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
          } else {
            cueDiv.style.backgroundColor = overrides.windowColor;
          }
        }
        if (overrides.edgeStyle) {
          if (overrides.edgeStyle === 'dropshadow') {
            cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
          } else if (overrides.edgeStyle === 'raised') {
            cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
          } else if (overrides.edgeStyle === 'depressed') {
            cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
          } else if (overrides.edgeStyle === 'uniform') {
            cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
          }
        }
        if (overrides.fontPercent && overrides.fontPercent !== 1) {
          var fontSize = _globalWindow2['default'].parseFloat(cueDiv.style.fontSize);
          cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
          cueDiv.style.height = 'auto';
          cueDiv.style.top = 'auto';
          cueDiv.style.bottom = '2px';
        }
        if (overrides.fontFamily && overrides.fontFamily !== 'default') {
          if (overrides.fontFamily === 'small-caps') {
            cueDiv.firstChild.style.fontVariant = 'small-caps';
          } else {
            cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
          }
        }
      }
    }
  }]);

  return TextTrackDisplay;
})(_component2['default']);

// Add cue HTML to display
function constructColor(color, opacity) {
  return 'rgba(' +
  // color looks like "#f0e"
  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
}

function tryUpdateStyle(el, style, rule) {
  // some style changes will throw an error, particularly in IE8. Those should be noops.
  try {
    el.style[style] = rule;
  } catch (e) {}
}

_component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
exports['default'] = TextTrackDisplay;
module.exports = exports['default'];

},{"../component":7,"../lib.js":46,"../menu/menu-button.js":49,"../menu/menu-item.js":50,"../menu/menu.js":51,"global/document":1,"global/window":2}],66:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
 *
 * enum TextTrackMode { "disabled",  "hidden",  "showing" };
 */
var TextTrackMode = {
  'disabled': 'disabled',
  'hidden': 'hidden',
  'showing': 'showing'
};

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
 *
 * enum TextTrackKind { "subtitles",  "captions",  "descriptions",  "chapters",  "metadata" };
 */
var TextTrackKind = {
  'subtitles': 'subtitles',
  'captions': 'captions',
  'descriptions': 'descriptions',
  'chapters': 'chapters',
  'metadata': 'metadata'
};

exports.TextTrackMode = TextTrackMode;
exports.TextTrackKind = TextTrackKind;

},{}],67:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _eventEmitter = _dereq_('../event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
 *
 * interface TextTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter TextTrack (unsigned long index);
 *   TextTrack? getTrackById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
 */
var TextTrackList = function TextTrackList(tracks) {
  var list = this;

  if (Lib.IS_IE8) {
    list = _globalDocument2['default'].createElement('custom');

    for (var prop in TextTrackList.prototype) {
      list[prop] = TextTrackList.prototype[prop];
    }
  }

  tracks = tracks || [];
  list.tracks_ = [];

  Object.defineProperty(list, 'length', {
    get: function get() {
      return this.tracks_.length;
    }
  });

  for (var i = 0; i < tracks.length; i++) {
    list.addTrack_(tracks[i]);
  }

  if (Lib.IS_IE8) {
    return list;
  }
};

TextTrackList.prototype = Lib.obj.create(_eventEmitter2['default'].prototype);
TextTrackList.prototype.constructor = TextTrackList;

/*
 * change - One or more tracks in the track list have been enabled or disabled.
 * addtrack - A track has been added to the track list.
 * removetrack - A track has been removed from the track list.
*/
TextTrackList.prototype.allowedEvents_ = {
  'change': 'change',
  'addtrack': 'addtrack',
  'removetrack': 'removetrack'
};

// emulate attribute EventHandler support to allow for feature detection
for (var _event in TextTrackList.prototype.allowedEvents_) {
  TextTrackList.prototype['on' + _event] = null;
}

TextTrackList.prototype.addTrack_ = function (track) {
  var index = this.tracks_.length;
  if (!('' + index in this)) {
    Object.defineProperty(this, index, {
      get: function get() {
        return this.tracks_[index];
      }
    });
  }

  track.addEventListener('modechange', Lib.bind(this, function () {
    this.trigger('change');
  }));
  this.tracks_.push(track);

  this.trigger({
    type: 'addtrack',
    track: track
  });
};

TextTrackList.prototype.removeTrack_ = function (rtrack) {
  var result = null;
  var track = undefined;

  for (var i = 0, l = this.length; i < l; i++) {
    track = this[i];
    if (track === rtrack) {
      this.tracks_.splice(i, 1);
      break;
    }
  }

  this.trigger({
    type: 'removetrack',
    track: track
  });
};

TextTrackList.prototype.getTrackById = function (id) {
  var result = null;

  for (var i = 0, l = this.length; i < l; i++) {
    var track = this[i];
    if (track.id === id) {
      result = track;
      break;
    }
  }

  return result;
};

exports['default'] = TextTrackList;
module.exports = exports['default'];

},{"../event-emitter":42,"../lib":46,"global/document":1}],68:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x,
    property = _x2,
    receiver = _x3; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _component = _dereq_('../component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _events = _dereq_('../events');

var Events = _interopRequireWildcard(_events);

var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var TextTrackSettings = (function (_Component) {
  function TextTrackSettings(player, options) {
    _classCallCheck(this, TextTrackSettings);

    _get(Object.getPrototypeOf(TextTrackSettings.prototype), 'constructor', this).call(this, player, options);
    this.hide();

    Events.on(this.el().querySelector('.vjs-done-button'), 'click', Lib.bind(this, function () {
      this.saveSettings();
      this.hide();
    }));

    Events.on(this.el().querySelector('.vjs-default-button'), 'click', Lib.bind(this, function () {
      this.el().querySelector('.vjs-fg-color > select').selectedIndex = 0;
      this.el().querySelector('.vjs-bg-color > select').selectedIndex = 0;
      this.el().querySelector('.window-color > select').selectedIndex = 0;
      this.el().querySelector('.vjs-text-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-bg-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-window-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-edge-style select').selectedIndex = 0;
      this.el().querySelector('.vjs-font-family select').selectedIndex = 0;
      this.el().querySelector('.vjs-font-percent select').selectedIndex = 2;
      this.updateDisplay();
    }));

    Events.on(this.el().querySelector('.vjs-fg-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-bg-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.window-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-text-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-bg-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-window-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-font-percent select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-edge-style select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-font-family select'), 'change', Lib.bind(this, this.updateDisplay));

    if (player.options()['persistTextTrackSettings']) {
      this.restoreSettings();
    }
  }

  _inherits(TextTrackSettings, _Component);

  _createClass(TextTrackSettings, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TextTrackSettings.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-caption-settings vjs-modal-overlay',
        innerHTML: captionOptionsMenuTemplate()
      });
    }
  }, {
    key: 'getValues',
    value: function getValues() {
      var el = this.el();

      var textEdge = getSelectedOptionValue(el.querySelector('.vjs-edge-style select'));
      var fontFamily = getSelectedOptionValue(el.querySelector('.vjs-font-family select'));
      var fgColor = getSelectedOptionValue(el.querySelector('.vjs-fg-color > select'));
      var textOpacity = getSelectedOptionValue(el.querySelector('.vjs-text-opacity > select'));
      var bgColor = getSelectedOptionValue(el.querySelector('.vjs-bg-color > select'));
      var bgOpacity = getSelectedOptionValue(el.querySelector('.vjs-bg-opacity > select'));
      var windowColor = getSelectedOptionValue(el.querySelector('.window-color > select'));
      var windowOpacity = getSelectedOptionValue(el.querySelector('.vjs-window-opacity > select'));
      var fontPercent = _globalWindow2['default']['parseFloat'](getSelectedOptionValue(el.querySelector('.vjs-font-percent > select')));

      var result = {
        'backgroundOpacity': bgOpacity,
        'textOpacity': textOpacity,
        'windowOpacity': windowOpacity,
        'edgeStyle': textEdge,
        'fontFamily': fontFamily,
        'color': fgColor,
        'backgroundColor': bgColor,
        'windowColor': windowColor,
        'fontPercent': fontPercent
      };
      for (var _name in result) {
        if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1) {
          delete result[_name];
        }
      }
      return result;
    }
  }, {
    key: 'setValues',
    value: function setValues(values) {
      var el = this.el();

      setSelectedOption(el.querySelector('.vjs-edge-style select'), values.edgeStyle);
      setSelectedOption(el.querySelector('.vjs-font-family select'), values.fontFamily);
      setSelectedOption(el.querySelector('.vjs-fg-color > select'), values.color);
      setSelectedOption(el.querySelector('.vjs-text-opacity > select'), values.textOpacity);
      setSelectedOption(el.querySelector('.vjs-bg-color > select'), values.backgroundColor);
      setSelectedOption(el.querySelector('.vjs-bg-opacity > select'), values.backgroundOpacity);
      setSelectedOption(el.querySelector('.window-color > select'), values.windowColor);
      setSelectedOption(el.querySelector('.vjs-window-opacity > select'), values.windowOpacity);

      var fontPercent = values.fontPercent;

      if (fontPercent) {
        fontPercent = fontPercent.toFixed(2);
      }

      setSelectedOption(el.querySelector('.vjs-font-percent > select'), fontPercent);
    }
  }, {
    key: 'restoreSettings',
    value: function restoreSettings() {
      var _safeParseTuple = _safeJsonParseTuple2['default'](_globalWindow2['default'].localStorage.getItem('vjs-text-track-settings'));

      var _safeParseTuple2 = _slicedToArray(_safeParseTuple, 2);

      var err = _safeParseTuple2[0];
      var values = _safeParseTuple2[1];

      if (err) {
        Lib.log.error(err);
      }

      if (values) {
        this.setValues(values);
      }
    }
  }, {
    key: 'saveSettings',
    value: function saveSettings() {
      if (!this.player_.options()['persistTextTrackSettings']) {
        return;
      }

      var values = this.getValues();
      try {
        if (!Lib.isEmpty(values)) {
          _globalWindow2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
        } else {
          _globalWindow2['default'].localStorage.removeItem('vjs-text-track-settings');
        }
      } catch (e) {}
    }
  }, {
    key: 'updateDisplay',
    value: function updateDisplay() {
      var ttDisplay = this.player_.getChild('textTrackDisplay');
      if (ttDisplay) {
        ttDisplay.updateDisplay();
      }
    }
  }]);

  return TextTrackSettings;
})(_component2['default']);

_component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

function getSelectedOptionValue(target) {
  var selectedOption = undefined;
  // not all browsers support selectedOptions, so, fallback to options
  if (target.selectedOptions) {
    selectedOption = target.selectedOptions[0];
  } else if (target.options) {
    selectedOption = target.options[target.options.selectedIndex];
  }

  return selectedOption.value;
}

function setSelectedOption(target, value) {
  if (!value) {
    return;
  }

  var i = undefined;
  for (i = 0; i < target.options.length; i++) {
    var option = target.options[i];
    if (option.value === value) {
      break;
    }
  }

  target.selectedIndex = i;
}

function captionOptionsMenuTemplate() {
  var template = '<div class="vjs-tracksettings">\n      <div class="vjs-tracksettings-colors">\n        <div class="vjs-fg-color vjs-tracksetting">\n            <label class="vjs-label">Foreground</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <select>\n                <option value="">---</option>\n                <option value="1">Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n        </div> <!-- vjs-fg-color -->\n        <div class="vjs-bg-color vjs-tracksetting">\n            <label class="vjs-label">Background</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-bg-color -->\n        <div class="window-color vjs-tracksetting">\n            <label class="vjs-label">Window</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-window-color -->\n      </div> <!-- vjs-tracksettings -->\n      <div class="vjs-tracksettings-font">\n        <div class="vjs-font-percent vjs-tracksetting">\n          <label class="vjs-label">Font Size</label>\n          <select>\n            <option value="0.50">50%</option>\n            <option value="0.75">75%</option>\n            <option value="1.00" selected>100%</option>\n            <option value="1.25">125%</option>\n            <option value="1.50">150%</option>\n            <option value="1.75">175%</option>\n            <option value="2.00">200%</option>\n            <option value="3.00">300%</option>\n            <option value="4.00">400%</option>\n          </select>\n        </div> <!-- vjs-font-percent -->\n        <div class="vjs-edge-style vjs-tracksetting">\n          <label class="vjs-label">Text Edge Style</label>\n          <select>\n            <option value="none">None</option>\n            <option value="raised">Raised</option>\n            <option value="depressed">Depressed</option>\n            <option value="uniform">Uniform</option>\n            <option value="dropshadow">Dropshadow</option>\n          </select>\n        </div> <!-- vjs-edge-style -->\n        <div class="vjs-font-family vjs-tracksetting">\n          <label class="vjs-label">Font Family</label>\n          <select>\n            <option value="">Default</option>\n            <option value="monospaceSerif">Monospace Serif</option>\n            <option value="proportionalSerif">Proportional Serif</option>\n            <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n            <option value="proportionalSansSerif">Proportional Sans-Serif</option>\n            <option value="casual">Casual</option>\n            <option value="script">Script</option>\n            <option value="small-caps">Small Caps</option>\n          </select>\n        </div> <!-- vjs-font-family -->\n      </div>\n    </div>\n    <div class="vjs-tracksettings-controls">\n      <button class="vjs-default-button">Defaults</button>\n      <button class="vjs-done-button">Done</button>\n    </div>';

  return template;
}

exports['default'] = TextTrackSettings;
module.exports = exports['default'];

},{"../component":7,"../events":43,"../lib":46,"global/window":2,"safe-json-parse/tuple":4}],69:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _textTrackCueList = _dereq_('./text-track-cue-list');

var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

var _lib = _dereq_('../lib');

var Lib = _interopRequireWildcard(_lib);

var _textTrackEnums = _dereq_('./text-track-enums');

var TextTrackEnum = _interopRequireWildcard(_textTrackEnums);

var _eventEmitter = _dereq_('../event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _xhrJs = _dereq_('../xhr.js');

var _xhrJs2 = _interopRequireDefault(_xhrJs);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
 *
 * interface TextTrack : EventTarget {
 *   readonly attribute TextTrackKind kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
 *
 *   attribute TextTrackMode mode;
 *
 *   readonly attribute TextTrackCueList? cues;
 *   readonly attribute TextTrackCueList? activeCues;
 *
 *   void addCue(TextTrackCue cue);
 *   void removeCue(TextTrackCue cue);
 *
 *   attribute EventHandler oncuechange;
 * };
 */
var TextTrack = function TextTrack() {
  var options = arguments[0] === undefined ? {} : arguments[0];

  if (!options.tech) {
    throw new Error('A tech was not provided.');
  }

  var tt = this;
  if (Lib.IS_IE8) {
    tt = _globalDocument2['default'].createElement('custom');

    for (var prop in TextTrack.prototype) {
      tt[prop] = TextTrack.prototype[prop];
    }
  }

  tt.tech_ = options.tech;

  var mode = TextTrackEnum.TextTrackMode[options['mode']] || 'disabled';
  var kind = TextTrackEnum.TextTrackKind[options['kind']] || 'subtitles';
  var label = options['label'] || '';
  var language = options['language'] || options['srclang'] || '';
  var id = options['id'] || 'vjs_text_track_' + Lib.guid++;

  if (kind === 'metadata' || kind === 'chapters') {
    mode = 'hidden';
  }

  tt.cues_ = [];
  tt.activeCues_ = [];

  var cues = new _textTrackCueList2['default'](tt.cues_);
  var activeCues = new _textTrackCueList2['default'](tt.activeCues_);

  var changed = false;
  var timeupdateHandler = Lib.bind(tt, function () {
    this['activeCues'];
    if (changed) {
      this['trigger']('cuechange');
      changed = false;
    }
  });
  if (mode !== 'disabled') {
    tt.tech_.on('timeupdate', timeupdateHandler);
  }

  Object.defineProperty(tt, 'kind', {
    get: function get() {
      return kind;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'label', {
    get: function get() {
      return label;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'language', {
    get: function get() {
      return language;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'id', {
    get: function get() {
      return id;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'mode', {
    get: function get() {
      return mode;
    },
    set: function set(newMode) {
      if (!TextTrackEnum.TextTrackMode[newMode]) {
        return;
      }
      mode = newMode;
      if (mode === 'showing') {
        this.tech_.on('timeupdate', timeupdateHandler);
      }
      this.trigger('modechange');
    }
  });

  Object.defineProperty(tt, 'cues', {
    get: function get() {
      if (!this.loaded_) {
        return null;
      }

      return cues;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'activeCues', {
    get: function get() {
      if (!this.loaded_) {
        return null;
      }

      if (this['cues'].length === 0) {
        return activeCues; // nothing to do
      }

      var ct = this.tech_.currentTime();
      var active = [];

      for (var i = 0, l = this['cues'].length; i < l; i++) {
        var cue = this['cues'][i];
        if (cue['startTime'] <= ct && cue['endTime'] >= ct) {
          active.push(cue);
        } else if (cue['startTime'] === cue['endTime'] && cue['startTime'] <= ct && cue['startTime'] + 0.5 >= ct) {
          active.push(cue);
        }
      }

      changed = false;

      if (active.length !== this.activeCues_.length) {
        changed = true;
      } else {
        for (var i = 0; i < active.length; i++) {
          if (indexOf.call(this.activeCues_, active[i]) === -1) {
            changed = true;
          }
        }
      }

      this.activeCues_ = active;
      activeCues.setCues_(this.activeCues_);

      return activeCues;
    },
    set: Function.prototype
  });

  if (options.src) {
    loadTrack(options.src, tt);
  } else {
    tt.loaded_ = true;
  }

  if (Lib.IS_IE8) {
    return tt;
  }
};

TextTrack.prototype = Lib.obj.create(_eventEmitter2['default'].prototype);
TextTrack.prototype.constructor = TextTrack;

/*
 * cuechange - One or more cues in the track have become active or stopped being active.
 */
TextTrack.prototype.allowedEvents_ = {
  'cuechange': 'cuechange'
};

TextTrack.prototype.addCue = function (cue) {
  var tracks = this.tech_.textTracks();

  if (tracks) {
    for (var i = 0; i < tracks.length; i++) {
      if (tracks[i] !== this) {
        tracks[i].removeCue(cue);
      }
    }
  }

  this.cues_.push(cue);
  this['cues'].setCues_(this.cues_);
};

TextTrack.prototype.removeCue = function (removeCue) {
  var removed = false;

  for (var i = 0, l = this.cues_.length; i < l; i++) {
    var cue = this.cues_[i];
    if (cue === removeCue) {
      this.cues_.splice(i, 1);
      removed = true;
    }
  }

  if (removed) {
    this.cues.setCues_(this.cues_);
  }
};

/*
 * Downloading stuff happens below this point
 */
var parseCues = function parseCues(srcContent, track) {
  if (typeof _globalWindow2['default']['WebVTT'] !== 'function') {
    //try again a bit later
    return _globalWindow2['default'].setTimeout(function () {
      parseCues(srcContent, track);
    }, 25);
  }

  var parser = new _globalWindow2['default']['WebVTT']['Parser'](_globalWindow2['default'], _globalWindow2['default']['vttjs'], _globalWindow2['default']['WebVTT']['StringDecoder']());

  parser['oncue'] = function (cue) {
    track.addCue(cue);
  };
  parser['onparsingerror'] = function (error) {
    Lib.log.error(error);
  };

  parser['parse'](srcContent);
  parser['flush']();
};

var loadTrack = function loadTrack(src, track) {
  _xhrJs2['default'](src, Lib.bind(this, function (err, response, responseBody) {
    if (err) {
      return Lib.log.error(err);
    }

    track.loaded_ = true;
    parseCues(responseBody, track);
  }));
};

var indexOf = function indexOf(searchElement, fromIndex) {
  if (this == null) {
    throw new TypeError('"this" is null or not defined');
  }

  var O = Object(this);

  var len = O.length >>> 0;

  if (len === 0) {
    return -1;
  }

  var n = +fromIndex || 0;

  if (Math.abs(n) === Infinity) {
    n = 0;
  }

  if (n >= len) {
    return -1;
  }

  var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

  while (k < len) {
    if (k in O && O[k] === searchElement) {
      return k;
    }
    k++;
  }
  return -1;
};

exports['default'] = TextTrack;
module.exports = exports['default'];

},{"../event-emitter":42,"../lib":46,"../xhr.js":72,"./text-track-cue-list":64,"./text-track-enums":66,"global/document":1,"global/window":2}],70:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lib = _dereq_('./lib');

/**
 * Utility functions namespace
 * @namespace
 * @type {Object}
 */
var util = {};

/**
 * Merge two options objects, recursively merging any plain object properties as
 * well.  Previously `deepMerge`
 *
 * @param  {Object} obj1 Object to override values in
 * @param  {Object} obj2 Overriding object
 * @return {Object}      New object -- obj1 and obj2 will be untouched
 */
var mergeOptions = function mergeOptions(obj1, obj2) {
  var key, val1, val2;

  // make a copy of obj1 so we're not overwriting original values.
  // like prototype.options_ and all sub options objects
  obj1 = _lib.obj.copy(obj1);

  for (key in obj2) {
    if (obj2.hasOwnProperty(key)) {
      val1 = obj1[key];
      val2 = obj2[key];

      // Check if both properties are pure objects and do a deep merge if so
      if (_lib.obj.isPlain(val1) && _lib.obj.isPlain(val2)) {
        obj1[key] = mergeOptions(val1, val2);
      } else {
        obj1[key] = obj2[key];
      }
    }
  }
  return obj1;
};

exports.mergeOptions = mergeOptions;

},{"./lib":46}],71:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _techLoaderJs = _dereq_('./tech/loader.js');

var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);

var _techHtml5Js = _dereq_('./tech/html5.js');

var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

var _techFlashJs = _dereq_('./tech/flash.js');

var _techFlashJs2 = _interopRequireDefault(_techFlashJs);

var _posterImageJs = _dereq_('./poster-image.js');

var _posterImageJs2 = _interopRequireDefault(_posterImageJs);

var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');

var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);

var _loadingSpinnerJs = _dereq_('./loading-spinner.js');

var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);

var _bigPlayButtonJs = _dereq_('./big-play-button.js');

var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);

var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');

var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);

var _errorDisplayJs = _dereq_('./error-display.js');

var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);

var _core = _dereq_('./core');

var _core2 = _interopRequireDefault(_core);

var _setup = _dereq_('./setup');

var setup = _interopRequireWildcard(_setup);

var _component = _dereq_('./component');

var _component2 = _interopRequireDefault(_component);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var _utilJs = _dereq_('./util.js');

var Util = _interopRequireWildcard(_utilJs);

var _player = _dereq_('./player');

var _player2 = _interopRequireDefault(_player);

var _extendsJs = _dereq_('./extends.js');

var _extendsJs2 = _interopRequireDefault(_extendsJs);

var _pluginsJs = _dereq_('./plugins.js');

var _pluginsJs2 = _interopRequireDefault(_pluginsJs);

var _optionsJs = _dereq_('./options.js');

var _optionsJs2 = _interopRequireDefault(_optionsJs);

if (typeof HTMLVideoElement === 'undefined') {
  _globalDocument2['default'].createElement('video');
  _globalDocument2['default'].createElement('audio');
  _globalDocument2['default'].createElement('track');
}

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
setup.autoSetupTimeout(1, _core2['default']);

_core2['default'].getComponent = _component2['default'].getComponent;
_core2['default'].registerComponent = _component2['default'].registerComponent;

// APIs that will be removed with 5.0, but need them to get tests passing
// in ES6 transition
_core2['default'].TOUCH_ENABLED = Lib.TOUCH_ENABLED;
_core2['default'].util = Util;

// Probably want to keep this one for 5.0?
_core2['default'].players = _player2['default'].players;

_core2['default']['extends'] = _extendsJs2['default'];

_core2['default'].getGlobalOptions = function () {
  return _optionsJs2['default'];
};
_core2['default'].setGlobalOptions = function (newOptions) {
  Lib.util.mergeOptions(_optionsJs2['default'], newOptions);
};

_core2['default'].plugin = _pluginsJs2['default'];

// REMOVING: We probably should not include this in 5.0 thought it would make it
// more backwards compatible
// // Expose but deprecate the window[componentName] method for accessing components
// Lib.obj.each(Component.components, function(name, component){
//   // A deprecation warning as the constuctor
//   module.exports[name] = function(player, options, ready){
//     Lib.log.warn('Using videojs.'+name+' to access the '+name+' component has been deprecated. Please use videojs.getComponent("componentName")');
//
//     return new Component(player, options, ready);
//   };
//
//   // Allow the prototype and class methods to be accessible still this way
//   // Though anything that attempts to override class methods will no longer work
//   Lib.obj.merge(module.exports[name], component);
// });

exports['default'] = _core2['default'];
module.exports = exports['default'];

},{"./big-play-button.js":5,"./component":7,"./control-bar/control-bar.js":8,"./core":40,"./error-display.js":41,"./extends.js":44,"./lib":46,"./loading-spinner.js":47,"./options.js":52,"./player":53,"./plugins.js":54,"./poster-image.js":55,"./setup":56,"./tech/flash.js":60,"./tech/html5.js":61,"./tech/loader.js":62,"./tracks/text-track-display.js":65,"./util.js":70,"global/document":1}],72:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _util = _dereq_('./util');

var VjsUtils = _interopRequireWildcard(_util);

var _lib = _dereq_('./lib');

var Lib = _interopRequireWildcard(_lib);

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

/**
 * Simple http request for retrieving external files (e.g. text tracks)
 *
 * ##### Example
 *
 *     // using url string
 *     videojs.xhr('http://example.com/myfile.vtt', function(error, response, responseBody){});
 *
 *     // or options block
 *     videojs.xhr({
 *       uri: 'http://example.com/myfile.vtt',
 *       method: 'GET',
 *       responseType: 'text'
 *     }, function(error, response, responseBody){
 *       if (error) {
 *         // log the error
 *       } else {
 *         // successful, do something with the response
 *       }
 *     });
 *
 *
 * API is modeled after the Raynos/xhr, which we hope to use after
 * getting browserify implemented.
 * https://github.com/Raynos/xhr/blob/master/index.js
 *
 * @param  {Object|String}  options   Options block or URL string
 * @param  {Function}       callback  The callback function
 * @returns {Object}                  The request
 */
var xhr = function xhr(options, callback) {
  var abortTimeout = undefined;

  // If options is a string it's the url
  if (typeof options === 'string') {
    options = {
      uri: options
    };
  }

  // Merge with default options
  VjsUtils.mergeOptions({
    method: 'GET',
    timeout: 45 * 1000
  }, options);

  callback = callback || function () {};

  var XHR = _globalWindow2['default'].XMLHttpRequest;

  if (typeof XHR === 'undefined') {
    // Shim XMLHttpRequest for older IEs
    XHR = function () {
      try {
        return new _globalWindow2['default'].ActiveXObject('Msxml2.XMLHTTP.6.0');
      } catch (e) {}
      try {
        return new _globalWindow2['default'].ActiveXObject('Msxml2.XMLHTTP.3.0');
      } catch (f) {}
      try {
        return new _globalWindow2['default'].ActiveXObject('Msxml2.XMLHTTP');
      } catch (g) {}
      throw new Error('This browser does not support XMLHttpRequest.');
    };
  }

  var request = new XHR();
  // Store a reference to the url on the request instance
  request.uri = options.uri;

  var urlInfo = Lib.parseUrl(options.uri);
  var winLoc = _globalWindow2['default'].location;

  var successHandler = function successHandler() {
    _globalWindow2['default'].clearTimeout(abortTimeout);
    callback(null, request, request.response || request.responseText);
  };

  var errorHandler = function errorHandler(err) {
    _globalWindow2['default'].clearTimeout(abortTimeout);

    if (!err || typeof err === 'string') {
      err = new Error(err);
    }

    callback(err, request);
  };

  // Check if url is for another domain/origin
  // IE8 doesn't know location.origin, so we won't rely on it here
  var crossOrigin = urlInfo.protocol + urlInfo.host !== winLoc.protocol + winLoc.host;

  // XDomainRequest -- Use for IE if XMLHTTPRequest2 isn't available
  // 'withCredentials' is only available in XMLHTTPRequest2
  // Also XDomainRequest has a lot of gotchas, so only use if cross domain
  if (crossOrigin && _globalWindow2['default'].XDomainRequest && !('withCredentials' in request)) {
    request = new _globalWindow2['default'].XDomainRequest();
    request.onload = successHandler;
    request.onerror = errorHandler;
    // These blank handlers need to be set to fix ie9
    // http://cypressnorth.com/programming/internet-explorer-aborting-ajax-requests-fixed/
    request.onprogress = function () {};
    request.ontimeout = function () {};

    // XMLHTTPRequest
  } else {
    (function () {
      var fileUrl = urlInfo.protocol === 'file:' || winLoc.protocol === 'file:';

      request.onreadystatechange = function () {
        if (request.readyState === 4) {
          if (request.timedout) {
            return errorHandler('timeout');
          }

          if (request.status === 200 || fileUrl && request.status === 0) {
            successHandler();
          } else {
            errorHandler();
          }
        }
      };

      if (options.timeout) {
        abortTimeout = _globalWindow2['default'].setTimeout(function () {
          if (request.readyState !== 4) {
            request.timedout = true;
            request.abort();
          }
        }, options.timeout);
      }
    })();
  }

  // open the connection
  try {
    // Third arg is async, or ignored by XDomainRequest
    request.open(options.method || 'GET', options.uri, true);
  } catch (err) {
    return errorHandler(err);
  }

  // withCredentials only supported by XMLHttpRequest2
  if (options.withCredentials) {
    request.withCredentials = true;
  }

  if (options.responseType) {
    request.responseType = options.responseType;
  }

  // send the request
  try {
    request.send();
  } catch (err) {
    return errorHandler(err);
  }

  return request;
};

exports['default'] = xhr;
module.exports = exports['default'];

},{"./lib":46,"./util":70,"global/window":2}]},{},[71])(71)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZ2xvYmFsL2RvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvZ3J1bnQtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL3NhZmUtanNvbi1wYXJzZS90dXBsZS5qcyIsImJpZy1wbGF5LWJ1dHRvbi5qcyIsImJ1dHRvbi5qcyIsImNvbXBvbmVudC5qcyIsImNvbnRyb2wtYmFyL2NvbnRyb2wtYmFyLmpzIiwiY29udHJvbC1iYXIvZnVsbHNjcmVlbi10b2dnbGUuanMiLCJjb250cm9sLWJhci9saXZlLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci9tdXRlLXRvZ2dsZS5qcyIsImNvbnRyb2wtYmFyL3BsYXktdG9nZ2xlLmpzIiwiY29udHJvbC1iYXIvcGxheWJhY2stcmF0ZS1tZW51L3BsYXliYWNrLXJhdGUtbWVudS1idXR0b24uanMiLCJjb250cm9sLWJhci9wbGF5YmFjay1yYXRlLW1lbnUvcGxheWJhY2stcmF0ZS1tZW51LWl0ZW0uanMiLCJjb250cm9sLWJhci9wcm9ncmVzcy1jb250cm9sL2xvYWQtcHJvZ3Jlc3MtYmFyLmpzIiwiY29udHJvbC1iYXIvcHJvZ3Jlc3MtY29udHJvbC9wbGF5LXByb2dyZXNzLWJhci5qcyIsImNvbnRyb2wtYmFyL3Byb2dyZXNzLWNvbnRyb2wvcHJvZ3Jlc3MtY29udHJvbC5qcyIsImNvbnRyb2wtYmFyL3Byb2dyZXNzLWNvbnRyb2wvc2Vlay1iYXIuanMiLCJjb250cm9sLWJhci9wcm9ncmVzcy1jb250cm9sL3NlZWstaGFuZGxlLmpzIiwiY29udHJvbC1iYXIvc3BhY2VyLWNvbnRyb2xzL2N1c3RvbS1jb250cm9sLXNwYWNlci5qcyIsImNvbnRyb2wtYmFyL3NwYWNlci1jb250cm9scy9zcGFjZXIuanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL2NhcHRpb24tc2V0dGluZ3MtbWVudS1pdGVtLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy9jYXB0aW9ucy1idXR0b24uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL2NoYXB0ZXJzLWJ1dHRvbi5qcyIsImNvbnRyb2wtYmFyL3RleHQtdHJhY2stY29udHJvbHMvY2hhcHRlcnMtdHJhY2stbWVudS1pdGVtLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy9vZmYtdGV4dC10cmFjay1tZW51LWl0ZW0uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL3N1YnRpdGxlcy1idXR0b24uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL3RleHQtdHJhY2stYnV0dG9uLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyIsImNvbnRyb2wtYmFyL3RpbWUtY29udHJvbHMvY3VycmVudC10aW1lLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL2R1cmF0aW9uLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL3JlbWFpbmluZy10aW1lLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL3RpbWUtZGl2aWRlci5qcyIsImNvbnRyb2wtYmFyL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1iYXIuanMiLCJjb250cm9sLWJhci92b2x1bWUtY29udHJvbC92b2x1bWUtY29udHJvbC5qcyIsImNvbnRyb2wtYmFyL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1oYW5kbGUuanMiLCJjb250cm9sLWJhci92b2x1bWUtY29udHJvbC92b2x1bWUtbGV2ZWwuanMiLCJjb250cm9sLWJhci92b2x1bWUtbWVudS1idXR0b24uanMiLCJjb3JlLW9iamVjdC5qcyIsImNvcmUuanMiLCJlcnJvci1kaXNwbGF5LmpzIiwiZXZlbnQtZW1pdHRlci5qcyIsImV2ZW50cy5qcyIsImV4dGVuZHMuanMiLCJmdWxsc2NyZWVuLWFwaS5qcyIsImxpYi5qcyIsImxvYWRpbmctc3Bpbm5lci5qcyIsIm1lZGlhLWVycm9yLmpzIiwibWVudS9tZW51LWJ1dHRvbi5qcyIsIm1lbnUvbWVudS1pdGVtLmpzIiwibWVudS9tZW51LmpzIiwib3B0aW9ucy5qcyIsInBsYXllci5qcyIsInBsdWdpbnMuanMiLCJwb3N0ZXItaW1hZ2UuanMiLCJzZXR1cC5qcyIsInNsaWRlci9zbGlkZXItaGFuZGxlLmpzIiwic2xpZGVyL3NsaWRlci5qcyIsInRlY2gvZmxhc2gtcnRtcC5qcyIsInRlY2gvZmxhc2guanMiLCJ0ZWNoL2h0bWw1LmpzIiwidGVjaC9sb2FkZXIuanMiLCJ0ZWNoL3RlY2guanMiLCJ0cmFja3MvdGV4dC10cmFjay1jdWUtbGlzdC5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLWRpc3BsYXkuanMiLCJ0cmFja3MvdGV4dC10cmFjay1lbnVtcy5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLWxpc3QuanMiLCJ0cmFja3MvdGV4dC10cmFjay1zZXR0aW5ncy5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLmpzIiwidXRpbC5qcyIsInZpZGVvLmpzIiwieGhyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDVEE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QU87TUFBRSxLQUFLLGdDQUFDLE9BQU87c0JBQUU7QUFDaEQsUUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDakMsUUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLFFBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2QyxRQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQzs7O0FBR3BDLFFBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7OztBQUcxQyxPQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDakI7OztBQUdELEtBQUMsR0FBRyxBQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7OztBQUlyQyxLQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUEsSUFBSyxDQUFDLEdBQUcsRUFBRSxHQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUksR0FBRyxDQUFDOzs7QUFHdEQsS0FBQyxHQUFHLEFBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFM0IsV0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNsQjtDQUFBLENBQUM7OztBQUdGLElBQUksa0JBQWtCLEdBQUcsU0FBckIsa0JBQWtCLEdBQWE7QUFDakMsOEJBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RCLDhCQUFTLGFBQWEsR0FBRyxZQUFZO0FBQUUsV0FBTyxLQUFLLENBQUM7R0FBRSxDQUFDO0NBQ3hELENBQUM7O0FBRUYsSUFBSSxvQkFBb0IsR0FBRyxTQUF2QixvQkFBb0IsR0FBYTtBQUFFLDhCQUFTLGFBQWEsR0FBRyxZQUFZO0FBQUUsV0FBTyxJQUFJLENBQUM7R0FBRSxDQUFDO0NBQUUsQ0FBQzs7Ozs7Ozs7QUFRaEcsSUFBSSxJQUFJLEdBQUcsU0FBUCxJQUFJLENBQVksR0FBRyxFQUFDO0FBQ3RCLFNBQU8sQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFBLENBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztDQUMzQyxDQUFDOzs7Ozs7Ozs7QUFTRixJQUFJLEtBQUssR0FBRyxTQUFSLEtBQUssQ0FBWSxHQUFHLEVBQVM7TUFBUCxHQUFHLGdDQUFDLENBQUM7O0FBQzdCLFNBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxHQUFHLENBQUMsQ0FBQztDQUMxRCxDQUFDOzs7Ozs7Ozs7Ozs7QUFZRixJQUFJLGVBQWUsR0FBRyxTQUFsQixlQUFlLENBQVksTUFBSyxFQUFFLElBQUcsRUFBQztBQUN4QyxTQUFPO0FBQ0wsVUFBTSxFQUFFLENBQUM7QUFDVCxTQUFLLEVBQUUsaUJBQVc7QUFBRSxhQUFPLE1BQUssQ0FBQztLQUFFO0FBQ25DLE9BQUcsRUFBRSxlQUFXO0FBQUUsYUFBTyxJQUFHLENBQUM7S0FBRTtHQUNoQyxDQUFDO0NBQ0gsQ0FBQzs7Ozs7O0FBTUYsSUFBSSxlQUFlLEdBQUcsU0FBbEIsZUFBZSxDQUFZLEdBQUcsRUFBRSxLQUFLLEVBQUM7QUFDeEMsTUFBSTs7QUFFRixRQUFJLGFBQVksR0FBRywwQkFBTyxZQUFZLElBQUksS0FBSyxDQUFDO0FBQ2hELFFBQUksQ0FBQyxhQUFZLEVBQUU7QUFBRSxhQUFPO0tBQUU7QUFDOUIsaUJBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7R0FDM0IsQ0FBQyxPQUFNLENBQUMsRUFBRTtBQUNULFFBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7O0FBQ3BDLFNBQUcsQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN2QyxNQUFNO0FBQ0wsVUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRTtBQUNqQixXQUFHLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxDQUFDLENBQUM7T0FDOUMsTUFBTTtBQUNMLFdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLENBQUMsQ0FBQztPQUN4QztLQUNGO0dBQ0Y7Q0FDRixDQUFDOzs7Ozs7Ozs7QUFTRixJQUFJLGNBQWMsR0FBRyxTQUFqQixjQUFjLENBQVksR0FBRyxFQUFDOztBQUVoQyxNQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTs7QUFFOUIsT0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDcEIsZUFBUyxnQkFBYyxHQUFHLFlBQVM7S0FDcEMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7R0FDcEI7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWixDQUFDOzs7Ozs7O0FBT0YsSUFBSSxRQUFRLEdBQUcsU0FBWCxRQUFRLENBQVksR0FBRyxFQUFFO0FBQzNCLE1BQU0sS0FBSyxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7OztBQUdyRixNQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Ozs7O0FBS3JDLE1BQUksU0FBUyxHQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxBQUFDLENBQUM7QUFDMUQsTUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLE1BQUksU0FBUyxFQUFFO0FBQ2IsT0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QixPQUFHLENBQUMsU0FBUyxpQkFBZSxHQUFHLFdBQVEsQ0FBQztBQUN4QyxLQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQzs7QUFFbkIsT0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztBQUM5RCxnQ0FBUyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2hDOzs7OztBQUtELE1BQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNyQyxXQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ2pDOzs7O0FBSUQsTUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtBQUNoQyxXQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNqRDtBQUNELE1BQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7QUFDakMsV0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbEQ7O0FBRUQsTUFBSSxTQUFTLEVBQUU7QUFDYixnQ0FBUyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2hDOztBQUVELFNBQU8sT0FBTyxDQUFDO0NBQ2hCLENBQUM7Ozs7Ozs7OztBQVNGLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUM7O0FBRTNCLE1BQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7QUFLakQsTUFBSSxJQUFJLEdBQUcsU0FBUCxJQUFJLEdBQWEsRUFBRSxDQUFDOztBQUV4QixNQUFJLE9BQU8sR0FBRywwQkFBTyxTQUFTLENBQUMsSUFBSTtBQUNqQyxTQUFLLEVBQUUsSUFBSTtBQUNYLFVBQU0sRUFBRSxJQUFJO0FBQ1osV0FBTyxFQUFFLElBQUk7R0FDZCxDQUFDOztBQUVGLE1BQUksSUFBSSxFQUFFOztBQUVSLGFBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzNDLE1BQU07O0FBRUwsUUFBSSxHQUFHLEtBQUssQ0FBQztHQUNkOzs7QUFHRCxLQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0FBRzVCLFdBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7OztBQUc5QixNQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUU7QUFDdkIsV0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDekMsTUFBTTs7QUFFTCxXQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQ3BDO0NBQ0Y7Ozs7O0FBS0QsSUFBSSxHQUFHLEdBQUcsU0FBTixHQUFHLEdBQWE7QUFDbEIsVUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztDQUMzQixDQUFDOzs7Ozs7QUFNRixHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7Ozs7QUFLakIsR0FBRyxDQUFDLEtBQUssR0FBRyxZQUFVO0FBQ3BCLFVBQVEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDOUIsQ0FBQzs7Ozs7QUFLRixHQUFHLENBQUMsSUFBSSxHQUFHLFlBQVU7QUFDbkIsVUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztDQUM3QixDQUFDOzs7O0FBSUYsSUFBSSxZQUFZLEdBQUcsU0FBZixZQUFZLENBQVksRUFBRSxFQUFFO0FBQzlCLE1BQUksR0FBRyxZQUFBLENBQUM7O0FBRVIsTUFBSSxFQUFFLENBQUMscUJBQXFCLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRTtBQUM3QyxPQUFHLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7R0FDbEM7O0FBRUQsTUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLFdBQU87QUFDTCxVQUFJLEVBQUUsQ0FBQztBQUNQLFNBQUcsRUFBRSxDQUFDO0tBQ1AsQ0FBQztHQUNIOztBQUVELE1BQU0sS0FBSyxHQUFHLDRCQUFTLGVBQWUsQ0FBQztBQUN2QyxNQUFNLElBQUksR0FBRyw0QkFBUyxJQUFJLENBQUM7O0FBRTNCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUM7QUFDNUQsTUFBTSxVQUFVLEdBQUcsMEJBQU8sV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDekQsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsVUFBVSxDQUFDOztBQUVoRCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO0FBQ3pELE1BQU0sU0FBUyxHQUFHLDBCQUFPLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3ZELE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQzs7O0FBRzVDLFNBQU87QUFDTCxRQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztBQUNqQixPQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQztHQUNoQixDQUFDO0NBQ0gsQ0FBQzs7Ozs7OztBQU9GLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQzs7Ozs7Ozs7OztBQVViLEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUMvQyxTQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQzs7QUFFMUIsTUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFFBQVEsWUFBWSxRQUFRLEVBQUU7QUFDdEQsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNoRCxjQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzVDO0dBQ0Y7O0FBRUQsU0FBTyxLQUFLLENBQUM7Q0FDZCxDQUFDOzs7Ozs7OztBQVFGLElBQUksZ0JBQWdCLEdBQUcsU0FBbkIsZ0JBQWdCLENBQVksSUFBSSxFQUFFO0FBQ3BDLE1BQUcsT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFDO0FBQzFCLFFBQUksV0FBVyxHQUFHLHlFQUF5RSxDQUFDO0FBQzVGLFFBQUksU0FBUyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXZDLFFBQUksU0FBUyxFQUFFO0FBQ2IsYUFBTyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdEM7R0FDRjs7QUFFRCxTQUFPLEVBQUUsQ0FBQztDQUNYLENBQUM7O1FBR0EsUUFBUSxHQUFSLFFBQVE7UUFDUixVQUFVLEdBQVYsVUFBVTtRQUNWLEdBQUcsR0FBSCxHQUFHO1FBQ0gsS0FBSyxHQUFMLEtBQUs7UUFDTCxJQUFJLEdBQUosSUFBSTtRQUNKLEtBQUssR0FBTCxLQUFLO1FBQ0wsSUFBSSxHQUFKLElBQUk7UUFDSixPQUFPLEdBQVAsT0FBTztRQUNQLE9BQU8sR0FBUCxPQUFPO1FBQ1AsT0FBTyxHQUFQLE9BQU87UUFDUCxVQUFVLEdBQVYsVUFBVTtRQUNWLE9BQU8sR0FBUCxPQUFPO1FBQ1AsUUFBUSxHQUFSLFFBQVE7UUFDUixRQUFRLEdBQVIsUUFBUTtRQUNSLFdBQVcsR0FBWCxXQUFXO1FBQ1gsUUFBUSxHQUFSLFFBQVE7UUFDUixVQUFVLEdBQVYsVUFBVTtRQUNWLFNBQVMsR0FBVCxTQUFTO1FBQ1QsT0FBTyxHQUFQLE9BQU87UUFDUCxPQUFPLEdBQVAsT0FBTztRQUNQLE1BQU0sR0FBTixNQUFNO1FBQ04sV0FBVyxHQUFYLFdBQVc7UUFDWCxVQUFVLEdBQVYsVUFBVTtRQUNWLGVBQWUsR0FBZixlQUFlO1FBQ2YsY0FBYyxHQUFkLGNBQWM7UUFDZCxVQUFVLEdBQVYsVUFBVTtRQUNWLE1BQU0sR0FBTixNQUFNO1FBQ04sU0FBUyxHQUFULFNBQVM7UUFDVCxhQUFhLEdBQWIsYUFBYTtRQUNiLHlCQUF5QixHQUF6Qix5QkFBeUI7UUFDekIsb0JBQW9CLEdBQXBCLG9CQUFvQjtRQUNwQixvQkFBb0IsR0FBcEIsb0JBQW9CO1FBQ3BCLG9CQUFvQixHQUFwQixvQkFBb0I7UUFDcEIsV0FBVyxHQUFYLFdBQVc7UUFDWCxPQUFPLEdBQVAsT0FBTztRQUNQLEVBQUUsR0FBRixFQUFFO1FBQ0YsVUFBVSxHQUFWLFVBQVU7UUFDVixrQkFBa0IsR0FBbEIsa0JBQWtCO1FBQ2xCLG9CQUFvQixHQUFwQixvQkFBb0I7UUFDcEIsSUFBSSxHQUFKLElBQUk7UUFDSixLQUFLLEdBQUwsS0FBSztRQUNMLGVBQWUsR0FBZixlQUFlO1FBQ2YsZUFBZSxHQUFmLGVBQWU7UUFDZixjQUFjLEdBQWQsY0FBYztRQUNkLFFBQVEsR0FBUixRQUFRO1FBQ1IsR0FBRyxHQUFILEdBQUc7UUFDSCxZQUFZLEdBQVosWUFBWTtRQUNaLEdBQUcsR0FBSCxHQUFHO1FBQ0gsZ0JBQWdCLEdBQWhCLGdCQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQ240QkksYUFBYTs7Ozs7Ozs7Ozs7Ozs7SUFXN0IsY0FBYztXQUFkLGNBQWM7MEJBQWQsY0FBYzs7Ozs7OztZQUFkLGNBQWM7O2VBQWQsY0FBYzs7V0FDVixvQkFBRztBQUNULHdDQUZFLGNBQWMsMENBRU0sS0FBSyxFQUFFO0FBQzNCLGlCQUFTLEVBQUUscUJBQXFCO09BQ2pDLEVBQUU7S0FDSjs7O1NBTEcsY0FBYzs7O0FBUXBCLHVCQUFVLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxDQUFDO3FCQUMvQyxjQUFjOzs7Ozs7Ozs7Ozs7bUJDcEJSLE9BQU87O0lBQWhCLEdBQUc7Ozs7OztBQU1mLElBQUksVUFBVSxHQUFHLFNBQWIsVUFBVSxDQUFZLElBQUksRUFBQztBQUM3QixNQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUM1QixRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztHQUNsQixNQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFOztBQUVuQyxRQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztHQUNyQixNQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFOztBQUNuQyxPQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsTUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDakIsUUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDNUQ7Q0FDRixDQUFDOzs7Ozs7O0FBT0YsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7OztBQVE5QixVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Ozs7Ozs7Ozs7O0FBV2xDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzs7QUFFbkMsVUFBVSxDQUFDLFVBQVUsR0FBRyxDQUN0QixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsNkJBQTZCO0FBQzdCLHFCQUFxQjtDQUN0QixDQUFDOztBQUVGLFVBQVUsQ0FBQyxlQUFlLEdBQUc7QUFDM0IsR0FBQyxFQUFFLGdDQUFnQztBQUNuQyxHQUFDLEVBQUUsNkRBQTZEO0FBQ2hFLEdBQUMsRUFBRSw2SEFBNkg7QUFDaEksR0FBQyxFQUFFLG9IQUFvSDtBQUN2SCxHQUFDLEVBQUUsbUVBQW1FO0NBQ3ZFLENBQUM7Ozs7QUFJRixLQUFLLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUU7QUFDcEUsWUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7O0FBRW5ELFlBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztDQUM5RDs7cUJBRWMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQ3hFTixjQUFjOzs7O3NCQUNoQixXQUFXOzs7O3FCQUNQLFdBQVc7O0lBQXBCLEdBQUc7Ozs7Ozs7OztJQVFULFVBQVU7QUFFSCxXQUZQLFVBQVUsQ0FFRixNQUFNLEVBQUUsT0FBTyxFQUFDOzBCQUZ4QixVQUFVOztBQUdaLCtCQUhFLFVBQVUsNkNBR04sTUFBTSxFQUFFLE9BQU8sRUFBRTs7QUFFdkIsUUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUVkLFFBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4QyxRQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0MsUUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQ3pDOztZQVZHLFVBQVU7O2VBQVYsVUFBVTs7V0FZUixrQkFBRztBQUNQLFVBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7QUFFN0IsVUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2IsWUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDN0I7O0FBRUQsVUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDakIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7OztBQU9wQixVQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQzs7QUFFNUIsVUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUN6QyxZQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDYixNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDOUMsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2I7S0FDRjs7O1dBRVMsc0JBQUc7QUFDWCxVQUFJLElBQUksR0FBRyx3QkFBUyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7OztBQUdsQyxVQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUU7QUFDeEIsWUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtBQUM5QyxtQkFBUyxFQUFFLGdCQUFnQjtBQUMzQixtQkFBUyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztBQUMvQyxrQkFBUSxFQUFFLENBQUMsQ0FBQztTQUNiLENBQUMsQ0FBQyxDQUFDO09BQ0w7O0FBRUQsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQzs7QUFFbkMsVUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFOztBQUVkLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjtPQUNGOztBQUVELGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7V0FLVSx1QkFBRSxFQUFFOzs7OztXQUdGLHlCQUFHO0FBQ2Qsa0JBQVUsSUFBSSxDQUFDLFNBQVMsb0RBbkV0QixVQUFVLCtDQW1Fd0Q7S0FDckU7Ozs7Ozs7O1dBTVUsdUJBQUcsRUFBRTs7Ozs7V0FHTixzQkFBRyxFQUFFOzs7V0FFSix1QkFBRzs7OztBQUlaLFVBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVU7QUFDNUMsWUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMxQixZQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2pCLENBQUMsQ0FBQyxDQUFDO0FBQ0osVUFBSSxJQUFJLENBQUMsY0FBYyxFQUFDO0FBQ3RCLFlBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztPQUN0QixNQUFNO0FBQ0wsWUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO09BQ3BCO0tBQ0Y7OztXQUVhLHdCQUFDLEtBQUssRUFBRTs7O0FBR3BCLFVBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDNUMsWUFBSSxJQUFJLENBQUMsY0FBYyxFQUFDO0FBQ3RCLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QixNQUFNO0FBQ0wsY0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO0FBQ0QsYUFBSyxDQUFDLGNBQWMsRUFBRSxDQUFDOztPQUV4QixNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUM7QUFDNUIsWUFBSSxJQUFJLENBQUMsY0FBYyxFQUFDO0FBQ3RCLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtBQUNELGFBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztPQUN4QjtLQUNGOzs7V0FFVSx1QkFBRztBQUNaLFVBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzNCLFVBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDeEIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVDLFVBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDdkMsWUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztPQUM1QjtLQUNGOzs7V0FFWSx5QkFBRztBQUNkLFVBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFVBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDMUIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzlDOzs7U0E5SEcsVUFBVTs7O0FBaUloQixzQkFBTyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7cUJBQ3BDLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkM1SU4sY0FBYzs7OztxQkFDWixXQUFXOztJQUFwQixHQUFHOzs7Ozs7Ozs7OztJQVVULFFBQVE7QUFFRCxXQUZQLFFBQVEsQ0FFQSxNQUFNLEVBQUUsT0FBTyxFQUFFOzBCQUZ6QixRQUFROztBQUdWLCtCQUhFLFFBQVEsNkNBR0osTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUN2QixRQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0dBQ3BDOztZQUxHLFFBQVE7O2VBQVIsUUFBUTs7OztXQVFKLGtCQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDcEIsd0NBVEUsUUFBUSwwQ0FTWSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDeEMsaUJBQVMsRUFBRSxlQUFlO0FBQzFCLGlCQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQ2pELEVBQUUsS0FBSyxDQUFDLEVBQUU7S0FDWjs7Ozs7OztXQUtVLHVCQUFHO0FBQ1osVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyQjs7Ozs7Ozs7V0FNTyxrQkFBQyxTQUFRLEVBQUU7QUFDakIsVUFBSSxTQUFRLEVBQUU7QUFDWixZQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzlCLFlBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBQyxJQUFJLENBQUMsQ0FBQztPQUM3QyxNQUFNO0FBQ0wsWUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNqQyxZQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUMsS0FBSyxDQUFDLENBQUM7T0FDOUM7S0FDRjs7O1NBbENHLFFBQVE7OztBQXNDZCxzQkFBTyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7cUJBQ2hDLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkNsREQsaUJBQWlCOzs7O3FCQUNsQixXQUFXOztJQUFwQixHQUFHOzt3QkFDUyxjQUFjOztJQUExQixNQUFNOzs7Ozs7Ozs7Ozs7OztJQWFaLElBQUk7V0FBSixJQUFJOzBCQUFKLElBQUk7Ozs7Ozs7WUFBSixJQUFJOztlQUFKLElBQUk7Ozs7Ozs7V0FNRCxpQkFBQyxTQUFTLEVBQUU7QUFDakIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QixlQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFVO0FBQzdDLFlBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztPQUN0QixDQUFDLENBQUMsQ0FBQztLQUNMOzs7V0FFTyxvQkFBRztBQUNULFVBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDO0FBQ3pELFVBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDNUMsaUJBQVMsRUFBRSxrQkFBa0I7T0FDOUIsQ0FBQyxDQUFDO0FBQ0gsVUFBSSxFQUFFLDhCQWxCSixJQUFJLDBDQWtCa0IsS0FBSyxFQUFFO0FBQzdCLGNBQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtBQUN2QixpQkFBUyxFQUFFLFVBQVU7T0FDdEIsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7QUFJaEMsWUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVMsS0FBSyxFQUFDO0FBQ3BDLGFBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN2QixhQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztPQUNsQyxDQUFDLENBQUM7O0FBRUgsYUFBTyxFQUFFLENBQUM7S0FDWDs7O1NBaENHLElBQUk7OztBQW1DVix5QkFBVSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7cUJBQzNCLElBQUk7Ozs7Ozs7Ozs7Ozs4QkNuREUsaUJBQWlCOzs7OzRCQUNuQixlQUFlOzs7O0FBQ2xDLElBQUksU0FBUyxHQUFHLDBCQUFPLFNBQVMsQ0FBQzs7Ozs7Ozs7O3FCQVNsQjs7QUFFYixhQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUMsT0FBTyxDQUFDOzs7QUFHOUIsU0FBTyxFQUFFLEVBQUU7QUFDWCxTQUFPLEVBQUUsRUFBRTs7O0FBR1gsU0FBTyxFQUFFLEdBQUc7QUFDWixVQUFRLEVBQUUsR0FBRzs7QUFFYixpQkFBZSxFQUFFLENBQUk7OztBQUdyQixxQkFBbUIsRUFBRSxJQUFJOzs7QUFHekIsaUJBQWUsRUFBRSxFQUFFOzs7OztBQUtuQixZQUFVLEVBQUU7QUFDVixpQkFBYSxFQUFFLEVBQUU7QUFDakIsaUJBQWEsRUFBRSxFQUFFO0FBQ2pCLHNCQUFrQixFQUFFLEVBQUU7QUFDdEIsb0JBQWdCLEVBQUUsRUFBRTtBQUNwQixtQkFBZSxFQUFFLEVBQUU7QUFDbkIsZ0JBQVksRUFBRSxFQUFFO0FBQ2hCLGtCQUFjLEVBQUUsRUFBRTtBQUNsQix1QkFBbUIsRUFBRSxFQUFFO0dBQ3hCOztBQUVELFlBQVUsRUFBRSw0QkFBUyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLFFBQVEsSUFBSSxJQUFJOzs7QUFHbEwsYUFBVyxFQUFFLEVBQUU7OztBQUdmLHVCQUFxQixFQUFFLGdEQUFnRDtDQUN4RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJDcERxQixnQkFBZ0I7Ozs7cUJBQ2pCLFVBQVU7O0lBQW5CLEdBQUc7O3dCQUNTLGFBQWE7O0lBQXpCLE1BQU07OytCQUNRLHFCQUFxQjs7Ozs0QkFDeEIsa0JBQWtCOzs7O3lCQUNyQixjQUFjOzs7O2tDQUNQLHVCQUF1Qjs7Ozs0QkFDL0IsZUFBZTs7Ozs4QkFDYixpQkFBaUI7Ozs7Ozs0QkFHZCxrQkFBa0I7Ozs7NkJBQ3ZCLG1CQUFtQjs7Ozt3Q0FDVCxnQ0FBZ0M7Ozs7Z0NBQ2xDLHNCQUFzQjs7OzsrQkFDdkIsc0JBQXNCOzs7O3NDQUN6Qiw4QkFBOEI7Ozs7OEJBQzVCLG9CQUFvQjs7Ozt5Q0FDZixpQ0FBaUM7Ozs7OzsyQkFFN0MsaUJBQWlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBc0I3QixNQUFNOzs7Ozs7Ozs7Ozs7QUFXQyxXQVhQLE1BQU0sQ0FXRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQzswQkFYNUIsTUFBTTs7O0FBYVIsT0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxtQkFBaUIsR0FBRyxDQUFDLElBQUksRUFBRSxBQUFFLENBQUM7Ozs7Ozs7QUFPN0MsV0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Ozs7QUFJN0QsV0FBTyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7OztBQUc3QixXQUFPLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzs7OztBQUl6QixXQUFPLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDOzs7QUFHcEMsK0JBbENFLE1BQU0sNkNBa0NGLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFOzs7O0FBSzVCLFFBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUNkLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQ3hCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO0FBQ25DLFlBQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLEdBQzVDLCtDQUErQyxHQUMvQyxrQ0FBa0MsQ0FBQyxDQUFDO0tBQ3JEOztBQUVELFFBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOzs7QUFHZixRQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7OztBQUcxRCxRQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSx1QkFBUSxVQUFVLENBQUMsQ0FBQzs7O0FBRzVELFFBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLHVCQUFRLFdBQVcsQ0FBQyxDQUFDOzs7QUFHL0QsUUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7OztBQUdqQixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7OztBQUd2QyxRQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7QUFJdkMsT0FBRyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7QUFPckIsUUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7O0FBRXhCLFFBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDOzs7QUFHM0IsUUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDdEIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBQztBQUNqRCxZQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDaEIsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNWOztBQUVELFFBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7O0FBR3BCLFFBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQzs7OztBQUlyRCxRQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtBQUNuQixVQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDdkMsTUFBTTtBQUNMLFVBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUN4Qzs7QUFFRCxRQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtBQUNsQixVQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzVCOztBQUVELFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7QUFDNUIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUM5Qjs7Ozs7Ozs7O0FBU0QsVUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDOzs7O0FBSWhDLFFBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQzFCLFFBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDOztBQUU3QixRQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pELFFBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0dBQzlDOztZQTdIRyxNQUFNOztlQUFOLE1BQU07Ozs7Ozs7Ozs7O1dBdUlILG1CQUFHO0FBQ1IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFeEIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0FBR3BCLFlBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNoQyxVQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUFFLFlBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO09BQUU7QUFDbEUsVUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFBRSxZQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztPQUFFOztBQUVsRSxVQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFBRSxZQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO09BQUU7O0FBRXZDLGlDQW5KRSxNQUFNLHlDQW1KUTtLQUNqQjs7O1dBRU8sb0JBQUc7QUFDVCxVQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyw4QkF2SmYsTUFBTSwwQ0F1SjJCLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFVBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7OztBQUduQixTQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLFNBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7QUFJOUIsVUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFNBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFTLElBQUksRUFBRTs7O0FBR2pDLFlBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtBQUNwQixZQUFFLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QixNQUFNO0FBQ0wsWUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDcEM7T0FDRixDQUFDLENBQUM7Ozs7O0FBS0gsU0FBRyxDQUFDLEVBQUUsSUFBSSxZQUFZLENBQUM7QUFDdkIsU0FBRyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7OztBQUczQixTQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQzs7QUFFcEMsVUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7OztBQUk1QixVQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDOzs7O0FBSTNDLFNBQUcsQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDOzs7QUFHekMsVUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFO0FBQ2xCLFdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztPQUN0QztBQUNELFNBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDOztBQUV6QixVQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7QUFFZCxhQUFPLEVBQUUsQ0FBQztLQUNYOzs7Ozs7Ozs7V0FPTyxrQkFBQyxRQUFRLEVBQUUsTUFBTSxFQUFFOzs7QUFHekIsVUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2IsWUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO09BQ25COzs7QUFHRCxVQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNwQyxpQ0FBVSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlELFlBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUN2QixZQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztPQUNqQjs7QUFFRCxVQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzs7O0FBR3pCLFVBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDOztBQUV0QixVQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFXO0FBQ3hDLFlBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztPQUNyQixDQUFDLENBQUM7OztBQUdILFVBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQzlCLGdCQUFRLEVBQUUsTUFBTTtBQUNoQixrQkFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDckIsb0JBQVksRUFBRSxJQUFJLENBQUMsV0FBVztPQUMvQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFMUMsVUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1osbUJBQVcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztPQUM1Qjs7QUFFRCxVQUFJLE1BQU0sRUFBRTtBQUNWLFlBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNoQyxZQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFFO0FBQ2pFLHFCQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7U0FDcEQ7O0FBRUQsWUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztPQUM5Qjs7O0FBR0QsVUFBSSxhQUFhLEdBQUcseUJBQVUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELFVBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRTNDLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQzs7O0FBRzFFLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN0RCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3RELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUNwRSxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3RELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdEQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoRCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDeEQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN4RSxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsRCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3RELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdEQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN0RCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDcEUsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2hFLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM1RCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDaEUsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUU5RCxVQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO0FBQ2xELFlBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO09BQ2pDOzs7O0FBSUQsVUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUEsQUFBQyxFQUFFO0FBQ2xGLFdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztPQUM1Qzs7O0FBR0QsVUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1osWUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLFlBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO09BQ2pCOztBQUVELFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzVCOzs7V0FFUyxzQkFBRzs7QUFFWCxVQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7QUFFckMsVUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7O0FBRXRCLFVBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBRXBCLFVBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ25COzs7V0FFdUIsb0NBQUc7Ozs7O0FBS3pCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzs7OztBQUt0RCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUQsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7O0FBR3hELFVBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Ozs7QUFJMUIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDL0M7Ozs7Ozs7O1dBTTBCLHVDQUFHOzs7QUFHNUIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0MsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM3RCxVQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzNELFVBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDekQsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDeEQ7Ozs7Ozs7O1dBTWMsMkJBQUc7QUFDaEIsVUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzs7Ozs7QUFNcEIsVUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtBQUN2RCxlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiO0tBQ0Y7Ozs7Ozs7O1dBTTBCLHVDQUFHO0FBQzVCLFVBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNoQzs7Ozs7Ozs7V0FNa0IsK0JBQUc7OztBQUdwQixVQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7QUFHOUIsVUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7QUFLakIsVUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtBQUNsQixZQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFCLFlBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDM0IsTUFBTTs7QUFFTCxZQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZCLFlBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDM0I7S0FDRjs7O1dBRVMsb0JBQUMsV0FBVSxFQUFFO0FBQ3JCLFVBQUksV0FBVSxLQUFLLFNBQVMsRUFBRTs7QUFFNUIsWUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFdBQVUsRUFBRTtBQUNuQyxjQUFJLENBQUMsV0FBVyxHQUFHLFdBQVUsQ0FBQztBQUM5QixjQUFJLFdBQVUsRUFBRTtBQUNkLGdCQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRWpDLGdCQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1dBQzNCLE1BQU07QUFDTCxnQkFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1dBQ3JDO1NBQ0Y7QUFDRCxlQUFPLElBQUksQ0FBQztPQUNiO0FBQ0QsYUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUMzQjs7Ozs7Ozs7V0FNYSwwQkFBRztBQUNmLFVBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUIsVUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMvQixVQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7O0FBSTdCLFVBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXRCLFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdEI7Ozs7Ozs7O1dBTWdCLDZCQUFHO0FBQ2xCLFVBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6Qjs7Ozs7Ozs7O1dBT2dCLDZCQUFHO0FBQ2xCLFVBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6Qjs7Ozs7Ozs7O1dBT3VCLG9DQUFHO0FBQ3pCLFVBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ2hDOzs7Ozs7Ozs7V0FPZ0IsNkJBQUc7QUFDbEIsVUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoQyxVQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3pCOzs7Ozs7OztXQU1nQiw2QkFBRztBQUNsQixVQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdCLFVBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDekI7Ozs7Ozs7O1dBTWUsNEJBQUc7QUFDakIsVUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoQyxVQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3hCOzs7Ozs7Ozs7Ozs7O1dBV2tCLCtCQUFHOzs7QUFHcEIsVUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFDO0FBQzVCLFlBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO09BQzlDOztBQUVELFVBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNqQyxVQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzNCOzs7Ozs7OztXQU1jLDJCQUFHO0FBQ2hCLFVBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM1QixVQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZCOzs7Ozs7OztXQU1pQiw4QkFBRztBQUNuQixVQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7QUFHekIsVUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ2hDLFlBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7T0FDL0I7S0FDRjs7Ozs7Ozs7V0FNYywyQkFBRztBQUNoQixVQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNCLFVBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN6QixZQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtBQUN6QixZQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7T0FDZDs7QUFFRCxVQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZCOzs7Ozs7OztXQU11QixvQ0FBRztBQUN6QixVQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDdEIsVUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ2hDOzs7Ozs7O1dBS2MseUJBQUMsS0FBSyxFQUFFOzs7QUFHckIsVUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxPQUFPOzs7O0FBSS9CLFVBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO0FBQ25CLFlBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO0FBQ2pCLGNBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiLE1BQU07QUFDTCxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtPQUNGO0tBQ0Y7Ozs7Ozs7O1dBTVkseUJBQUc7QUFDZCxVQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7S0FDckM7OztXQUVtQixnQ0FBRztBQUNyQixVQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUN4Qzs7O1dBRWtCLCtCQUFHO0FBQ3BCLFVBQUksSUFBSSxDQUFDLGFBQWEsRUFBQztBQUNyQixZQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztPQUMzQjtLQUNGOzs7V0FFaUIsNEJBQUMsS0FBSyxFQUFFOztBQUV4QixXQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDeEI7Ozs7Ozs7O1dBTWEsMEJBQUc7Ozs7QUFJZixVQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3hDLFVBQUksUUFBUSxFQUFFO0FBQ1osWUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO0FBQ2hCLGtCQUFRLEdBQUcsUUFBUSxDQUFDO1NBQ3JCO0FBQ0QsWUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEIsWUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQ3pCLGNBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0IsTUFBTTtBQUNMLGNBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDOUI7T0FDRjtLQUNGOzs7Ozs7OztXQU1xQixrQ0FBRztBQUN2QixVQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRTtBQUN2QixZQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7T0FDakMsTUFBTTtBQUNMLFlBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztPQUNwQztLQUNGOzs7Ozs7Ozs7V0FPZSw0QkFBRztBQUNqQixVQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztLQUMzQjs7O1dBRXlCLHNDQUFHO0FBQzNCLFVBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUNsQzs7Ozs7Ozs7V0FNYywyQkFBRztBQUNoQixVQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEM7Ozs7Ozs7O1dBTWdCLDZCQUFHO0FBQ2xCLFVBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDekI7Ozs7Ozs7O1dBTWMsMkJBQUc7QUFDaEIsVUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN2Qjs7Ozs7Ozs7V0FNZ0IsNkJBQUc7QUFDbEIsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6Qjs7Ozs7Ozs7V0FNZ0IsNkJBQUc7QUFDbEIsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6Qjs7Ozs7Ozs7V0FNdUIsb0NBQUc7QUFDekIsVUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ2hDOzs7Ozs7Ozs7OztXQVNtQixnQ0FBRztBQUNyQixVQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDaEM7Ozs7Ozs7O1dBTW1CLGdDQUFHO0FBQ3JCLFVBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUI7Ozs7Ozs7O1dBTW1CLGdDQUFHO0FBQ3JCLFVBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUI7Ozs7Ozs7O1dBTW1CLGdDQUFHO0FBQ3JCLFVBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUI7Ozs7Ozs7O1dBTXFCLGtDQUFHO0FBQ3ZCLFVBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDOUI7Ozs7Ozs7O1dBTWdCLDZCQUFHO0FBQ2xCLFVBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUNqQzs7Ozs7OztXQUtPLG9CQUFHO0FBQ1QsYUFBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ3BCOzs7OztXQUdPLGtCQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7O0FBRXBCLFVBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3BDLFlBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVU7QUFDeEIsY0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CLENBQUMsQ0FBQzs7O09BR0osTUFBTTtBQUNMLFlBQUk7QUFDRixjQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCLENBQUMsT0FBTSxDQUFDLEVBQUU7QUFDVCxhQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1gsZ0JBQU0sQ0FBQyxDQUFDO1NBQ1Q7T0FDRjtLQUNGOzs7OztXQUdNLGlCQUFDLE1BQU0sRUFBRTtBQUNkLFVBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTs7Ozs7QUFLbkMsWUFBSTtBQUNGLGlCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztTQUM1QixDQUFDLE9BQU0sQ0FBQyxFQUFFOztBQUVULGNBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDbkMsZUFBRyxDQUFDLEdBQUcsZ0JBQWMsTUFBTSxnQ0FBMkIsSUFBSSxDQUFDLFFBQVEsNEJBQXlCLENBQUMsQ0FBQyxDQUFDO1dBQ2hHLE1BQU07O0FBRUwsZ0JBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7QUFDMUIsaUJBQUcsQ0FBQyxHQUFHLGdCQUFjLE1BQU0sd0JBQW1CLElBQUksQ0FBQyxRQUFRLG9DQUFpQyxDQUFDLENBQUMsQ0FBQztBQUMvRixrQkFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2FBQzVCLE1BQU07QUFDTCxpQkFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNaO1dBQ0Y7QUFDRCxnQkFBTSxDQUFDLENBQUM7U0FDVDtPQUNGOztBQUVELGFBQU87S0FDUjs7Ozs7Ozs7Ozs7V0FTRyxnQkFBRztBQUNMLFVBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEIsYUFBTyxJQUFJLENBQUM7S0FDYjs7Ozs7Ozs7Ozs7V0FTSSxpQkFBRztBQUNOLFVBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkIsYUFBTyxJQUFJLENBQUM7S0FDYjs7Ozs7Ozs7Ozs7O1dBVUssa0JBQUc7O0FBRVAsYUFBTyxBQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxHQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDMUQ7Ozs7Ozs7Ozs7O1dBU1EsbUJBQUMsV0FBVyxFQUFFO0FBQ3JCLFVBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUM3QixZQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUM7O0FBRWhDLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNoQyxNQUFNO0FBQ0wsY0FBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNuQzs7QUFFRCxlQUFPLElBQUksQ0FBQztPQUNiOztBQUVELGFBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUN4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FlVSxxQkFBQyxPQUFPLEVBQUU7QUFDbkIsVUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFOztBQUV6QixZQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDOztBQUV6QyxlQUFPLElBQUksQ0FBQztPQUNiOzs7Ozs7OztBQVFELGFBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEFBQUMsQ0FBQztLQUNyRTs7Ozs7Ozs7Ozs7Ozs7O1dBYU8sa0JBQUMsT0FBTyxFQUFFO0FBQ2hCLFVBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTs7O0FBR3pCLFlBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFM0MsZUFBTyxJQUFJLENBQUM7T0FDYjs7QUFFRCxVQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUN0QyxZQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7T0FDdkI7O0FBRUQsYUFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUM7S0FDbEM7Ozs7Ozs7Ozs7OztXQVVZLHlCQUFHO0FBQ2QsYUFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQzdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBMEJPLG9CQUFHO0FBQ1QsVUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFeEMsVUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDakMsZ0JBQVEsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztPQUNyQzs7QUFFRCxhQUFPLFFBQVEsQ0FBQztLQUNqQjs7Ozs7Ozs7Ozs7Ozs7V0FZYywyQkFBRztBQUNoQixVQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFO1VBQzFCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFO1VBQzFCLGdCQUFnQixHQUFHLENBQUM7VUFDcEIsS0FBSztVQUFFLEdBQUcsQ0FBQzs7QUFFZixVQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2IsZUFBTyxDQUFDLENBQUM7T0FDVjs7QUFFRCxXQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztBQUNuQyxhQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixXQUFHLEdBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3hCLFlBQUksR0FBRyxHQUFHLFFBQVEsRUFBRTtBQUNsQixhQUFHLEdBQUcsUUFBUSxDQUFDO1NBQ2hCOztBQUVELHdCQUFnQixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7T0FDakM7O0FBRUQsYUFBTyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7S0FDcEM7Ozs7Ozs7Ozs7V0FRVSx1QkFBRztBQUNaLFVBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7VUFDMUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7VUFDMUIsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFMUMsVUFBSSxHQUFHLEdBQUcsUUFBUSxFQUFFO0FBQ2xCLFdBQUcsR0FBRyxRQUFRLENBQUM7T0FDaEI7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWlCSyxnQkFBQyxnQkFBZ0IsRUFBRTtBQUN2QixVQUFJLEdBQUcsWUFBQSxDQUFDOztBQUVSLFVBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO0FBQ2xDLFdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0QsWUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLGVBQU8sSUFBSSxDQUFDO09BQ2I7OztBQUdELFNBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLGFBQU8sQUFBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUMvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FnQkksZUFBQyxNQUFLLEVBQUU7QUFDWCxVQUFJLE1BQUssS0FBSyxTQUFTLEVBQUU7QUFDdkIsWUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBSyxDQUFDLENBQUM7QUFDakMsZUFBTyxJQUFJLENBQUM7T0FDYjtBQUNELGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUM7S0FDdkM7Ozs7OztXQUlpQiw4QkFBRztBQUNuQixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxLQUFLLENBQUM7S0FDcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQW1CVyxzQkFBQyxJQUFJLEVBQUU7QUFDakIsVUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3RCLFlBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM1QixlQUFPLElBQUksQ0FBQztPQUNiO0FBQ0QsYUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztLQUM3Qjs7Ozs7Ozs7V0FNVyxzQkFBQyxJQUFJLEVBQUU7QUFDakIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEZBQTRGLENBQUMsQ0FBQztBQUMzRyxhQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWdCZ0IsNkJBQUc7QUFDbEIsVUFBSSxLQUFLLCtCQUFnQixDQUFDOztBQUUxQixVQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUV4QixVQUFJLEtBQUssRUFBRTs7Ozs7Ozs7O0FBU1QsY0FBTSxDQUFDLEVBQUUsOEJBQVcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyx3QkFBd0IsQ0FBQyxDQUFDLEVBQUM7QUFDaEcsY0FBSSxDQUFDLFlBQVksQ0FBQyw0QkFBUyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDOzs7QUFHckQsY0FBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssS0FBSyxFQUFFO0FBQ2pDLGtCQUFNLENBQUMsR0FBRyw4QkFBVyxLQUFLLENBQUMsa0JBQWtCLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1dBQzNFOztBQUVELGNBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNsQyxDQUFDLENBQUMsQ0FBQzs7QUFFSixZQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7T0FFckMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsRUFBRTs7O0FBR3pDLFlBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztPQUNsQyxNQUFNOzs7QUFHTCxZQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDdkIsWUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO09BQ2xDOztBQUVELGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7O1dBTWdCLDZCQUFHO0FBQ2xCLFNBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNHQUFzRyxDQUFDLENBQUM7QUFDckgsYUFBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUNqQzs7Ozs7Ozs7Ozs7V0FTYSwwQkFBRztBQUNmLFVBQUksS0FBSywrQkFBZ0IsQ0FBQztBQUMxQixVQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7QUFHekIsVUFBSSxLQUFLLEVBQUU7QUFDVCxvQ0FBUyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztPQUNsQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFO0FBQzFDLFlBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztPQUNoQyxNQUFNO0FBQ04sWUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3RCLFlBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztPQUNqQzs7QUFFRCxhQUFPLElBQUksQ0FBQztLQUNiOzs7Ozs7OztXQU1lLDRCQUFHO0FBQ2pCLFNBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLDRFQUE0RSxDQUFDLENBQUM7QUFDM0YsYUFBTyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDOUI7Ozs7O1dBR2MsMkJBQUc7QUFDaEIsVUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7OztBQUd6QixVQUFJLENBQUMsZUFBZSxHQUFHLDRCQUFTLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDOzs7QUFHL0QsWUFBTSxDQUFDLEVBQUUsOEJBQVcsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7OztBQUd4RSxrQ0FBUyxlQUFlLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7OztBQUduRCxTQUFHLENBQUMsUUFBUSxDQUFDLDRCQUFTLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOztBQUUvQyxVQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDakM7OztXQUVpQiw0QkFBQyxLQUFLLEVBQUU7QUFDeEIsVUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtBQUN4QixZQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDaEMsY0FBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCLE1BQU07QUFDTCxjQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7T0FDRjtLQUNGOzs7V0FFYSwwQkFBRztBQUNmLFVBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0FBQzFCLFlBQU0sQ0FBQyxHQUFHLDhCQUFXLFNBQVMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7O0FBR3pELGtDQUFTLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7OztBQUcvRCxTQUFHLENBQUMsV0FBVyxDQUFDLDRCQUFTLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOzs7O0FBSWxELFVBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNoQzs7O1dBRVcsc0JBQUMsT0FBTyxFQUFFOztBQUVwQixXQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBRTtBQUN4RCxZQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFlBQUksSUFBSSxHQUFHLHlCQUFVLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBRzVDLFlBQUksQ0FBQyxJQUFJLEVBQUU7QUFDVCxhQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssV0FBUyxRQUFRLHVFQUFvRSxDQUFDO0FBQ25HLG1CQUFTO1NBQ1Y7OztBQUdELFlBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFOztBQUV0QixlQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsT0FBTyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFFO0FBQ3JDLGdCQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUdsQixnQkFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDakMscUJBQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQzthQUMzQztXQUNGO1NBQ0Y7T0FDRjs7QUFFRCxhQUFPLEtBQUssQ0FBQztLQUNkOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FrQ0UsZUFBNkI7VUFBNUIsTUFBTSxnQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzs7QUFDNUIsVUFBSSxXQUFXLEdBQUcseUJBQVUsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBR3hELFVBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDM0IsWUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7O09BRzFCLE1BQU0sSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7O0FBRXJDLFlBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzs7O09BRzNCLE1BQU0sSUFBSSxNQUFNLFlBQVksTUFBTSxFQUFFOzs7QUFHbkMsWUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFOzs7QUFHeEQsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDNUIsTUFBTTtBQUNMLGNBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDN0IsY0FBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQzs7O0FBR3RDLGNBQUksQ0FBQyxLQUFLLENBQUMsWUFBVTs7Ozs7O0FBTW5CLGdCQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFO0FBQ3JELGtCQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNwQyxNQUFNO0FBQ0wsa0JBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNsQzs7QUFFRCxnQkFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtBQUN2QyxrQkFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7O0FBRUQsZ0JBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUM3QixrQkFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7V0FDRixDQUFDLENBQUM7U0FDSjtPQUNGOztBQUVELGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7OztXQU9VLHFCQUFDLE9BQU8sRUFBRTtBQUNuQixVQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUU1QyxVQUFJLFVBQVUsRUFBRTtBQUNkLFlBQUksVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFOztBQUVyQyxjQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QixNQUFNOztBQUVMLGNBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkQ7T0FDRixNQUFNOztBQUVMLFlBQUksQ0FBQyxVQUFVLENBQUUsWUFBVztBQUMxQixjQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4RixFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O0FBSU4sWUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO09BQ3JCO0tBQ0Y7Ozs7Ozs7O1dBTUcsZ0JBQUc7QUFDTCxVQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RCLGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7OztXQU9TLHNCQUFHO0FBQ1gsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztLQUM1RDs7Ozs7Ozs7OztXQVFVLHVCQUFHO0FBQ1YsYUFBTyxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQztLQUNsQzs7Ozs7Ozs7O1dBT00saUJBQUMsS0FBSyxFQUFFO0FBQ2IsVUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0FBQ3ZCLFlBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25DLFlBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLGVBQU8sSUFBSSxDQUFDO09BQ2I7QUFDRCxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDaEM7Ozs7Ozs7OztXQU9PLGtCQUFDLEtBQUssRUFBRTtBQUNkLFVBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtBQUN2QixZQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwQyxZQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNsQyxlQUFPLElBQUksQ0FBQztPQUNiO0FBQ0QsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN4Qzs7Ozs7Ozs7O1dBT0csY0FBQyxLQUFLLEVBQUU7QUFDVixVQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7QUFDdkIsWUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEMsWUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDOUIsZUFBTyxJQUFJLENBQUM7T0FDYjtBQUNELGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWlCSyxnQkFBQyxHQUFHLEVBQUU7QUFDVixVQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7QUFDckIsZUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDO09BQ3JCOzs7O0FBSUQsVUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLFdBQUcsR0FBRyxFQUFFLENBQUM7T0FDVjs7O0FBR0QsVUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7OztBQUduQixVQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7O0FBR2hDLFVBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRTdCLGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7OztXQU9PLGtCQUFDLElBQUksRUFBRTtBQUNiLFVBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN0QixZQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFZCxZQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQzNCLGNBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOztBQUV0QixjQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO0FBQzlCLGdCQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztXQUNwQzs7QUFFRCxjQUFJLElBQUksRUFBRTtBQUNSLGdCQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDMUMsZ0JBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN0QyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUVoQyxnQkFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO0FBQy9CLGtCQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQzthQUNqQztXQUNGLE1BQU07QUFDTCxnQkFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pDLGdCQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDdkMsZ0JBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7QUFFakMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtBQUMvQixrQkFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7YUFDcEM7V0FDRjtTQUNGO0FBQ0QsZUFBTyxJQUFJLENBQUM7T0FDYjtBQUNELGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDekI7Ozs7Ozs7Ozs7Ozs7Ozs7V0Fja0IsNkJBQUMsSUFBSSxFQUFFO0FBQ3hCLFVBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN0QixZQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFZCxZQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLEVBQUU7QUFDdEMsY0FBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztBQUNqQyxjQUFJLElBQUksRUFBRTtBQUNSLGdCQUFJLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFVM0MsZ0JBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztXQUNyQyxNQUFNO0FBQ0wsZ0JBQUksQ0FBQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsQ0FBQzs7Ozs7Ozs7OztBQVU5QyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1dBQ3JDO1NBQ0Y7QUFDRCxlQUFPLElBQUksQ0FBQztPQUNiO0FBQ0QsYUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO0tBQ3BDOzs7Ozs7Ozs7O1dBUUksZUFBQyxHQUFHLEVBQUU7QUFDVCxVQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7QUFDckIsZUFBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztPQUM1Qjs7O0FBR0QsVUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO0FBQ2hCLFlBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFlBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUIsZUFBTyxJQUFJLENBQUM7T0FDYjs7O0FBR0QsVUFBSSxHQUFHLHFDQUFzQixFQUFFO0FBQzdCLFlBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO09BQ25CLE1BQU07QUFDTCxZQUFJLENBQUMsTUFBTSxHQUFHLDhCQUFlLEdBQUcsQ0FBQyxDQUFDO09BQ25DOzs7QUFHRCxVQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7QUFHdEIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7OztBQUkzQixTQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssWUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksU0FBSSwwQkFBVyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXpILGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7O1dBTUksaUJBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FBRTs7Ozs7Ozs7V0FNbEMsbUJBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FBRTs7O1dBRTNCLDRCQUFDLEtBQUssRUFBRTtBQUN4QixVQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztLQUMzQjs7O1dBRVMsb0JBQUMsSUFBSSxFQUFFO0FBQ2YsVUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3RCLFlBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2QsWUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUM3QixjQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUN4QixjQUFJLElBQUksRUFBRTs7O0FBR1IsZ0JBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLGdCQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEMsZ0JBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNqQyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztXQUM1QixNQUFNOzs7QUFHTCxnQkFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7Ozs7QUFVM0IsZ0JBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtBQUNaLGtCQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBUyxDQUFDLEVBQUM7QUFDcEMsaUJBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNwQixpQkFBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2VBQ3BCLENBQUMsQ0FBQzthQUNKOztBQUVELGdCQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDcEMsZ0JBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNuQyxnQkFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztXQUM5QjtTQUNGO0FBQ0QsZUFBTyxJQUFJLENBQUM7T0FDYjtBQUNELGFBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUN6Qjs7O1dBRW9CLGlDQUFHO0FBQ3RCLFVBQUksZUFBZSxZQUFBO1VBQUUsU0FBUyxZQUFBO1VBQUUsU0FBUyxZQUFBLENBQUM7O0FBRTFDLFVBQUksY0FBYyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUU3RCxVQUFJLGVBQWUsR0FBRyxTQUFsQixlQUFlLENBQVksQ0FBQyxFQUFFOzs7QUFHaEMsWUFBRyxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtBQUNyRCxtQkFBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDdEIsbUJBQVMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3RCLHdCQUFjLEVBQUUsQ0FBQztTQUNsQjtPQUNGLENBQUM7O0FBRUYsVUFBSSxlQUFlLEdBQUcsU0FBbEIsZUFBZSxHQUFjO0FBQy9CLHNCQUFjLEVBQUUsQ0FBQzs7OztBQUlqQixZQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzs7O0FBSXBDLHVCQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7T0FDekQsQ0FBQzs7QUFFRixVQUFJLGFBQWEsR0FBRyxTQUFoQixhQUFhLENBQVksS0FBSyxFQUFFO0FBQ2xDLHNCQUFjLEVBQUUsQ0FBQzs7QUFFakIsWUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztPQUNyQyxDQUFDOzs7QUFHRixVQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUN0QyxVQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUN0QyxVQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQzs7OztBQUlsQyxVQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNuQyxVQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQzs7Ozs7OztBQU9qQyxVQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVc7QUFDOUMsWUFBSSxpQkFBaUIsWUFBQSxDQUFDOzs7QUFHdEIsWUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFOztBQUV0QixjQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQzs7O0FBRzNCLGNBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7OztBQUd0QixjQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRXJDLGNBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2xELGNBQUksT0FBTyxHQUFHLENBQUMsRUFBRTs7O0FBR2YsNkJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZOzs7O0FBSTlDLGtCQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUNyQixvQkFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztlQUMxQjthQUNGLEVBQUUsT0FBTyxDQUFDLENBQUM7V0FDYjtTQUNGO09BQ0YsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNUOzs7Ozs7Ozs7Ozs7O1dBV1csc0JBQUMsSUFBSSxFQUFFO0FBQ2pCLFVBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN0QixZQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLGVBQU8sSUFBSSxDQUFDO09BQ2I7O0FBRUQsVUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRTtBQUNsRCxlQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7T0FDckMsTUFBTTtBQUNMLGVBQU8sQ0FBRyxDQUFDO09BQ1o7S0FDRjs7Ozs7Ozs7Ozs7O1dBVU0saUJBQUMsSUFBSSxFQUFFO0FBQ1osVUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3RCLFlBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN2QixlQUFPLElBQUksQ0FBQztPQUNiOztBQUVELGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FvQlcsd0JBQUc7QUFDYixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F1QlMsc0JBQUc7QUFDWCxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDbkM7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBZVMsc0JBQUc7OztBQUdYLGFBQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7S0FDL0M7OztXQUVlLDRCQUFHO0FBQ2pCLGFBQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQztLQUNyRDs7Ozs7Ozs7Ozs7O1dBVVcsc0JBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDbEMsYUFBTyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN0RTs7O1dBRWlCLDRCQUFDLE9BQU8sRUFBRTtBQUMxQixhQUFPLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlEOzs7V0FFb0IsK0JBQUMsS0FBSyxFQUFFO0FBQzNCLFVBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBMEJPLGtCQUFDLFlBQVksRUFBRTtBQUNyQixVQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7QUFDOUIsZUFBTyxJQUFJLENBQUMsU0FBUyxDQUFDO09BQ3ZCOztBQUVELFVBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO0FBQzlCLGFBQU8sSUFBSSxDQUFDO0tBQ2I7Ozs7Ozs7V0FLUSxxQkFBRztBQUNWLGFBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUN4Qjs7O1dBRUssa0JBQUc7QUFDUCxVQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDcEQsVUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFNUIsYUFBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7O0FBRXBCLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3RDLFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3RCLGFBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsYUFBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7QUFDekIsZUFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7T0FDM0I7O0FBRUQsYUFBTyxPQUFPLENBQUM7S0FDaEI7OztXQUVvQix3QkFBQyxHQUFHLEVBQUU7QUFDekIsVUFBSSxXQUFXLEdBQUc7QUFDaEIsaUJBQVMsRUFBRSxFQUFFO0FBQ2IsZ0JBQVEsRUFBRSxFQUFFO09BQ2IsQ0FBQzs7QUFFRixVQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsVUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7QUFHM0MsVUFBSSxTQUFTLEtBQUssSUFBSSxFQUFDOzs7OzhCQUdELGdDQUFlLFNBQVMsSUFBSSxJQUFJLENBQUM7Ozs7WUFBOUMsR0FBRztZQUFFLElBQUk7O0FBQ2hCLFlBQUksR0FBRyxFQUFFO0FBQ1AsYUFBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7QUFDRCxXQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDakM7O0FBRUQsU0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDOzs7QUFHdkMsVUFBSSxHQUFHLENBQUMsYUFBYSxFQUFFLEVBQUU7QUFDdkIsWUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQzs7QUFFaEMsYUFBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxjQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRTFCLGNBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDL0MsY0FBSSxTQUFTLEtBQUssUUFBUSxFQUFFO0FBQzFCLHVCQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1dBQzlELE1BQU0sSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFO0FBQ2hDLHVCQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1dBQzdEO1NBQ0Y7T0FDRjs7QUFFRCxhQUFPLFdBQVcsQ0FBQztLQUNwQjs7O1NBdjhERyxNQUFNOzs7Ozs7O0FBKzhEWixNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7QUFXcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLHlCQUFVLENBQUM7Ozs7OztBQU1wQyxNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDOzs7Ozs7QUFNdEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7O0FBTWxDLE1BQU0sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7Ozs7OztBQU1yQyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDOzs7Ozs7QUFNbEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7O0FBU3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7Ozs7OztBQU1sQyxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDOzs7Ozs7QUFNcEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7O0FBRTdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsWUFBVztBQUM5QyxNQUFJLElBQUksR0FBRyw0QkFBUyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRXZDLFNBQU8sRUFBRSxXQUFXLElBQUksSUFBSSxDQUFDLEtBQUssSUFDMUIsaUJBQWlCLElBQUksSUFBSSxDQUFDLEtBQUssSUFDL0IsY0FBYyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQzVCLGFBQWEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFBLEFBQUMsQ0FBQztDQUN0QyxDQUFDOztBQUVGLHlCQUFVLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztxQkFDL0IsTUFBTTs7Ozs7Ozs7Ozs7O3NCQ25rRUYsVUFBVTs7Ozs7Ozs7OztBQVE3QixJQUFJLE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBWSxJQUFJLEVBQUUsSUFBSSxFQUFDO0FBQy9CLHNCQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7Q0FDL0IsQ0FBQzs7cUJBRWEsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQ1pGLFVBQVU7Ozs7bUJBQ1IsT0FBTzs7SUFBaEIsR0FBRzs7Ozs7Ozs7Ozs7O0lBV1QsV0FBVztBQUVKLFdBRlAsV0FBVyxDQUVILE1BQU0sRUFBRSxPQUFPLEVBQUM7MEJBRnhCLFdBQVc7O0FBR2IsK0JBSEUsV0FBVyw2Q0FHUCxNQUFNLEVBQUUsT0FBTyxFQUFFOztBQUV2QixRQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDZCxVQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUN4RDs7WUFQRyxXQUFXOztlQUFYLFdBQVc7Ozs7OztXQVlSLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLGlDQWRFLFdBQVcseUNBY0c7S0FDakI7Ozs7Ozs7O1dBTU8sb0JBQUc7QUFDVCxVQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtBQUMzQixpQkFBUyxFQUFFLFlBQVk7OztBQUd2QixnQkFBUSxFQUFFLENBQUMsQ0FBQztPQUNiLENBQUMsQ0FBQzs7Ozs7O0FBTUgsVUFBSSxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRTtBQUNsQyxZQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsVUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7T0FDbkM7O0FBRUQsYUFBTyxFQUFFLENBQUM7S0FDWDs7Ozs7OztXQUtLLGtCQUFHO0FBQ1AsVUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUVqQyxVQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7O0FBSWpCLFVBQUksR0FBRyxFQUFFO0FBQ1AsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2IsTUFBTTtBQUNMLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiO0tBQ0Y7Ozs7Ozs7V0FLSyxnQkFBQyxHQUFHLEVBQUU7QUFDVixVQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDckIsWUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO09BQzdCLE1BQU07QUFDTCxZQUFJLGVBQWUsR0FBRyxFQUFFLENBQUM7OztBQUd6QixZQUFJLEdBQUcsRUFBRTtBQUNQLHlCQUFlLGFBQVcsR0FBRyxPQUFJLENBQUM7U0FDbkM7O0FBRUQsWUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztPQUNsRDtLQUNGOzs7Ozs7O1dBS1UsdUJBQUc7OztBQUdaLFVBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRTtBQUN6QixZQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO09BQ3JCLE1BQU07QUFDTCxZQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO09BQ3RCO0tBQ0Y7OztTQXZGRyxXQUFXOzs7QUEyRmpCLG9CQUFPLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztxQkFDdEMsV0FBVzs7Ozs7Ozs7Ozs7Ozs7c0JDeEdGLFVBQVU7O0lBQXRCLE1BQU07OzhCQUNHLGlCQUFpQjs7Ozs0QkFDbkIsZUFBZTs7OztBQUVsQyxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDMUIsSUFBSSxPQUFPLFlBQUEsQ0FBQzs7Ozs7Ozs7QUFRWixJQUFJLFNBQVMsR0FBRyxTQUFaLFNBQVMsR0FBYTs7Ozs7Ozs7QUFReEIsTUFBSSxJQUFJLEdBQUcsNEJBQVMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEQsTUFBSSxNQUFNLEdBQUcsNEJBQVMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsTUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLE1BQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLFNBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsY0FBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QjtHQUNGO0FBQ0QsTUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDL0IsU0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QyxjQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzFCO0dBQ0Y7OztBQUdELE1BQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztBQUVuQyxTQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLFVBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztBQUkxQixVQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFOzs7QUFHbkMsWUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ25DLGNBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7QUFJakQsY0FBSSxPQUFPLEtBQUssSUFBSSxFQUFFOztBQUVwQixnQkFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1dBQy9CO1NBQ0Y7OztBQUFBLE9BR0YsTUFBTTtBQUNMLHdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLGNBQU07T0FDUDtLQUNGOzs7QUFBQSxHQUdGLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUN6QixvQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNyQjtDQUNGLENBQUM7OztBQUdGLElBQUksZ0JBQWdCLEdBQUcsU0FBbkIsZ0JBQWdCLENBQVksSUFBSSxFQUFFLEdBQUcsRUFBQztBQUN4QyxTQUFPLEdBQUcsR0FBRyxDQUFDO0FBQ2QsWUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUM3QixDQUFDOztBQUVGLElBQUksNEJBQVMsVUFBVSxLQUFLLFVBQVUsRUFBRTtBQUN0QyxlQUFhLEdBQUcsSUFBSSxDQUFDO0NBQ3RCLE1BQU07QUFDTCxRQUFNLENBQUMsR0FBRyw0QkFBUyxNQUFNLEVBQUUsWUFBVTtBQUNuQyxpQkFBYSxHQUFHLElBQUksQ0FBQztHQUN0QixDQUFDLENBQUM7Q0FDSjs7QUFFRCxJQUFJLFNBQVMsR0FBRyxTQUFaLFNBQVMsR0FBYztBQUN6QixTQUFPLGFBQWEsQ0FBQztDQUN0QixDQUFDOztRQUVPLFNBQVMsR0FBVCxTQUFTO1FBQUUsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQUFFLFNBQVMsR0FBVCxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkN4RnpCLGlCQUFpQjs7OztxQkFDbEIsV0FBVzs7SUFBcEIsR0FBRzs7Ozs7Ozs7OztJQVNULFlBQVk7V0FBWixZQUFZOzBCQUFaLFlBQVk7Ozs7Ozs7WUFBWixZQUFZOztlQUFaLFlBQVk7Ozs7V0FHUixrQkFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ3BCLFdBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDOztBQUVwQixXQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUM7QUFDekQsV0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ3BCLGlCQUFTLHVDQUFvQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQSxZQUFTO09BQzdFLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRVYsd0NBWEUsWUFBWSwwQ0FXUSxLQUFLLEVBQUUsS0FBSyxFQUFFO0tBQ3JDOzs7U0FaRyxZQUFZOzs7QUFnQmxCLHlCQUFVLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztxQkFDM0MsWUFBWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQzNCTCxpQkFBaUI7Ozs7cUJBQ2xCLFdBQVc7O0lBQXBCLEdBQUc7OzhCQUNNLGlCQUFpQjs7Ozs7Ozs7Ozs7Ozs7SUFXaEMsTUFBTTtBQUVDLFdBRlAsTUFBTSxDQUVFLE1BQU0sRUFBRSxPQUFPLEVBQUU7MEJBRnpCLE1BQU07O0FBR1IsK0JBSEUsTUFBTSw2Q0FHRixNQUFNLEVBQUUsT0FBTyxFQUFFOzs7QUFHdkIsUUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNuRCxRQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzs7QUFHekQsUUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O0FBRTVDLFFBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQyxRQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDNUMsUUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ25DLFFBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqQyxRQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRW5DLFFBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoRCxRQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNoRDs7WUFwQkcsTUFBTTs7ZUFBTixNQUFNOztXQXNCRixrQkFBQyxJQUFJLEVBQVk7VUFBVixLQUFLLGdDQUFDLEVBQUU7OztBQUVyQixXQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQ2xELFdBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUNwQixjQUFNLEVBQUUsUUFBUTtBQUNoQix1QkFBZSxFQUFFLENBQUM7QUFDbEIsdUJBQWUsRUFBRSxDQUFDO0FBQ2xCLHVCQUFlLEVBQUUsR0FBRztBQUNwQixnQkFBUSxFQUFFLENBQUM7T0FDWixFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUVWLHdDQWpDRSxNQUFNLDBDQWlDYyxJQUFJLEVBQUUsS0FBSyxFQUFFO0tBQ3BDOzs7V0FFYyx5QkFBQyxLQUFLLEVBQUU7QUFDckIsV0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3ZCLFNBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ3pCLFVBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7O0FBRTdCLFVBQUksQ0FBQyxFQUFFLDhCQUFXLFdBQVcsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDckQsVUFBSSxDQUFDLEVBQUUsOEJBQVcsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqRCxVQUFJLENBQUMsRUFBRSw4QkFBVyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3JELFVBQUksQ0FBQyxFQUFFLDhCQUFXLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7O0FBRWxELFVBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDN0I7Ozs7O1dBR2MsMkJBQUcsRUFBRTs7O1dBRVAseUJBQUc7QUFDZCxTQUFHLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUMzQixVQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUVoQyxVQUFJLENBQUMsR0FBRyw4QkFBVyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3RELFVBQUksQ0FBQyxHQUFHLDhCQUFXLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbEQsVUFBSSxDQUFDLEdBQUcsOEJBQVcsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0RCxVQUFJLENBQUMsR0FBRyw4QkFBVyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUVuRCxVQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDZjs7O1dBRUssa0JBQUc7OztBQUdQLFVBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU87Ozs7O0FBS3RCLFVBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNqQyxVQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDOzs7QUFHbkIsVUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPOzs7QUFHakIsVUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLElBQzVCLFFBQVEsS0FBSyxRQUFRLElBQ3JCLFFBQVEsR0FBRyxDQUFDLElBQ1osUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUNyQixnQkFBUSxHQUFHLENBQUMsQ0FBQztPQUNsQjs7OztBQUlELFVBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBR3RELFVBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7OztBQUd2RCxVQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtBQUNuQixXQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7T0FDcEMsTUFBTTtBQUNMLFdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztPQUNuQztLQUNGOzs7Ozs7O1dBS21CLDhCQUFDLFFBQVEsRUFBRTtBQUM3QixVQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3pCLFVBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTzs7QUFFcEIsVUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLFVBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7O0FBRW5CLFVBQUksT0FBTyxZQUFBO1VBQUUsVUFBVSxZQUFBLENBQUM7QUFDeEIsVUFBSSxRQUFRLEVBQUU7QUFDWixlQUFPLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztBQUMzQixrQkFBVSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUM7T0FDdkMsTUFBTTtBQUNMLGVBQU8sR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO0FBQzFCLGtCQUFVLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQztPQUN0Qzs7OztBQUlELFVBQUksYUFBYSxHQUFHLEFBQUMsVUFBVSxHQUFJLFVBQVUsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDOzs7O0FBSTVELFVBQUksa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQzs7O0FBRzNDLFVBQUksZ0JBQWdCLEdBQUcsUUFBUSxHQUFHLGtCQUFrQixDQUFDOzs7QUFHckQsVUFBSSxXQUFXLEdBQUcsZ0JBQWdCLEdBQUksYUFBYSxHQUFHLENBQUMsQUFBQyxDQUFDOztBQUV6RCxVQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7O0FBRTVELFVBQUksUUFBUSxFQUFFO0FBQ1osY0FBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO09BQ3ZDLE1BQU07QUFDTCxjQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7T0FDckM7O0FBRUQsYUFBTyxXQUFXLENBQUM7S0FDcEI7OztXQUVnQiwyQkFBQyxLQUFLLEVBQUM7QUFDdEIsVUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNsQixVQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLFVBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7QUFDMUIsVUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQztBQUMzQixVQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUV6QixVQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUM5QixZQUFJLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDOztBQUVuQixZQUFJLEtBQUssWUFBQSxDQUFDO0FBQ1YsWUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO0FBQ3hCLGVBQUssR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUN2QyxNQUFNO0FBQ0wsZUFBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDckI7O0FBRUQsWUFBSSxNQUFNLEVBQUU7QUFDVixjQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDOztBQUV2QyxjQUFJLEdBQUcsSUFBSSxHQUFJLE9BQU8sR0FBRyxDQUFDLEFBQUMsQ0FBQztBQUM1QixjQUFJLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQztTQUN2Qjs7O0FBR0QsZUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEFBQUMsSUFBSSxHQUFHLEtBQUssR0FBSSxJQUFJLENBQUEsR0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO09BRWpFLE1BQU07QUFDTCxZQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDOztBQUVwQixZQUFJLEtBQUssWUFBQSxDQUFDO0FBQ1YsWUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO0FBQ3hCLGVBQUssR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUN2QyxNQUFNO0FBQ0wsZUFBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDckI7O0FBRUQsWUFBSSxNQUFNLEVBQUU7QUFDVixjQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDOzs7QUFHdEMsY0FBSSxHQUFHLElBQUksR0FBSSxPQUFPLEdBQUcsQ0FBQyxBQUFDLENBQUM7QUFDNUIsY0FBSSxHQUFHLElBQUksR0FBRyxPQUFPLENBQUM7U0FDdkI7OztBQUdELGVBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBLEdBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztPQUN4RDtLQUNGOzs7V0FFVSx1QkFBRztBQUNaLFVBQUksQ0FBQyxFQUFFLDhCQUFXLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDbkQ7OztXQUVhLHdCQUFDLEtBQUssRUFBRTtBQUNwQixVQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFOztBQUM1QyxhQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDdkIsWUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO09BQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUUsRUFBRTs7QUFDbkQsYUFBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3ZCLFlBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztPQUNwQjtLQUNGOzs7V0FFUyxzQkFBRztBQUNYLFVBQUksQ0FBQyxHQUFHLDhCQUFXLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDcEQ7Ozs7Ozs7OztXQU9VLHFCQUFDLEtBQUssRUFBRTtBQUNqQixXQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztBQUNqQyxXQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDeEI7OztXQUVPLGtCQUFDLElBQUksRUFBRTtBQUNiLFVBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN0QixlQUFPLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDO09BQ2hDOztBQUVELFVBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFeEIsVUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ2xCLFlBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQztPQUN0QyxNQUFNO0FBQ0wsWUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO09BQ3hDOztBQUVELGFBQU8sSUFBSSxDQUFDO0tBQ2I7OztTQTdPRyxNQUFNOzs7QUFpUFoseUJBQVUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO3FCQUMvQixNQUFNOzs7Ozs7Ozs7QUMvUHJCLFNBQVMsa0JBQWtCLENBQUMsS0FBSyxFQUFFO0FBQ2pDLE9BQUssQ0FBQyxnQkFBZ0IsR0FBRztBQUN2QixjQUFVLEVBQUUsS0FBSztBQUNqQixjQUFVLEVBQUUsS0FBSztHQUNsQixDQUFDOztBQUVGLE9BQUssQ0FBQyxlQUFlLEdBQUcsVUFBUyxVQUFVLEVBQUUsTUFBTSxFQUFFO0FBQ25ELFdBQU8sVUFBVSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDbEMsQ0FBQzs7QUFFRixPQUFLLENBQUMsYUFBYSxHQUFHLFVBQVMsR0FBRyxFQUFFO0FBQ2xDLFFBQUksS0FBSyxHQUFHO0FBQ1YsZ0JBQVUsRUFBRSxFQUFFO0FBQ2QsWUFBTSxFQUFFLEVBQUU7S0FDWCxDQUFDOztBQUVGLFFBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7Ozs7O0FBS3ZCLFFBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsUUFBSSxXQUFXLFlBQUEsQ0FBQztBQUNoQixRQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRTtBQUNsQixpQkFBVyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7S0FDM0IsTUFDSTs7QUFFSCxhQUFPLEdBQUcsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELFVBQUksT0FBTyxLQUFLLENBQUMsRUFBRTs7QUFFakIsZUFBTyxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO09BQ3BDO0tBQ0Y7QUFDRCxTQUFLLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLFNBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUV0RCxXQUFPLEtBQUssQ0FBQztHQUNkLENBQUM7O0FBRUYsT0FBSyxDQUFDLGVBQWUsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUN4QyxXQUFPLE9BQU8sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUM7R0FDMUMsQ0FBQzs7OztBQUlGLE9BQUssQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUM7O0FBRXBDLE9BQUssQ0FBQyxjQUFjLEdBQUcsVUFBUyxHQUFHLEVBQUU7QUFDbkMsV0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNoQyxDQUFDOzs7Ozs7QUFNRixPQUFLLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDOzs7Ozs7O0FBTzdCLE9BQUssQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEdBQUcsVUFBUyxNQUFNLEVBQUM7QUFDeEQsUUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMxRSxhQUFPLE9BQU8sQ0FBQztLQUNoQjs7QUFFRCxXQUFPLEVBQUUsQ0FBQztHQUNYLENBQUM7Ozs7Ozs7OztBQVNGLE9BQUssQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEdBQUcsVUFBUyxNQUFNLEVBQUUsSUFBSSxFQUFDO0FBQzNELFFBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUUvQyxRQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0MsUUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN4QyxDQUFDOzs7QUFHRixPQUFLLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRXJELFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O3FCQUVjLGtCQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ3JGaEIsUUFBUTs7OzttQkFDSixRQUFROztJQUFqQixHQUFHOzt5QkFDZ0IsY0FBYzs7Ozt5QkFDdkIsY0FBYzs7Ozs0QkFDakIsZUFBZTs7OztBQUVsQyxJQUFJLFNBQVMsR0FBRywwQkFBTyxTQUFTLENBQUM7Ozs7Ozs7Ozs7SUFTM0IsS0FBSztBQUVFLFdBRlAsS0FBSyxDQUVHLE9BQU8sRUFBRSxLQUFLLEVBQUM7MEJBRnZCLEtBQUs7O0FBR1AsK0JBSEUsS0FBSyw2Q0FHRCxPQUFPLEVBQUUsS0FBSyxFQUFFOztRQUVoQixNQUFNLEdBQWUsT0FBTyxDQUE1QixNQUFNO1FBQUUsUUFBUSxHQUFLLE9BQU8sQ0FBcEIsUUFBUTs7O0FBR3RCLFFBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEdBQUMsWUFBWSxDQUFDOzs7QUFHMUMsUUFBSSxTQUFTLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7OztBQUc1QixxQkFBZSxFQUFFLHVCQUF1QjtBQUN4QywwQkFBb0IsRUFBRSx1QkFBdUI7QUFDN0MsK0JBQXlCLEVBQUUsdUJBQXVCOzs7QUFHbEQsZ0JBQVUsRUFBRSxPQUFPLENBQUMsUUFBUTtBQUM1QixlQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU87QUFDMUIsWUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0FBQ3BCLGFBQU8sRUFBRSxPQUFPLENBQUMsS0FBSzs7S0FFdkIsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7OztBQUd0QixRQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUN6QixhQUFPLEVBQUUsUUFBUTtBQUNqQixlQUFTLEVBQUUsU0FBUztBQUFBLEtBQ3JCLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7QUFHbkIsUUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDN0IsVUFBSSxFQUFFLEtBQUs7QUFDWCxZQUFNLEVBQUUsS0FBSztBQUNiLGFBQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7QUFHdkIsUUFBSSxNQUFNLEVBQUU7QUFDVixVQUFJLENBQUMsS0FBSyxDQUFDLFlBQVU7QUFDbkIsWUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUN4QixDQUFDLENBQUM7S0FDSjs7OztBQUlELFFBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUNyQixVQUFJLENBQUMsS0FBSyxDQUFDLFlBQVU7QUFDbkIsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osWUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7T0FDckMsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsOEJBQU8sT0FBTyxHQUFHLDBCQUFPLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDdEMsOEJBQU8sT0FBTyxDQUFDLEtBQUssR0FBRywwQkFBTyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztBQUNsRCw4QkFBTyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzdDLDhCQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDN0MsOEJBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7QUFFN0MsUUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNuRSxRQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7R0FDdEI7O1lBaEVHLEtBQUs7O2VBQUwsS0FBSzs7V0FrRUwsZ0JBQUc7QUFDTCxVQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3JCOzs7V0FFSSxpQkFBRztBQUNOLFVBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7S0FDdEI7OztXQUVFLGFBQUMsSUFBRyxFQUFFO0FBQ1AsVUFBSSxJQUFHLEtBQUssU0FBUyxFQUFFO0FBQ3JCLGVBQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO09BQzFCOzs7QUFHRCxhQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBRyxDQUFDLENBQUM7S0FDekI7OztXQUVLLGdCQUFDLEdBQUcsRUFBRTs7QUFFVixTQUFHLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QixVQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7OztBQUl0QixVQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtBQUNuQixZQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsWUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFVO0FBQUUsY0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztPQUNoRDtLQUNGOzs7V0FFYSx3QkFBQyxJQUFJLEVBQUU7QUFDbkIsVUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDNUIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlDLGlDQW5HRSxLQUFLLGdEQW1HZ0I7S0FDeEI7OztXQUVVLHFCQUFDLElBQUksRUFBRTs7O0FBR2hCLFVBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO0FBQ2xCLGVBQU8sSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUM7T0FDbEM7QUFDRCxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2hEOzs7V0FFUyxzQkFBRztBQUNYLFVBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUN2QixlQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO09BQ2hDLE1BQU07QUFDTCxlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO09BQy9DO0tBQ0Y7OztXQUVHLGdCQUFHO0FBQ0wsVUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNyQjs7O1dBRUssa0JBQUc7QUFDUCxVQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNwQzs7Ozs7V0FHUSxxQkFBRyxFQUFFOzs7V0FFTixvQkFBRztBQUNULGFBQU8sR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztLQUNyRTs7O1dBRWlCLDhCQUFHO0FBQ25CLGFBQU8sS0FBSyxDQUFDO0tBQ2Q7OztXQUVjLDJCQUFHO0FBQ2hCLGFBQU8sS0FBSyxDQUFDO0tBQ2Q7OztTQTVJRyxLQUFLOzs7O0FBa0pYLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDN0IsSUFBTSxVQUFVLEdBQUcsMklBQTJJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFLLElBQU0sU0FBUyxHQUFHLHdKQUF3SixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFdEwsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFDO0FBQzFCLE1BQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RCxNQUFJLENBQUMsS0FBSyxHQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVMsR0FBRyxFQUFDO0FBQUUsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FBRSxDQUFDO0NBQ3RGO0FBQ0QsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQzNCLE1BQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFVO0FBQUUsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUFFLENBQUM7Q0FDbkU7OztBQUdELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFDLGVBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixlQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUI7OztBQUdELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLGVBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM3Qjs7OztBQUlELEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBVTtBQUM1QixTQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7O0NBRWpDLENBQUM7OztBQUdGLGtCQUFLLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7OztBQVEvQixLQUFLLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDOzs7Ozs7O0FBTy9CLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEdBQUcsVUFBUyxNQUFNLEVBQUM7QUFDMUQsTUFBSSxJQUFJLENBQUM7O0FBRVQsV0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQzFCLFFBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQyxRQUFJLEdBQUcsRUFBRTtBQUNQLHdCQUFnQixHQUFHLENBQUc7S0FDdkI7QUFDRCxXQUFPLEVBQUUsQ0FBQztHQUNYOztBQUVELE1BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2hCLFFBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2xDLE1BQU07O0FBRUwsUUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUNyRDs7QUFFRCxNQUFJLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ3pCLFdBQU8sT0FBTyxDQUFDO0dBQ2hCOztBQUVELFNBQU8sRUFBRSxDQUFDO0NBQ1gsQ0FBQzs7Ozs7Ozs7O0FBU0YsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFlBQVksR0FBRyxVQUFTLE1BQU0sRUFBRSxJQUFJLEVBQUM7QUFDN0QsTUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDekIsQ0FBQzs7Ozs7O0FBTUYsS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sR0FBRyxZQUFVLEVBQUUsQ0FBQzs7O0FBR2pELEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7QUFFdkQsS0FBSyxDQUFDLE9BQU8sR0FBRztBQUNkLGFBQVcsRUFBRSxLQUFLO0FBQ2xCLGVBQWEsRUFBRSxLQUFLO0FBQ3BCLGFBQVcsRUFBRSxLQUFLO0FBQ2xCLGFBQVcsRUFBRSxLQUFLO0NBQ25CLENBQUM7O0FBRUYsS0FBSyxDQUFDLE9BQU8sR0FBRyxVQUFTLE9BQU8sRUFBQztBQUMvQixNQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pCLE1BQUksSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDOzs7O0FBSXpCLE1BQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRTs7QUFFckIsU0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUN4QjtDQUNGLENBQUM7Ozs7QUFJRixLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVMsSUFBSSxFQUFDOztBQUUvQixNQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFO0FBQ2QsV0FBTztHQUNSOzs7QUFHRCxNQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLEVBQUU7O0FBRTdCLFFBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUNyQixNQUFNOztBQUVMLFFBQUksQ0FBQyxVQUFVLENBQUMsWUFBVTtBQUN4QixXQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDM0IsRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNSO0NBQ0YsQ0FBQzs7O0FBR0YsS0FBSyxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUssRUFBRSxTQUFTLEVBQUM7QUFDeEMsTUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUIsTUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUN6QixDQUFDOzs7QUFHRixLQUFLLENBQUMsT0FBTyxHQUFHLFVBQVMsS0FBSyxFQUFFLEdBQUcsRUFBQztBQUNsQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNoQyxNQUFNLEdBQUcsR0FBRyxTQUFTLEdBQUMsR0FBRyxDQUFDOztBQUUxQixNQUFJLEdBQUcsS0FBSyxhQUFhLEVBQUU7QUFDekIsUUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDOzs7R0FHbEQsTUFBTTtBQUNMLFFBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQzVCO0NBQ0YsQ0FBQzs7O0FBR0YsS0FBSyxDQUFDLE9BQU8sR0FBRyxZQUFVO0FBQ3hCLE1BQUksT0FBTyxHQUFHLE9BQU8sQ0FBQzs7O0FBR3RCLE1BQUk7QUFDRixXQUFPLEdBQUcsSUFBSSwwQkFBTyxhQUFhLENBQUMsK0JBQStCLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztHQUd6SSxDQUFDLE9BQU0sQ0FBQyxFQUFFO0FBQ1QsUUFBSTtBQUNGLFVBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLGFBQWEsRUFBQztBQUNyRSxlQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBLENBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ3RKO0tBQ0YsQ0FBQyxPQUFNLEdBQUcsRUFBRSxFQUFFO0dBQ2hCO0FBQ0QsU0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNCLENBQUM7OztBQUdGLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBUyxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUM7QUFDeEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQzs7O0FBR3BFLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVuRSxTQUFPLEdBQUcsQ0FBQztDQUNaLENBQUM7O0FBRUYsS0FBSyxDQUFDLFlBQVksR0FBRyxVQUFTLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBQztBQUMvRCxNQUFNLE1BQU0sR0FBRywrQ0FBK0MsQ0FBQztBQUMvRCxNQUFJLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDekIsTUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQUksV0FBVyxHQUFHLEVBQUUsQ0FBQzs7O0FBR3JCLE1BQUksU0FBUyxFQUFFO0FBQ2IsT0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBQztBQUN4QyxxQkFBZSxTQUFPLEdBQUcsU0FBSSxHQUFHLFVBQU8sQ0FBQztLQUN6QyxDQUFDLENBQUM7R0FDSjs7O0FBR0QsUUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ3JCLFdBQU8sRUFBRSxHQUFHO0FBQ1osZUFBVyxFQUFFLGVBQWU7QUFDNUIsdUJBQW1CLEVBQUUsUUFBUTtBQUM3QixxQkFBaUIsRUFBRSxLQUFLO0FBQUEsR0FDekIsRUFBRSxNQUFNLENBQUMsQ0FBQzs7O0FBR1gsS0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBQztBQUNyQyxnQkFBWSxzQkFBb0IsR0FBRyxpQkFBWSxHQUFHLFNBQU0sQ0FBQztHQUMxRCxDQUFDLENBQUM7O0FBRUgsWUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDOztBQUV6QixVQUFNLEVBQUUsR0FBRzs7O0FBR1gsV0FBTyxFQUFFLE1BQU07QUFDZixZQUFRLEVBQUUsTUFBTTs7R0FFakIsRUFBRSxVQUFVLENBQUMsQ0FBQzs7O0FBR2YsS0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBQztBQUN6QyxlQUFXLFNBQU8sR0FBRyxVQUFLLEdBQUcsT0FBSSxDQUFDO0dBQ25DLENBQUMsQ0FBQzs7QUFFSCxjQUFVLE1BQU0sUUFBRyxXQUFXLFNBQUksWUFBWSxlQUFZO0NBQzNELENBQUM7OztBQUdGLHVCQUFtQixLQUFLLENBQUMsQ0FBQzs7QUFFMUIsa0JBQUssaUJBQWlCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUN4QixLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQ3RZSCxXQUFXOzs7O3lCQUNOLGNBQWM7Ozs7bUJBQ2YsUUFBUTs7SUFBakIsR0FBRzs7b0JBQ1UsU0FBUzs7SUFBdEIsT0FBTzs7OEJBQ0UsaUJBQWlCOzs7Ozs7Ozs7Ozs7SUFTaEMsS0FBSztBQUVFLFdBRlAsS0FBSyxDQUVHLE9BQU8sRUFBRSxLQUFLLEVBQUM7MEJBRnZCLEtBQUs7O0FBR1AsK0JBSEUsS0FBSyw2Q0FHRCxPQUFPLEVBQUUsS0FBSyxFQUFFOztBQUV0QixRQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDOzs7Ozs7QUFNOUIsUUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLEdBQUcsSUFBSyxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxDQUFDLEFBQUMsRUFBRTtBQUMxRyxVQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3hCOztBQUVELFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsRUFBRTs7QUFFNUIsVUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDaEMsVUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUMvQixVQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7O0FBRXJCLGFBQU8sV0FBVyxFQUFFLEVBQUU7QUFDcEIsWUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlCLFlBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0MsWUFBSSxRQUFRLEtBQUssT0FBTyxFQUFFO0FBQ3hCLGNBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Ozs7O0FBS2xDLHVCQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1dBQ3hCLE1BQU07QUFDTCxnQkFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztXQUMvQztTQUNGO09BQ0Y7O0FBRUQsV0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkMsWUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDdEM7S0FDRjs7QUFFRCxRQUFJLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtBQUNqQyxVQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUN6RDs7Ozs7O0FBTUQsUUFBSSxHQUFHLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxzQkFBc0IsS0FBSyxJQUFJLEVBQUU7QUFDaEUsVUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ25DOztBQUVELFFBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUNyQjs7WUF2REcsS0FBSzs7ZUFBTCxLQUFLOztXQTBERixtQkFBRztBQUNSLFdBQUssQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsaUNBNURFLEtBQUsseUNBNERTO0tBQ2pCOzs7V0FFTyxvQkFBRztBQUNULFVBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDOzs7OztBQUszQixVQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEtBQUssRUFBRTs7O0FBR3BELFlBQUksRUFBRSxFQUFFO0FBQ04sY0FBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxlQUFLLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsWUFBRSxHQUFHLEtBQUssQ0FBQztTQUNaLE1BQU07QUFDTCxZQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7O0FBRzNCLGNBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JGLGNBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3pELGNBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEtBQUssSUFBSSxFQUFFO0FBQ3ZFLG1CQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUM7V0FDNUI7O0FBRUQsYUFBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO0FBQ3hCLGNBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxZQUFZO0FBQ3pDLHFCQUFPLFVBQVU7V0FDbEIsQ0FBQyxDQUNILENBQUM7U0FDSDs7QUFFRCxZQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ3hCLGVBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDcEQsZ0JBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLGdCQUFJLE9BQU8sR0FBRyw0QkFBUyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsbUJBQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUMxQixtQkFBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzVCLG1CQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDaEMsbUJBQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUN4QixnQkFBSSxTQUFTLElBQUksS0FBSyxFQUFFO0FBQ3RCLHFCQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUM1QztBQUNELGNBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDekI7U0FDRjtPQUNGOzs7QUFHRCxVQUFJLGFBQWEsR0FBRyxDQUFDLFVBQVUsRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzFELFdBQUssSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNsRCxZQUFNLElBQUksR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsWUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFlBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLFdBQVcsRUFBRTtBQUM5Qyx3QkFBYyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7QUFDRCxXQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO09BQzlDOztBQUVELGFBQU8sRUFBRSxDQUFDOztLQUVYOzs7V0FHVyx3QkFBRztBQUNiLFVBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEQsVUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUN0QixVQUFNLEtBQUssR0FBRztBQUNaLGtCQUFVLEVBQUUsQ0FBQztBQUNiLG1CQUFXLEVBQUUsQ0FBQztPQUNmLENBQUM7O0FBRUYsYUFBTyxDQUFDLEVBQUUsRUFBRTtBQUNWLFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDNUIsWUFBSSxBQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUMvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQUFBQyxFQUFFO0FBQzNCLGVBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO1NBQ3pCO09BQ0Y7S0FDRjs7O1dBRUcsZ0JBQUc7QUFBRSxVQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQUU7OztXQUN0QixpQkFBRztBQUFFLFVBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7S0FBRTs7O1dBQ3ZCLGtCQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztLQUFFOzs7V0FFekIsdUJBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO0tBQUU7OztXQUNoQyx3QkFBQyxPQUFPLEVBQUU7QUFDdEIsVUFBSTtBQUNGLFlBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztPQUNoQyxDQUFDLE9BQU0sQ0FBQyxFQUFFO0FBQ1QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQzs7T0FFOUM7S0FDRjs7O1dBRU8sb0JBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQztLQUFFOzs7V0FFckMsb0JBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO0tBQUU7OztXQUVsQyxrQkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7S0FBRTs7O1dBQzNCLG1CQUFDLGdCQUFnQixFQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUM7S0FBRTs7O1dBRTlELGlCQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztLQUFFOzs7V0FDMUIsa0JBQUMsS0FBSyxFQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0tBQUU7OztXQUV0QyxpQkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7S0FBRTs7O1dBQ2xDLGtCQUFHO0FBQUcsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztLQUFFOzs7V0FFekIsOEJBQUc7QUFDbkIsVUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMscUJBQXFCLEtBQUssVUFBVSxFQUFFOzs7QUFHeEQsWUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDbEYsaUJBQU8sSUFBSSxDQUFDO1NBQ2I7T0FDRjtBQUNELGFBQU8sS0FBSyxDQUFDO0tBQ2Q7OztXQUVjLDJCQUFHO0FBQ2hCLFVBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7O0FBRXJCLFVBQUksNEJBQTRCLElBQUksS0FBSyxFQUFFO0FBQ3pDLFlBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsWUFBVztBQUMzQyxjQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLFlBQVc7QUFDekMsZ0JBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztXQUNsQyxDQUFDLENBQUM7O0FBRUgsY0FBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2xDLENBQUMsQ0FBQztPQUNKOztBQUVELFVBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUU7OztBQUc3RCxZQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDOzs7O0FBSWhCLFlBQUksQ0FBQyxVQUFVLENBQUMsWUFBVTtBQUN4QixlQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZCxlQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDO09BQ1AsTUFBTTtBQUNMLGFBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO09BQy9CO0tBQ0Y7OztXQUVhLDBCQUFHO0FBQ2YsVUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0tBQ2pDOzs7V0FFRSxhQUFDLElBQUcsRUFBRTtBQUNQLFVBQUksSUFBRyxLQUFLLFNBQVMsRUFBRTtBQUNyQixlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO09BQ3JCLE1BQU07O0FBRUwsWUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFHLENBQUMsQ0FBQztPQUNsQjtLQUNGOzs7V0FFSyxnQkFBQyxHQUFHLEVBQUU7QUFBRSxVQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FBRTs7O1dBRS9CLGdCQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUFFOzs7V0FFaEIsc0JBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0tBQUU7OztXQUV0QyxrQkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7S0FBRTs7O1dBQzNCLG1CQUFDLEdBQUcsRUFBRTtBQUFFLFVBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztLQUFFOzs7V0FFbEMsbUJBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0tBQUU7OztXQUM1QixvQkFBQyxHQUFHLEVBQUU7QUFBRSxVQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7S0FBRTs7O1dBRW5DLG9CQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztLQUFFOzs7V0FDN0IscUJBQUMsR0FBRyxFQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0tBQUU7OztXQUVyQyxvQkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7S0FBRTs7O1dBQzdCLHFCQUFDLEdBQUcsRUFBRTtBQUFFLFVBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7S0FBRTs7O1dBRTNDLGdCQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztLQUFFOzs7V0FDekIsaUJBQUMsR0FBRyxFQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0tBQUU7OztXQUVoQyxpQkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7S0FBRTs7O1dBQzNCLG1CQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztLQUFFOzs7V0FDakMsaUJBQUc7QUFBRSxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0tBQUU7OztXQUN0Qix3QkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7S0FBRTs7O1dBRXBDLHdCQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztLQUFFOzs7V0FDakMseUJBQUMsR0FBRyxFQUFFO0FBQUUsVUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0tBQUU7OztXQUV6Qyx3QkFBRztBQUFFLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7S0FBRTs7O1dBQ3RDLHNCQUFHO0FBQUUsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztLQUFFOzs7V0FFbEMsc0JBQUc7QUFDWCxVQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUU7QUFDckMsMENBalFBLEtBQUssNENBaVFxQjtPQUMzQjs7QUFFRCxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0tBQzVCOzs7V0FDVyxzQkFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUNsQyxVQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUU7QUFDckMsMENBeFFBLEtBQUssOENBd1FxQixJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtPQUNsRDs7QUFFRCxhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDckQ7OztXQUVpQiw4QkFBYTtVQUFaLE9BQU8sZ0NBQUMsRUFBRTs7QUFDM0IsVUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO0FBQ3JDLDBDQWhSQSxLQUFLLG9EQWdSMkIsT0FBTyxFQUFFO09BQzFDOztBQUVELFVBQUksS0FBSyxHQUFHLDRCQUFTLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFNUMsVUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDbkIsYUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUNqQztBQUNELFVBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3BCLGFBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7T0FDbkM7QUFDRCxVQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDN0MsYUFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7T0FDOUQ7QUFDRCxVQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUN0QixhQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO09BQ3ZDO0FBQ0QsVUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDakIsYUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUM3QjtBQUNELFVBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2xCLGFBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDL0I7O0FBRUQsVUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFN0IsVUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxhQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDO09BQ25DLE1BQU07QUFDTCxhQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDO09BQ3JDOztBQUVELFdBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxZQUFXO0FBQzNCLFlBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QixZQUFJLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxFQUFFO0FBQ3pCLGNBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQ3hELGNBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUM7V0FDdkIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUNqRSxjQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDO1dBQ3pCO0FBQ0QsZUFBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUN4QjtPQUNGLENBQUM7O0FBRUYsVUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFL0MsYUFBTyxLQUFLLENBQUM7S0FDZDs7O1dBRW9CLCtCQUFDLEtBQUssRUFBRTtBQUMzQixVQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUU7QUFDckMsMENBblVBLEtBQUssdURBbVU4QixLQUFLLEVBQUU7T0FDM0M7O0FBRUQsVUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDOztBQUVkLFVBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFNUMsWUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVoRCxXQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbEMsWUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdkQsZ0JBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxnQkFBTTtTQUNQO09BQ0Y7S0FDRjs7O1NBbFZHLEtBQUs7Ozs7Ozs7OztBQTZWWCxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVU7O0FBRTVCLE1BQUk7QUFDRixPQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztHQUM5QixDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1YsV0FBTyxLQUFLLENBQUM7R0FDZDs7QUFFRCxTQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztDQUNuQyxDQUFDOzs7QUFHRixvQkFBSyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7Ozs7QUFRL0IsS0FBSyxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQzs7Ozs7OztBQU8vQixLQUFLLENBQUMsbUJBQW1CLENBQUMsZUFBZSxHQUFHLFVBQVMsTUFBTSxFQUFDO0FBQzFELE1BQUksS0FBSyxFQUFFLEdBQUcsQ0FBQzs7QUFFZixXQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUM7OztBQUd4QixRQUFJO0FBQ0YsYUFBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QyxDQUFDLE9BQU0sQ0FBQyxFQUFFO0FBQ1QsYUFBTyxFQUFFLENBQUM7S0FDWDtHQUNGOzs7QUFHRCxNQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7QUFDZixXQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDakMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7O0FBRXJCLE9BQUcsR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUV2QyxXQUFPLFdBQVcsWUFBVSxHQUFHLENBQUcsQ0FBQztHQUNwQzs7QUFFRCxTQUFPLEVBQUUsQ0FBQztDQUNYLENBQUM7Ozs7Ozs7OztBQVNGLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEdBQUcsVUFBUyxNQUFNLEVBQUUsSUFBSSxFQUFDO0FBQzdELE1BQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3pCLENBQUM7Ozs7OztBQU1GLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEdBQUcsWUFBVSxFQUFFLENBQUM7OztBQUdqRCxLQUFLLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7Ozs7O0FBUXZELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxZQUFVO0FBQ2pDLE1BQUksTUFBTSxHQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2xDLEtBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEFBQUMsTUFBTSxHQUFHLENBQUMsR0FBSSxHQUFHLENBQUM7QUFDekMsU0FBTyxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7Q0FDdkMsQ0FBQzs7Ozs7O0FBTUYsS0FBSyxDQUFDLHNCQUFzQixHQUFHLFlBQVU7QUFDdkMsTUFBSSxZQUFZLEdBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7QUFDOUMsS0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsQUFBQyxZQUFZLEdBQUcsQ0FBQyxHQUFJLEdBQUcsQ0FBQztBQUNyRCxTQUFPLFlBQVksS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztDQUNuRCxDQUFDOzs7Ozs7QUFNRixLQUFLLENBQUMsd0JBQXdCLEdBQUcsWUFBVztBQUMxQyxNQUFJLGtCQUFrQixDQUFDOzs7Ozs7O0FBT3ZCLG9CQUFrQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztBQUMvQyxNQUFJLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDNUQsc0JBQWtCLEdBQUcsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxRQUFRLENBQUM7R0FDN0U7QUFDRCxNQUFJLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7QUFDeEMsc0JBQWtCLEdBQUcsS0FBSyxDQUFDO0dBQzVCOztBQUVELFNBQU8sa0JBQWtCLENBQUM7Q0FDM0IsQ0FBQzs7Ozs7O0FBTUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDOzs7Ozs7QUFNcEUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxDQUFDOzs7Ozs7O0FBT3pFLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7QUFPekQsS0FBSyxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLElBQUksQ0FBQzs7Ozs7O0FBTW5ELEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsR0FBRyxJQUFJLENBQUM7Ozs7OztBQU1qRCxLQUFLLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUM7OztBQUcvRSxJQUFJLFdBQVcsWUFBQSxDQUFDO0FBQ2hCLElBQU0sU0FBUyxHQUFHLDJDQUEyQyxDQUFDO0FBQzlELElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQzs7QUFFN0IsS0FBSyxDQUFDLGdCQUFnQixHQUFHLFlBQVc7O0FBRWxDLE1BQUksR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFHLEVBQUU7QUFDOUIsUUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNoQixpQkFBVyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7S0FDOUQ7O0FBRUQsT0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFTLElBQUksRUFBRTtBQUM5RCxVQUFJLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ2hDLGVBQU8sT0FBTyxDQUFDO09BQ2hCO0FBQ0QsYUFBTyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNyQyxDQUFDO0dBQ0g7OztBQUdELE1BQUksR0FBRyxDQUFDLGNBQWMsRUFBRTtBQUN0QixRQUFJLENBQUMsV0FBVyxFQUFFO0FBQ2hCLGlCQUFXLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztLQUM5RDs7QUFFRCxPQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsSUFBSSxFQUFDO0FBQzdELFVBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDNUIsZUFBTyxPQUFPLENBQUM7T0FDaEI7QUFDRCxhQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3JDLENBQUM7R0FDSDtDQUNGLENBQUM7O0FBRUYsS0FBSyxDQUFDLGtCQUFrQixHQUFHLFlBQVc7QUFDcEMsTUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztBQUN2RCxLQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUM3RCxhQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFNBQU8sQ0FBQyxDQUFDO0NBQ1YsQ0FBQzs7O0FBR0YsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7O0FBRXpCLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxVQUFTLEVBQUUsRUFBQztBQUN0QyxNQUFJLENBQUMsRUFBRSxFQUFFO0FBQUUsV0FBTztHQUFFOztBQUVwQixNQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7QUFDakIsTUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDL0I7OztBQUdELFNBQU0sRUFBRSxDQUFDLGFBQWEsRUFBRSxFQUFFO0FBQ3hCLE1BQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQy9COzs7O0FBSUQsSUFBRSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7OztBQUkxQixNQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7O0FBRWpDLEtBQUMsWUFBVztBQUNWLFVBQUk7QUFDRixVQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDWCxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBRVg7S0FDRixDQUFBLEVBQUcsQ0FBQztHQUNOO0NBQ0YsQ0FBQzs7QUFFRix1QkFBVSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7cUJBQzdCLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkN0bEJFLGNBQWM7Ozs7bUJBQ2YsUUFBUTs7SUFBakIsR0FBRzs7NEJBQ0ksZUFBZTs7Ozs7Ozs7Ozs7SUFRNUIsV0FBVztBQUVKLFdBRlAsV0FBVyxDQUVILE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFDOzBCQUYvQixXQUFXOztBQUdiLCtCQUhFLFdBQVcsNkNBR1AsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7Ozs7QUFJOUIsUUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQzFFLFdBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzdELFlBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsWUFBSSxJQUFJLEdBQUcsdUJBQVUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7QUFHNUMsWUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO0FBQzlCLGdCQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLGdCQUFNO1NBQ1A7T0FDRjtLQUNGLE1BQU07Ozs7O0FBS0wsWUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDeEM7R0FDRjs7WUF6QkcsV0FBVzs7U0FBWCxXQUFXOzs7QUE0QmpCLHVCQUFVLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztxQkFDekMsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJDbENKLGNBQWM7Ozs7K0JBQ2Qsc0JBQXNCOzs7O21DQUNsQiwyQkFBMkI7Ozs7bUJBQ2hDLFFBQVE7O0lBQWpCLEdBQUc7OzRCQUNJLGVBQWU7Ozs7OEJBQ2IsaUJBQWlCOzs7Ozs7Ozs7OztJQVFoQyxJQUFJO0FBRUcsV0FGUCxJQUFJLEdBRW1DO1FBQS9CLE9BQU8sZ0NBQUMsRUFBRTtRQUFFLEtBQUssZ0NBQUMsWUFBVSxFQUFFOzswQkFGdEMsSUFBSTs7QUFHTixXQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQzs7O0FBR3hCLFdBQU8sQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7QUFDcEMsK0JBUEUsSUFBSSw2Q0FPQSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTs7QUFFNUIsUUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDOzs7QUFHdEMsUUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtBQUNoQyxVQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztLQUN6Qjs7O0FBR0QsUUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtBQUNsQyxVQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztLQUM1Qjs7QUFFRCxRQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzs7QUFFN0IsUUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsZ0JBQWdCLEtBQUssS0FBSyxFQUFFO0FBQzFFLFVBQUksQ0FBQyx3QkFBd0IsR0FBRyxLQUFLLENBQUM7S0FDdkM7O0FBRUQsUUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtBQUNsQyxVQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUMxQjs7QUFFRCxRQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztHQUMvQjs7WUFoQ0csSUFBSTs7ZUFBSixJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQXNEYSxpQ0FBRzs7Ozs7O0FBTXRCLFVBQUksQ0FBQyxLQUFLLENBQUMsWUFBVTtBQUNuQixZQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBRTtBQUNoRCxjQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzNCO09BQ0YsQ0FBQyxDQUFDO0tBQ0o7Ozs7Ozs7O1dBTWUsNEJBQUc7QUFDakIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFakQsVUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7OztBQUczQixVQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDdEI7OztXQUVnQiw2QkFBRztBQUNsQixVQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM1QixVQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzs7QUFFNUIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNuRDs7O1dBRVkseUJBQUc7QUFDZCxVQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFVOzs7QUFHaEUsWUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDOztBQUU3QyxZQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxlQUFlLEVBQUU7QUFDN0MsY0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMxQjs7QUFFRCxZQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDOztBQUV4QyxZQUFJLGVBQWUsS0FBSyxDQUFDLEVBQUU7QUFDekIsY0FBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDN0I7T0FDRixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDVjs7O1dBRWUsNEJBQUc7QUFDakIsVUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEM7OztXQUVjLDJCQUFHO0FBQ2hCLFVBQUksZ0JBQWdCLEdBQUcsQ0FBQztVQUNwQixLQUFLLFlBQUE7VUFBRSxHQUFHLFlBQUEsQ0FBQzs7QUFFZixVQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUNuQixlQUFPLENBQUMsQ0FBQztPQUNWOztBQUVELFVBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7QUFFL0IsVUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDakMsZ0JBQVEsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztPQUNyQzs7QUFFRCxXQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztBQUNuQyxhQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixXQUFHLEdBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3hCLFlBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDeEIsYUFBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDdEI7O0FBRUQsd0JBQWdCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztPQUNqQzs7QUFFRCxhQUFPLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDMUM7OztXQUVtQixnQ0FBRztBQUNyQixVQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzNDOzs7OztXQUdrQiwrQkFBRztBQUNwQixVQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDOztBQUU5QixVQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2QyxVQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQzs7OztBQUkvQyxVQUFJLFlBQVksR0FBRyxTQUFmLFlBQVksQ0FBWSxDQUFDLEVBQUM7QUFDNUIsWUFBSSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsT0FBTzs7QUFFaEMsWUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7OztBQUdyQyxZQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDOztBQUVyQyxZQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztPQUM3QixDQUFDOztBQUVGLFVBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQ3JDOzs7V0FFbUIsZ0NBQUc7QUFDckIsVUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztBQUMvQixVQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztBQUMvQixVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN4QyxVQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUNqRDs7O1dBRWUsNEJBQUc7QUFDakIsVUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFBRSxZQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztPQUFFO0FBQ2pFLFVBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVU7QUFDcEQsWUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO09BQzdFLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDVDs7Ozs7V0FHc0IsbUNBQUc7QUFDeEIsVUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7OztBQUk3QyxVQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDN0U7OztXQUVNLG1CQUFHOztBQUVSLFVBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUFFLFlBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO09BQUU7O0FBRXRELFVBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO0FBQUUsWUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7T0FBRTs7QUFFNUQsaUNBbE1FLElBQUkseUNBa01VO0tBQ2pCOzs7V0FFYSwwQkFBRzs7QUFFZixVQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtBQUFFLFlBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztPQUFFO0tBQzdHOzs7V0FFcUIsa0NBQUc7QUFDdkIsVUFBSSxvQkFBb0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFXO0FBQ25ELFlBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztPQUNqQyxDQUFDLENBQUM7O0FBRUgsVUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDOztBQUUvQixVQUFJLENBQUMsTUFBTSxFQUFFLE9BQU87O0FBRXBCLFlBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUM3RCxZQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLG9CQUFvQixDQUFDLENBQUM7O0FBRTFELFVBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVc7QUFDM0MsY0FBTSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2hFLGNBQU0sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztPQUM5RCxDQUFDLENBQUMsQ0FBQztLQUNMOzs7V0FFZ0IsNkJBQUc7QUFDbEIsVUFBSSxDQUFDLDBCQUFPLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO0FBQ3JELFlBQUksTUFBTSxHQUFHLDRCQUFTLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxjQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksb0NBQW9DLENBQUM7QUFDN0UsWUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsa0NBQU8sUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO09BQ3pCOztBQUVELFVBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMvQixVQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsZUFBTztPQUNSOztBQUVELFVBQUksaUJBQWlCLEdBQUcsU0FBcEIsaUJBQWlCLEdBQWM7QUFDakMsWUFBSSxhQUFhLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBVztBQUM1QyxjQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDakMsQ0FBQyxDQUFDOztBQUVILFlBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFaEMsYUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsY0FBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLGVBQUssQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDdEQsY0FBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUM1QixpQkFBSyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztXQUNwRDtTQUNGO09BQ0YsQ0FBQzs7QUFFRixZQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7O0FBRXJELFVBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVc7QUFDM0MsY0FBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO09BQ3pELENBQUMsQ0FBQyxDQUFDO0tBQ0w7Ozs7Ozs7Ozs7V0FRUyxzQkFBRztBQUNYLFVBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxzQ0FBbUIsQ0FBQztBQUMzRCxhQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDekI7OztXQUVlLDRCQUFHO0FBQ2pCLFVBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLElBQUksc0NBQW1CLENBQUM7QUFDdkUsYUFBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7S0FDL0I7OztXQUVXLHNCQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxJQUFJLEVBQUU7QUFDVCxjQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7T0FDcEU7O0FBRUQsYUFBTyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN2RDs7O1dBRWlCLDRCQUFDLE9BQU8sRUFBRTtBQUMxQixVQUFJLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUYsVUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLGFBQU87QUFDTCxhQUFLLEVBQUUsS0FBSztPQUNiLENBQUM7S0FDSDs7O1dBRW9CLCtCQUFDLEtBQUssRUFBRTtBQUMzQixVQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RDLFVBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM3Qzs7Ozs7Ozs7OztXQVFRLHFCQUFHLEVBQUU7OztTQTNTVixJQUFJOzs7Ozs7OztBQW9UVixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzs7QUFFM0IsSUFBSSxpQkFBaUIsR0FBRyxTQUFwQixpQkFBaUIsQ0FBWSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQWM7TUFBWixPQUFPLGdDQUFDLEVBQUU7O0FBQ3RFLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7QUFFL0IsU0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRXBCLE1BQUksS0FBSyxFQUFFO0FBQ1QsV0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDdkI7QUFDRCxNQUFJLFFBQVEsRUFBRTtBQUNaLFdBQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0dBQzdCO0FBQ0QsU0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRXBCLE1BQUksS0FBSyxHQUFHLGlDQUFjLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLFFBQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXhCLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQzs7QUFFRixJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQzs7O0FBRzVDLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDO0FBQ2hELElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDOzs7O0FBSTVDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO0FBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDOztBQUVoRCxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQzs7Ozs7Ozs7OztBQVVoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBUyxLQUFLLEVBQUM7Ozs7Ozs7OztBQVN0QyxPQUFLLENBQUMscUJBQXFCLEdBQUcsVUFBUyxPQUFPLEVBQUUsS0FBSyxFQUFDO0FBQ3JELFFBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7O0FBRXBDLFFBQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixjQUFRLEdBQUcsS0FBSyxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7S0FDdEM7O0FBRUQsUUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFOztBQUV2QixXQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztLQUN6Qjs7QUFFRCxZQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDcEMsQ0FBQzs7Ozs7Ozs7O0FBU0QsT0FBSyxDQUFDLG1CQUFtQixHQUFHLFVBQVMsTUFBTSxFQUFDO0FBQzNDLFFBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO0FBQzFDLFFBQUksR0FBRyxZQUFBLENBQUM7O0FBRVIsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDeEMsU0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTFDLFVBQUksR0FBRyxFQUFFO0FBQ1AsZUFBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDcEI7S0FDRjs7QUFFRCxXQUFPLElBQUksQ0FBQztHQUNiLENBQUM7Ozs7Ozs7QUFPRixPQUFLLENBQUMsYUFBYSxHQUFHLFVBQVMsTUFBTSxFQUFDO0FBQ3BDLFFBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFM0MsUUFBSSxFQUFFLEVBQUU7QUFDTixhQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkM7O0FBRUQsV0FBTyxFQUFFLENBQUM7R0FDWCxDQUFDOzs7Ozs7Ozs7QUFTRCxPQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLE1BQU0sRUFBQztBQUMzQyxRQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNDLFFBQUksQ0FBQyxFQUFFLEVBQUU7OztBQUdQLFVBQUksS0FBSyxDQUFDLG1CQUFtQixFQUFFO0FBQzdCLFVBQUUsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7T0FDaEMsTUFBTTtBQUNMLFdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7T0FDakU7S0FDRjs7O0FBR0QsUUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7QUFDNUIsUUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7O0FBRS9DLFFBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQzdCLFFBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEQsUUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7O0FBRTlDLFdBQU8sSUFBSSxDQUFDO0dBQ2IsQ0FBQzs7Ozs7QUFLRCxPQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixHQUFHLFlBQVU7QUFDaEQsUUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO0FBQ3RELFVBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDL0I7R0FDRixDQUFDO0NBRUgsQ0FBQzs7QUFFRix1QkFBVSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRTFDLHVCQUFVLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUMxQyxJQUFJOzs7Ozs7Ozs7Ozs7OzttQkMxZEUsUUFBUTs7SUFBakIsR0FBRzs7OEJBQ00saUJBQWlCOzs7Ozs7Ozs7Ozs7OztBQVl0QyxJQUFJLGdCQUFnQixHQUFHLFNBQW5CLGdCQUFnQixDQUFZLElBQUksRUFBRTtBQUNwQyxNQUFJLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRWhCLE1BQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtBQUNkLFFBQUksR0FBRyw0QkFBUyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRXhDLFNBQUssSUFBSSxJQUFJLElBQUksZ0JBQWdCLENBQUMsU0FBUyxFQUFFO0FBQzNDLFVBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0M7R0FDRjs7QUFFRCxrQkFBZ0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRXJELFFBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNwQyxPQUFHLEVBQUUsZUFBVztBQUNkLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUNyQjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7QUFDZCxXQUFPLElBQUksQ0FBQztHQUNiO0NBQ0YsQ0FBQzs7QUFFRixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQ25ELE1BQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO0FBQ2pDLE1BQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLE1BQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7O0FBRXBCLE1BQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLE1BQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7QUFFM0IsTUFBSSxVQUFVLEdBQUcsU0FBYixVQUFVLENBQVksQ0FBQyxFQUFFO0FBQzNCLFFBQUksRUFBRSxFQUFFLEdBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQSxBQUFDLEVBQUU7QUFDbkIsWUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRTtBQUNsQyxXQUFHLEVBQUUsZUFBVztBQUNkLGlCQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEI7T0FDRixDQUFDLENBQUM7S0FDSjtHQUNGLENBQUM7O0FBRUYsTUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO0FBQ2pCLEtBQUMsR0FBRyxTQUFTLENBQUM7O0FBRWQsV0FBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2hCLGdCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMxQjtHQUNGO0NBQ0YsQ0FBQzs7QUFFRixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsRUFBRSxFQUFFO0FBQ25ELE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUNsQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzNDLFFBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixRQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO0FBQ2pCLFlBQU0sR0FBRyxHQUFHLENBQUM7QUFDYixZQUFNO0tBQ1A7R0FDRjs7QUFFRCxTQUFPLE1BQU0sQ0FBQztDQUNmLENBQUM7O3FCQUVhLGdCQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQzdFVCxjQUFjOzs7OzBCQUNuQixpQkFBaUI7Ozs7OEJBQ2Isc0JBQXNCOzs7O2dDQUNwQix3QkFBd0I7Ozs7cUJBQzFCLFdBQVc7O0lBQXBCLEdBQUc7OzhCQUNNLGlCQUFpQjs7Ozs0QkFDbkIsZUFBZTs7OztBQUVsQyxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDeEIsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHO0FBQ2QsV0FBUyxFQUFjLFdBQVc7QUFDbEMsV0FBUyxFQUFjLFlBQVk7QUFDbkMsT0FBSyxFQUFrQixPQUFPO0FBQzlCLG9CQUFrQixFQUFLLDRDQUE0QztBQUNuRSxnQkFBYyxFQUFTLDBCQUEwQjtBQUNqRCx1QkFBcUIsRUFBRSxZQUFZO0FBQ25DLG1CQUFpQixFQUFNLE9BQU87QUFDOUIsUUFBTSxFQUFpQixrQ0FBa0M7QUFDekQsUUFBTSxFQUFpQiw2QkFBNkI7QUFDcEQsV0FBUyxFQUFjLHdEQUF3RDtDQUNoRixDQUFDOzs7Ozs7OztJQU9JLGdCQUFnQjtBQUVULFdBRlAsZ0JBQWdCLENBRVIsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7MEJBRi9CLGdCQUFnQjs7QUFHbEIsK0JBSEUsZ0JBQWdCLDZDQUdaLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFOztBQUU5QixVQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUMzRCxVQUFNLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDOzs7Ozs7QUFNakUsVUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFXO0FBQ3JDLFVBQUksTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUU7QUFDMUQsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osZUFBTztPQUNSOztBQUVELFlBQU0sQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7O0FBRWxFLFVBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdDLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3RDLFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixZQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ3hDO0tBQ0YsQ0FBQyxDQUFDLENBQUM7R0FDTDs7WUExQkcsZ0JBQWdCOztlQUFoQixnQkFBZ0I7O1dBNEJQLHlCQUFHO0FBQ2QsVUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO0FBQ3RFLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiLE1BQU07QUFDTCxZQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDYjtLQUNGOzs7V0FFTyxvQkFBRztBQUNULHdDQXJDRSxnQkFBZ0IsMENBcUNJLEtBQUssRUFBRTtBQUMzQixpQkFBUyxFQUFFLHdCQUF3QjtPQUNwQyxFQUFFO0tBQ0o7OztXQUVXLHdCQUFHO0FBQ2IsVUFBSSxPQUFPLDBCQUFPLFFBQVEsQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUMxQyxrQ0FBTyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsNEJBQVMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUN2RDtLQUNGOzs7V0FFWSx5QkFBRztBQUNkLFVBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7O0FBRXZDLFVBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7QUFFcEIsVUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNYLGVBQU87T0FDUjs7QUFFRCxXQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxZQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsWUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQy9CLGNBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUI7T0FDRjtLQUNGOzs7V0FFYSx3QkFBQyxLQUFLLEVBQUU7QUFDcEIsVUFBSSxPQUFPLDBCQUFPLFFBQVEsQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUNsRSxlQUFPO09BQ1I7O0FBRUQsVUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDOztBQUU5RCxVQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxXQUFLLElBQUksRUFBQyxHQUFHLENBQUMsRUFBRSxFQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFDLEVBQUUsRUFBRTtBQUNuRCxZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO09BQ25DOztBQUVELGdDQUFPLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyw0QkFBUyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUV2RSxVQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3BCLGFBQU8sQ0FBQyxFQUFFLEVBQUU7QUFDVixZQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ2xDLFlBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtBQUNuQixnQkFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDakQ7QUFDRCxZQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUU7QUFDekIsd0JBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUNqQixPQUFPLEVBQ1AsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksTUFBTSxFQUN6QixTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUN2RDtBQUNELFlBQUksU0FBUyxDQUFDLGVBQWUsRUFBRTtBQUM3QixnQkFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUM7U0FDckU7QUFDRCxZQUFJLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRTtBQUMvQix3QkFBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLGlCQUFpQixFQUNqQixjQUFjLENBQUMsU0FBUyxDQUFDLGVBQWUsSUFBSSxNQUFNLEVBQ25DLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7U0FDN0Q7QUFDRCxZQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUU7QUFDekIsY0FBSSxTQUFTLENBQUMsYUFBYSxFQUFFO0FBQzNCLDBCQUFjLENBQUMsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixjQUFjLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztXQUNoRixNQUFNO0FBQ0wsa0JBQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7V0FDdEQ7U0FDRjtBQUNELFlBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTtBQUN2QixjQUFJLFNBQVMsQ0FBQyxTQUFTLEtBQUssWUFBWSxFQUFFO0FBQ3hDLGtCQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLG9CQUFrQixRQUFRLHNCQUFpQixRQUFRLHNCQUFpQixRQUFRLEFBQUUsQ0FBQztXQUNsSCxNQUFNLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7QUFDM0Msa0JBQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsZ0JBQWMsUUFBUSxrQkFBYSxRQUFRLGtCQUFhLFFBQVEsQUFBRSxDQUFDO1dBQ3RHLE1BQU0sSUFBSSxTQUFTLENBQUMsU0FBUyxLQUFLLFdBQVcsRUFBRTtBQUM5QyxrQkFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxnQkFBYyxTQUFTLGdCQUFXLFNBQVMsb0JBQWUsUUFBUSxpQkFBWSxRQUFRLEFBQUUsQ0FBQztXQUM1SCxNQUFNLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7QUFDNUMsa0JBQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsZ0JBQWMsUUFBUSxrQkFBYSxRQUFRLGtCQUFhLFFBQVEsa0JBQWEsUUFBUSxBQUFFLENBQUM7V0FDM0g7U0FDRjtBQUNELFlBQUksU0FBUyxDQUFDLFdBQVcsSUFBSSxTQUFTLENBQUMsV0FBVyxLQUFLLENBQUMsRUFBRTtBQUN4RCxjQUFNLFFBQVEsR0FBRywwQkFBTyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxnQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQUFBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFdBQVcsR0FBSSxJQUFJLENBQUM7QUFDbEUsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUM3QixnQkFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQzFCLGdCQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDN0I7QUFDRCxZQUFJLFNBQVMsQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7QUFDOUQsY0FBSSxTQUFTLENBQUMsVUFBVSxLQUFLLFlBQVksRUFBRTtBQUN6QyxrQkFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQztXQUNwRCxNQUFNO0FBQ0wsa0JBQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1dBQ3BFO1NBQ0Y7T0FDRjtLQUNGOzs7U0F2SUcsZ0JBQWdCOzs7O0FBNEl0QixTQUFTLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3RDLFNBQU8sT0FBTzs7QUFFWixVQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQ3ZDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FDdkMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUN2QyxPQUFPLEdBQUcsR0FBRyxDQUFDO0NBQ2pCOztBQUVELFNBQVMsY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFOztBQUV2QyxNQUFJO0FBQ0YsTUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7R0FDeEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0NBQ2Y7O0FBRUQsdUJBQVUsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztxQkFDbkQsZ0JBQWdCOzs7Ozs7Ozs7Ozs7OztBQ3BML0IsSUFBSSxhQUFhLEdBQUc7QUFDbEIsWUFBVSxFQUFFLFVBQVU7QUFDdEIsVUFBUSxFQUFFLFFBQVE7QUFDbEIsV0FBUyxFQUFFLFNBQVM7Q0FDckIsQ0FBQzs7Ozs7OztBQU9GLElBQUksYUFBYSxHQUFHO0FBQ2xCLGFBQVcsRUFBRSxXQUFXO0FBQ3hCLFlBQVUsRUFBRSxVQUFVO0FBQ3RCLGdCQUFjLEVBQUUsY0FBYztBQUM5QixZQUFVLEVBQUUsVUFBVTtBQUN0QixZQUFVLEVBQUUsVUFBVTtDQUN2QixDQUFDOztRQUVPLGFBQWEsR0FBYixhQUFhO1FBQUUsYUFBYSxHQUFiLGFBQWE7Ozs7Ozs7Ozs7Ozs7NEJDeEJaLGtCQUFrQjs7OzttQkFDdEIsUUFBUTs7SUFBakIsR0FBRzs7OEJBQ00saUJBQWlCOzs7Ozs7Ozs7Ozs7Ozs7OztBQWV0QyxJQUFJLGFBQWEsR0FBRyxTQUFoQixhQUFhLENBQVksTUFBTSxFQUFFO0FBQ25DLE1BQUksSUFBSSxHQUFHLElBQUksQ0FBQzs7QUFFaEIsTUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO0FBQ2QsUUFBSSxHQUFHLDRCQUFTLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEMsU0FBSyxJQUFJLElBQUksSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFO0FBQ3hDLFVBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzVDO0dBQ0Y7O0FBRUQsUUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDdEIsTUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNwQyxPQUFHLEVBQUUsZUFBVztBQUNkLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FDNUI7R0FDRixDQUFDLENBQUM7O0FBRUgsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsUUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUMzQjs7QUFFRCxNQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7QUFDZCxXQUFPLElBQUksQ0FBQztHQUNiO0NBQ0YsQ0FBQzs7QUFFRixhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLDBCQUFhLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLGFBQWEsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQzs7Ozs7OztBQU9wRCxhQUFhLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRztBQUN2QyxVQUFRLEVBQUUsUUFBUTtBQUNsQixZQUFVLEVBQUUsVUFBVTtBQUN0QixlQUFhLEVBQUUsYUFBYTtDQUM3QixDQUFDOzs7QUFHRixLQUFLLElBQUksTUFBSyxJQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFO0FBQ3hELGVBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLE1BQUssQ0FBQyxHQUFHLElBQUksQ0FBQztDQUM5Qzs7QUFFRCxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLEtBQUssRUFBRTtBQUNsRCxNQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNoQyxNQUFJLEVBQUUsRUFBRSxHQUFDLEtBQUssSUFBSSxJQUFJLENBQUEsQUFBQyxFQUFFO0FBQ3ZCLFVBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNqQyxTQUFHLEVBQUUsZUFBVztBQUNkLGVBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUM1QjtLQUNGLENBQUMsQ0FBQztHQUNKOztBQUVELE9BQUssQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBVztBQUM3RCxRQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0osTUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXpCLE1BQUksQ0FBQyxPQUFPLENBQUM7QUFDWCxRQUFJLEVBQUUsVUFBVTtBQUNoQixTQUFLLEVBQUUsS0FBSztHQUNiLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsVUFBUyxNQUFNLEVBQUU7QUFDdEQsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLE1BQUksS0FBSyxZQUFBLENBQUM7O0FBRVYsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMzQyxTQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtBQUNwQixVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUIsWUFBTTtLQUNQO0dBQ0Y7O0FBRUQsTUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNYLFFBQUksRUFBRSxhQUFhO0FBQ25CLFNBQUssRUFBRSxLQUFLO0dBQ2IsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7QUFFRixhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLEVBQUUsRUFBRTtBQUNsRCxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7O0FBRWxCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0MsUUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLFFBQUksS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDbkIsWUFBTSxHQUFHLEtBQUssQ0FBQztBQUNmLFlBQU07S0FDUDtHQUNGOztBQUVELFNBQU8sTUFBTSxDQUFDO0NBQ2YsQ0FBQzs7cUJBRWEsYUFBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJDdEhOLGNBQWM7Ozs7bUJBQ2YsUUFBUTs7SUFBakIsR0FBRzs7c0JBQ1MsV0FBVzs7SUFBdkIsTUFBTTs7a0NBQ1MsdUJBQXVCOzs7OzRCQUMvQixlQUFlOzs7O0lBRTVCLGlCQUFpQjtBQUVWLFdBRlAsaUJBQWlCLENBRVQsTUFBTSxFQUFFLE9BQU8sRUFBRTswQkFGekIsaUJBQWlCOztBQUduQiwrQkFIRSxpQkFBaUIsNkNBR2IsTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUN2QixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRVosVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVc7QUFDeEYsVUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3BCLFVBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNiLENBQUMsQ0FBQyxDQUFDOztBQUVKLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFXO0FBQzNGLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3JFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFVBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUN0QixDQUFDLENBQUMsQ0FBQzs7QUFFSixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDM0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUMzRyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDL0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzdHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNqSCxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDN0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxF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S0FBSyxFQUFFLENBQUM7V0FDakI7U0FDRixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQjs7R0FDRjs7O0FBR0QsTUFBSTs7QUFFRixXQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDMUQsQ0FBQyxPQUFNLEdBQUcsRUFBRTtBQUNYLFdBQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzFCOzs7QUFHRCxNQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUU7QUFDMUIsV0FBTyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7R0FDaEM7O0FBRUQsTUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO0FBQ3hCLFdBQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztHQUM3Qzs7O0FBR0QsTUFBSTtBQUNGLFdBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNoQixDQUFDLE9BQU0sR0FBRyxFQUFFO0FBQ1gsV0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDMUI7O0FBRUQsU0FBTyxPQUFPLENBQUM7Q0FDaEIsQ0FBQzs7cUJBRWEsR0FBRyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIiwiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIixudWxsLCJtb2R1bGUuZXhwb3J0cyA9IFNhZmVQYXJzZVR1cGxlXG5cbmZ1bmN0aW9uIFNhZmVQYXJzZVR1cGxlKG9iaiwgcmV2aXZlcikge1xuICAgIHZhciBqc29uXG4gICAgdmFyIGVycm9yID0gbnVsbFxuXG4gICAgdHJ5IHtcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2Uob2JqLCByZXZpdmVyKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVyclxuICAgIH1cblxuICAgIHJldHVybiBbZXJyb3IsIGpzb25dXG59XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4vYnV0dG9uJztcblxuLyogQmlnIFBsYXkgQnV0dG9uXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBJbml0aWFsIHBsYXkgYnV0dG9uLiBTaG93cyBiZWZvcmUgdGhlIHZpZGVvIGhhcyBwbGF5ZWQuIFRoZSBoaWRpbmcgb2YgdGhlXG4gKiBiaWcgcGxheSBidXR0b24gaXMgZG9uZSB2aWEgQ1NTIGFuZCBwbGF5ZXIgc3RhdGVzLlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmlnUGxheUJ1dHRvbiBleHRlbmRzIEJ1dHRvbiB7XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtYmlnLXBsYXktYnV0dG9uJyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4nLFxuICAgICAgJ2FyaWEtbGFiZWwnOiAncGxheSB2aWRlbydcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMucGxheWVyXy5wbGF5KCk7XG4gIH1cblxufVxuXG5CdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ0JpZ1BsYXlCdXR0b24nLCBCaWdQbGF5QnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IEJpZ1BsYXlCdXR0b247XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qIEJ1dHRvbiAtIEJhc2UgY2xhc3MgZm9yIGFsbCBidXR0b25zXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgYnV0dG9uc1xuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5lbWl0VGFwRXZlbnRzKCk7XG5cbiAgICB0aGlzLm9uKCd0YXAnLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICB0aGlzLm9uKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xuICAgIHRoaXMub24oJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgdGhpcy5vbignYmx1cicsIHRoaXMuaGFuZGxlQmx1cik7XG4gIH1cblxuICBjcmVhdGVFbCh0eXBlLCBwcm9wcykge1xuICAgIC8vIEFkZCBzdGFuZGFyZCBBcmlhIGFuZCBUYWJpbmRleCBpbmZvXG4gICAgcHJvcHMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKCksXG4gICAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICAgJ2FyaWEtbGl2ZSc6ICdwb2xpdGUnLCAvLyBsZXQgdGhlIHNjcmVlbiByZWFkZXIgdXNlciBrbm93IHRoYXQgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiBtYXkgY2hhbmdlXG4gICAgICB0YWJJbmRleDogMFxuICAgIH0sIHByb3BzKTtcblxuICAgIGxldCBlbCA9IHN1cGVyLmNyZWF0ZUVsKHR5cGUsIHByb3BzKTtcblxuICAgIC8vIGlmIGlubmVySFRNTCBoYXNuJ3QgYmVlbiBvdmVycmlkZGVuIChiaWdQbGF5QnV0dG9uKSwgYWRkIGNvbnRlbnQgZWxlbWVudHNcbiAgICBpZiAoIXByb3BzLmlubmVySFRNTCkge1xuICAgICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLWNvbnRlbnQnXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5jb250cm9sVGV4dF8gPSBMaWIuY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLXRleHQnLFxuICAgICAgICBpbm5lckhUTUw6IHRoaXMubG9jYWxpemUodGhpcy5idXR0b25UZXh0KSB8fCAnTmVlZCBUZXh0J1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuY29udGVudEVsXy5hcHBlbmRDaGlsZCh0aGlzLmNvbnRyb2xUZXh0Xyk7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIGB2anMtY29udHJvbCB2anMtYnV0dG9uICR7c3VwZXIuYnVpbGRDU1NDbGFzcygpfWA7XG4gIH1cblxuICAvLyBDbGljayAtIE92ZXJyaWRlIHdpdGggc3BlY2lmaWMgZnVuY3Rpb25hbGl0eSBmb3IgYnV0dG9uXG4gIGhhbmRsZUNsaWNrKCkge31cblxuICAvLyBGb2N1cyAtIEFkZCBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRcbiAgaGFuZGxlRm9jdXMoKSB7XG4gICAgRXZlbnRzLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIExpYi5iaW5kKHRoaXMsIHRoaXMuaGFuZGxlS2V5UHJlc3MpKTtcbiAgfVxuXG4gIC8vIEtleVByZXNzIChkb2N1bWVudCBsZXZlbCkgLSBUcmlnZ2VyIGNsaWNrIHdoZW4ga2V5cyBhcmUgcHJlc3NlZFxuICBoYW5kbGVLZXlQcmVzcyhldmVudCkge1xuICAgIC8vIENoZWNrIGZvciBzcGFjZSBiYXIgKDMyKSBvciBlbnRlciAoMTMpIGtleXNcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDMyIHx8IGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGFuZGxlQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICAvLyBCbHVyIC0gUmVtb3ZlIGtleWJvYXJkIHRyaWdnZXJzXG4gIGhhbmRsZUJsdXIoKSB7XG4gICAgRXZlbnRzLm9mZihkb2N1bWVudCwgJ2tleWRvd24nLCBMaWIuYmluZCh0aGlzLCB0aGlzLmhhbmRsZUtleVByZXNzKSk7XG4gIH1cblxufVxuXG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQnV0dG9uJywgQnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlldyBQbGF5ZXIgQ29tcG9uZW50IC0gQmFzZSBjbGFzcyBmb3IgYWxsIFVJIG9iamVjdHNcbiAqXG4gKi9cblxuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliLmpzJztcbmltcG9ydCAqIGFzIFZqc1V0aWwgZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG4vKipcbiAqIEJhc2UgVUkgQ29tcG9uZW50IGNsYXNzXG4gKlxuICogQ29tcG9uZW50cyBhcmUgZW1iZWRkYWJsZSBVSSBvYmplY3RzIHRoYXQgYXJlIHJlcHJlc2VudGVkIGJ5IGJvdGggYVxuICogamF2YXNjcmlwdCBvYmplY3QgYW5kIGFuIGVsZW1lbnQgaW4gdGhlIERPTS4gVGhleSBjYW4gYmUgY2hpbGRyZW4gb2Ygb3RoZXJcbiAqIGNvbXBvbmVudHMsIGFuZCBjYW4gaGF2ZSBtYW55IGNoaWxkcmVuIHRoZW1zZWx2ZXMuXG4gKlxuICogICAgIC8vIGFkZGluZyBhIGJ1dHRvbiB0byB0aGUgcGxheWVyXG4gKiAgICAgdmFyIGJ1dHRvbiA9IHBsYXllci5hZGRDaGlsZCgnYnV0dG9uJyk7XG4gKiAgICAgYnV0dG9uLmVsKCk7IC8vIC0+IGJ1dHRvbiBlbGVtZW50XG4gKlxuICogICAgIDxkaXYgY2xhc3M9XCJ2aWRlby1qc1wiPlxuICogICAgICAgPGRpdiBjbGFzcz1cInZqcy1idXR0b25cIj5CdXR0b248L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqXG4gKiBDb21wb25lbnRzIGFyZSBhbHNvIGV2ZW50IGVtaXR0ZXJzLlxuICpcbiAqICAgICBidXR0b24ub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdCdXR0b24gQ2xpY2tlZCEnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgYnV0dG9uLnRyaWdnZXIoJ2N1c3RvbWV2ZW50Jyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBsYXllciAgTWFpbiBQbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG5cbiAgICAvLyBUaGUgY29tcG9uZW50IG1pZ2h0IGJlIHRoZSBwbGF5ZXIgaXRzZWxmIGFuZCB3ZSBjYW4ndCBwYXNzIGB0aGlzYCB0byBzdXBlclxuICAgIGlmICghcGxheWVyICYmIHRoaXMucGxheSkge1xuICAgICAgdGhpcy5wbGF5ZXJfID0gcGxheWVyID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8gPSBwbGF5ZXI7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBhIGNvcHkgb2YgcHJvdG90eXBlLm9wdGlvbnNfIHRvIHByb3RlY3QgYWdhaW5zdCBvdmVycmlkaW5nIGdsb2JhbCBkZWZhdWx0c1xuICAgIHRoaXMub3B0aW9uc18gPSBMaWIub2JqLmNvcHkodGhpcy5vcHRpb25zXyk7XG5cbiAgICAvLyBVcGRhdGVkIG9wdGlvbnMgd2l0aCBzdXBwbGllZCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIEdldCBJRCBmcm9tIG9wdGlvbnMgb3Igb3B0aW9ucyBlbGVtZW50IGlmIG9uZSBpcyBzdXBwbGllZFxuICAgIHRoaXMuaWRfID0gb3B0aW9ucy5pZCB8fCAob3B0aW9ucy5lbCAmJiBvcHRpb25zLmVsLmlkKTtcblxuICAgIC8vIElmIHRoZXJlIHdhcyBubyBJRCBmcm9tIHRoZSBvcHRpb25zLCBnZW5lcmF0ZSBvbmVcbiAgICBpZiAoIXRoaXMuaWRfKSB7XG4gICAgICAvLyBEb24ndCByZXF1aXJlIHRoZSBwbGF5ZXIgSUQgZnVuY3Rpb24gaW4gdGhlIGNhc2Ugb2YgbW9jayBwbGF5ZXJzXG4gICAgICBsZXQgaWQgPSBwbGF5ZXIgJiYgcGxheWVyLmlkICYmIHBsYXllci5pZCgpIHx8ICdub19wbGF5ZXInO1xuICAgICAgdGhpcy5pZF8gPSBgJHtpZH1fY29tcG9uZW50XyR7TGliLmd1aWQrK31gO1xuICAgIH1cblxuICAgIHRoaXMubmFtZV8gPSBvcHRpb25zLm5hbWUgfHwgbnVsbDtcblxuICAgIC8vIENyZWF0ZSBlbGVtZW50IGlmIG9uZSB3YXNuJ3QgcHJvdmlkZWQgaW4gb3B0aW9uc1xuICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICB0aGlzLmVsXyA9IG9wdGlvbnMuZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmNyZWF0ZUVsICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5lbF8gPSB0aGlzLmNyZWF0ZUVsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZHJlbl8gPSBbXTtcbiAgICB0aGlzLmNoaWxkSW5kZXhfID0ge307XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF8gPSB7fTtcblxuICAgIC8vIEFkZCBhbnkgY2hpbGQgY29tcG9uZW50cyBpbiBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMuaW5pdENoaWxkcmVuICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5pbml0Q2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5KHJlYWR5KTtcbiAgICAvLyBEb24ndCB3YW50IHRvIHRyaWdnZXIgcmVhZHkgaGVyZSBvciBpdCB3aWxsIGJlZm9yZSBpbml0IGlzIGFjdHVhbGx5XG4gICAgLy8gZmluaXNoZWQgZm9yIGFsbCBjaGlsZHJlbiB0aGF0IHJ1biB0aGlzIGNvbnN0cnVjdG9yXG5cbiAgICBpZiAob3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5lbmFibGVUb3VjaEFjdGl2aXR5KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGVtcCBmb3IgRVM2IGNsYXNzIHRyYW5zaXRpb24sIHJlbW92ZSBiZWZvcmUgNS4wXG4gIGluaXQoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2luaXQgY2FsbGVkIG9uIENvbXBvbmVudCcpO1xuICAgIENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIGNvbXBvbmVudCBhbmQgYWxsIGNoaWxkIGNvbXBvbmVudHNcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKHsgdHlwZTogJ2Rpc3Bvc2UnLCBidWJibGVzOiBmYWxzZSB9KTtcblxuICAgIC8vIERpc3Bvc2UgYWxsIGNoaWxkcmVuLlxuICAgIGlmICh0aGlzLmNoaWxkcmVuXykge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY2hpbGRyZW5fLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuX1tpXS5kaXNwb3NlKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbl9baV0uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVsZXRlIGNoaWxkIHJlZmVyZW5jZXNcbiAgICB0aGlzLmNoaWxkcmVuXyA9IG51bGw7XG4gICAgdGhpcy5jaGlsZEluZGV4XyA9IG51bGw7XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF8gPSBudWxsO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBldmVudCBsaXN0ZW5lcnMuXG4gICAgdGhpcy5vZmYoKTtcblxuICAgIC8vIFJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG4gICAgaWYgKHRoaXMuZWxfLnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMuZWxfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbF8pO1xuICAgIH1cblxuICAgIExpYi5yZW1vdmVEYXRhKHRoaXMuZWxfKTtcbiAgICB0aGlzLmVsXyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb21wb25lbnQncyBwbGF5ZXJcbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfVxuICAgKi9cbiAgcGxheWVyKCkge1xuICAgIHJldHVybiB0aGlzLnBsYXllcl87XG4gIH1cblxuICAvKipcbiAgICogRGVlcCBtZXJnZSBvZiBvcHRpb25zIG9iamVjdHNcbiAgICpcbiAgICogV2hlbmV2ZXIgYSBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qgb24gYm90aCBvcHRpb25zIG9iamVjdHNcbiAgICogdGhlIHR3byBwcm9wZXJ0aWVzIHdpbGwgYmUgbWVyZ2VkIHVzaW5nIExpYi5vYmouZGVlcE1lcmdlLlxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIG1lcmdpbmcgb3B0aW9ucyBmb3IgY2hpbGQgY29tcG9uZW50cy4gV2VcbiAgICogd2FudCBpdCB0byBiZSBlYXN5IHRvIG92ZXJyaWRlIGluZGl2aWR1YWwgb3B0aW9ucyBvbiBhIGNoaWxkXG4gICAqIGNvbXBvbmVudCB3aXRob3V0IGhhdmluZyB0byByZXdyaXRlIGFsbCB0aGUgb3RoZXIgZGVmYXVsdCBvcHRpb25zLlxuICAgKlxuICAgKiAgICAgUGFyZW50LnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICAnY2hpbGRPbmUnOiB7ICdmb28nOiAnYmFyJywgJ2FzZGYnOiAnZmRzYScgfSxcbiAgICogICAgICAgICAnY2hpbGRUd28nOiB7fSxcbiAgICogICAgICAgICAnY2hpbGRUaHJlZSc6IHt9XG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICAgIG5ld09wdGlvbnMgPSB7XG4gICAqICAgICAgIGNoaWxkcmVuOiB7XG4gICAqICAgICAgICAgJ2NoaWxkT25lJzogeyAnZm9vJzogJ2JheicsICdhYmMnOiAnMTIzJyB9XG4gICAqICAgICAgICAgJ2NoaWxkVHdvJzogbnVsbCxcbiAgICogICAgICAgICAnY2hpbGRGb3VyJzoge31cbiAgICogICAgICAgfVxuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgdGhpcy5vcHRpb25zKG5ld09wdGlvbnMpO1xuICAgKlxuICAgKiBSRVNVTFRcbiAgICpcbiAgICogICAgIHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICAnY2hpbGRPbmUnOiB7ICdmb28nOiAnYmF6JywgJ2FzZGYnOiAnZmRzYScsICdhYmMnOiAnMTIzJyB9LFxuICAgKiAgICAgICAgICdjaGlsZFR3byc6IG51bGwsIC8vIERpc2FibGVkLiBXb24ndCBiZSBpbml0aWFsaXplZC5cbiAgICogICAgICAgICAnY2hpbGRUaHJlZSc6IHt9LFxuICAgKiAgICAgICAgICdjaGlsZEZvdXInOiB7fVxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCBvZiBuZXcgb3B0aW9uIHZhbHVlc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBBIE5FVyBvYmplY3Qgb2YgdGhpcy5vcHRpb25zXyBhbmQgb2JqIG1lcmdlZFxuICAgKi9cbiAgb3B0aW9ucyhvYmopIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc187XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zXyA9IFZqc1V0aWwubWVyZ2VPcHRpb25zKHRoaXMub3B0aW9uc18sIG9iaik7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc187XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wb25lbnQncyBET00gZWxlbWVudFxuICAgKlxuICAgKiAgICAgdmFyIGRvbUVsID0gbXlDb21wb25lbnQuZWwoKTtcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIGVsKCkge1xuICAgIHJldHVybiB0aGlzLmVsXztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZz19IHRhZ05hbWUgIEVsZW1lbnQncyBub2RlIHR5cGUuIGUuZy4gJ2RpdidcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gYXR0cmlidXRlcyBBbiBvYmplY3Qgb2YgZWxlbWVudCBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgY3JlYXRlRWwodGFnTmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBMaWIuY3JlYXRlRWwodGFnTmFtZSwgYXR0cmlidXRlcyk7XG4gIH1cblxuICBsb2NhbGl6ZShzdHJpbmcpIHtcbiAgICBsZXQgbGFuZyA9IHRoaXMucGxheWVyXy5sYW5ndWFnZSgpO1xuICAgIGxldCBsYW5ndWFnZXMgPSB0aGlzLnBsYXllcl8ubGFuZ3VhZ2VzKCk7XG5cbiAgICBpZiAobGFuZ3VhZ2VzICYmIGxhbmd1YWdlc1tsYW5nXSAmJiBsYW5ndWFnZXNbbGFuZ11bc3RyaW5nXSkge1xuICAgICAgcmV0dXJuIGxhbmd1YWdlc1tsYW5nXVtzdHJpbmddO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb21wb25lbnQncyBET00gZWxlbWVudCB3aGVyZSBjaGlsZHJlbiBhcmUgaW5zZXJ0ZWQuXG4gICAqIFdpbGwgZWl0aGVyIGJlIHRoZSBzYW1lIGFzIGVsKCkgb3IgYSBuZXcgZWxlbWVudCBkZWZpbmVkIGluIGNyZWF0ZUVsKCkuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBjb250ZW50RWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudEVsXyB8fCB0aGlzLmVsXztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXBvbmVudCdzIElEXG4gICAqXG4gICAqICAgICB2YXIgaWQgPSBteUNvbXBvbmVudC5pZCgpO1xuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pZF87XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wb25lbnQncyBuYW1lLiBUaGUgbmFtZSBpcyBvZnRlbiB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiAgICAgdmFyIG5hbWUgPSBteUNvbXBvbmVudC5uYW1lKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZV87XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzXG4gICAqXG4gICAqICAgICB2YXIga2lkcyA9IG15Q29tcG9uZW50LmNoaWxkcmVuKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY2hpbGRyZW5cbiAgICovXG4gIGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY2hpbGQgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIElEXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIGdldENoaWxkQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkSW5kZXhfW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY2hpbGQgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIG5hbWVcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgZ2V0Q2hpbGQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkTmFtZUluZGV4X1tuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hpbGQgY29tcG9uZW50IGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQuZWwoKTtcbiAgICogICAgIC8vIC0+IDxkaXYgY2xhc3M9J215LWNvbXBvbmVudCc+PC9kaXY+XG4gICAqICAgICBteUNvbXBvbmVudC5jaGlsZHJlbigpO1xuICAgKiAgICAgLy8gW2VtcHR5IGFycmF5XVxuICAgKlxuICAgKiAgICAgdmFyIG15QnV0dG9uID0gbXlDb21wb25lbnQuYWRkQ2hpbGQoJ015QnV0dG9uJyk7XG4gICAqICAgICAvLyAtPiA8ZGl2IGNsYXNzPSdteS1jb21wb25lbnQnPjxkaXYgY2xhc3M9XCJteS1idXR0b25cIj5teUJ1dHRvbjxkaXY+PC9kaXY+XG4gICAqICAgICAvLyAtPiBteUJ1dHRvbiA9PT0gbXlDb21vbmVudC5jaGlsZHJlbigpWzBdO1xuICAgKlxuICAgKiBQYXNzIGluIG9wdGlvbnMgZm9yIGNoaWxkIGNvbnN0cnVjdG9ycyBhbmQgb3B0aW9ucyBmb3IgY2hpbGRyZW4gb2YgdGhlIGNoaWxkXG4gICAqXG4gICAqICAgICB2YXIgbXlCdXR0b24gPSBteUNvbXBvbmVudC5hZGRDaGlsZCgnTXlCdXR0b24nLCB7XG4gICAqICAgICAgIHRleHQ6ICdQcmVzcyBNZScsXG4gICAqICAgICAgIGNoaWxkcmVuOiB7XG4gICAqICAgICAgICAgYnV0dG9uQ2hpbGRFeGFtcGxlOiB7XG4gICAqICAgICAgICAgICBidXR0b25DaGlsZE9wdGlvbjogdHJ1ZVxuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfVxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfENvbXBvbmVudH0gY2hpbGQgVGhlIGNsYXNzIG5hbWUgb3IgaW5zdGFuY2Ugb2YgYSBjaGlsZCB0byBhZGRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMsIGluY2x1ZGluZyBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byBjaGlsZHJlbiBvZiB0aGUgY2hpbGQuXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNoaWxkIGNvbXBvbmVudCAoY3JlYXRlZCBieSB0aGlzIHByb2Nlc3MgaWYgYSBzdHJpbmcgd2FzIHVzZWQpXG4gICAqIEBzdXBwcmVzcyB7YWNjZXNzQ29udHJvbHN8Y2hlY2tSZWdFeHB8Y2hlY2tUeXBlc3xjaGVja1ZhcnN8Y29uc3R8Y29uc3RhbnRQcm9wZXJ0eXxkZXByZWNhdGVkfGR1cGxpY2F0ZXxlczVTdHJpY3R8ZmlsZW92ZXJ2aWV3VGFnc3xnbG9iYWxUaGlzfGludmFsaWRDYXN0c3xtaXNzaW5nUHJvcGVydGllc3xub25TdGFuZGFyZEpzRG9jc3xzdHJpY3RNb2R1bGVEZXBDaGVja3x1bmRlZmluZWROYW1lc3x1bmRlZmluZWRWYXJzfHVua25vd25EZWZpbmVzfHVzZWxlc3NDb2RlfHZpc2liaWxpdHl9XG4gICAqL1xuICBhZGRDaGlsZChjaGlsZCwgb3B0aW9ucz17fSkge1xuICAgIGxldCBjb21wb25lbnQ7XG4gICAgbGV0IGNvbXBvbmVudE5hbWU7XG5cbiAgICAvLyBJZiBjaGlsZCBpcyBhIHN0cmluZywgY3JlYXRlIG50IHdpdGggb3B0aW9uc1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY2hpbGQ7XG5cbiAgICAgIC8vIE9wdGlvbnMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGFzIGEgYm9vbGVhbiwgc28gY29udmVydCB0byBhbiBlbXB0eSBvYmplY3QgaWYgZmFsc2UuXG4gICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICAvLyBTYW1lIGFzIGFib3ZlLCBidXQgdHJ1ZSBpcyBkZXByZWNhdGVkIHNvIHNob3cgYSB3YXJuaW5nLlxuICAgICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgTGliLmxvZy53YXJuKCdJbml0aWFsaXppbmcgYSBjaGlsZCBjb21wb25lbnQgd2l0aCBgdHJ1ZWAgaXMgZGVwcmVjYXRlZC4gQ2hpbGRyZW4gc2hvdWxkIGJlIGRlZmluZWQgaW4gYW4gYXJyYXkgd2hlbiBwb3NzaWJsZSwgYnV0IGlmIG5lY2Vzc2FyeSB1c2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYHRydWVgLicpO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGNvbXBvbmVudENsYXNzIGluIG9wdGlvbnMsIGFzc3VtZSBjb21wb25lbnRDbGFzcyBpcyB0aGUgbmFtZSBsb3dlcmNhc2VkXG4gICAgICAvLyAoZS5nLiBwbGF5QnV0dG9uKVxuICAgICAgbGV0IGNvbXBvbmVudENsYXNzTmFtZSA9IG9wdGlvbnMuY29tcG9uZW50Q2xhc3MgfHwgTGliLmNhcGl0YWxpemUoY29tcG9uZW50TmFtZSk7XG5cbiAgICAgIC8vIFNldCBuYW1lIHRocm91Z2ggb3B0aW9uc1xuICAgICAgb3B0aW9ucy5uYW1lID0gY29tcG9uZW50TmFtZTtcblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9iamVjdCAmIGVsZW1lbnQgZm9yIHRoaXMgY29udHJvbHMgc2V0XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIC5wbGF5ZXJfLCB0aGlzIGlzIGEgcGxheWVyXG4gICAgICBsZXQgQ29tcG9uZW50Q2xhc3MgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KGNvbXBvbmVudENsYXNzTmFtZSk7XG5cbiAgICAgIGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRDbGFzcyh0aGlzLnBsYXllcl8gfHwgdGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGlsZCBpcyBhIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQgPSBjaGlsZDtcbiAgICB9XG5cbiAgICB0aGlzLmNoaWxkcmVuXy5wdXNoKGNvbXBvbmVudCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5pZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5jaGlsZEluZGV4X1tjb21wb25lbnQuaWQoKV0gPSBjb21wb25lbnQ7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBuYW1lIHdhc24ndCB1c2VkIHRvIGNyZWF0ZSB0aGUgY29tcG9uZW50LCBjaGVjayBpZiB3ZSBjYW4gdXNlIHRoZVxuICAgIC8vIG5hbWUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudFxuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IChjb21wb25lbnQubmFtZSAmJiBjb21wb25lbnQubmFtZSgpKTtcblxuICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1tjb21wb25lbnROYW1lXSA9IGNvbXBvbmVudDtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIFVJIG9iamVjdCdzIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lciBkaXYgKGJveClcbiAgICAvLyBIYXZpbmcgYW4gZWxlbWVudCBpcyBub3QgcmVxdWlyZWRcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5lbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb21wb25lbnQuZWwoKSkge1xuICAgICAgdGhpcy5jb250ZW50RWwoKS5hcHBlbmRDaGlsZChjb21wb25lbnQuZWwoKSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHNvIGl0IGNhbiBzdG9yZWQgb24gcGFyZW50IG9iamVjdCBpZiBkZXNpcmVkLlxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgY2hpbGQgY29tcG9uZW50IGZyb20gdGhpcyBjb21wb25lbnQncyBsaXN0IG9mIGNoaWxkcmVuLCBhbmQgdGhlXG4gICAqIGNoaWxkIGNvbXBvbmVudCdzIGVsZW1lbnQgZnJvbSB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtICB7Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlQ2hpbGQoY29tcG9uZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnQgPSB0aGlzLmdldENoaWxkKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFjb21wb25lbnQgfHwgIXRoaXMuY2hpbGRyZW5fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNoaWxkRm91bmQgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSB0aGlzLmNoaWxkcmVuXy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fW2ldID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgY2hpbGRGb3VuZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5fLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZEZvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZEluZGV4X1tjb21wb25lbnQuaWQoKV0gPSBudWxsO1xuICAgIHRoaXMuY2hpbGROYW1lSW5kZXhfW2NvbXBvbmVudC5uYW1lKCldID0gbnVsbDtcblxuICAgIGxldCBjb21wRWwgPSBjb21wb25lbnQuZWwoKTtcblxuICAgIGlmIChjb21wRWwgJiYgY29tcEVsLnBhcmVudE5vZGUgPT09IHRoaXMuY29udGVudEVsKCkpIHtcbiAgICAgIHRoaXMuY29udGVudEVsKCkucmVtb3ZlQ2hpbGQoY29tcG9uZW50LmVsKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW5kIGluaXRpYWxpemUgZGVmYXVsdCBjaGlsZCBjb21wb25lbnRzIGZyb20gb3B0aW9uc1xuICAgKlxuICAgKiAgICAgLy8gd2hlbiBhbiBpbnN0YW5jZSBvZiBNeUNvbXBvbmVudCBpcyBjcmVhdGVkLCBhbGwgY2hpbGRyZW4gaW4gb3B0aW9uc1xuICAgKiAgICAgLy8gd2lsbCBiZSBhZGRlZCB0byB0aGUgaW5zdGFuY2UgYnkgdGhlaXIgbmFtZSBzdHJpbmdzIGFuZCBvcHRpb25zXG4gICAqICAgICBNeUNvbXBvbmVudC5wcm90b3R5cGUub3B0aW9uc18uY2hpbGRyZW4gPSB7XG4gICAqICAgICAgIG15Q2hpbGRDb21wb25lbnQ6IHtcbiAgICogICAgICAgICBteUNoaWxkT3B0aW9uOiB0cnVlXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICpcbiAgICogICAgIC8vIE9yIHdoZW4gY3JlYXRpbmcgdGhlIGNvbXBvbmVudFxuICAgKiAgICAgdmFyIG15Q29tcCA9IG5ldyBNeUNvbXBvbmVudChwbGF5ZXIsIHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICBteUNoaWxkQ29tcG9uZW50OiB7XG4gICAqICAgICAgICAgICBteUNoaWxkT3B0aW9uOiB0cnVlXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogVGhlIGNoaWxkcmVuIG9wdGlvbiBjYW4gYWxzbyBiZSBhbiBBcnJheSBvZiBjaGlsZCBuYW1lcyBvclxuICAgKiBjaGlsZCBvcHRpb25zIG9iamVjdHMgKHRoYXQgYWxzbyBpbmNsdWRlIGEgJ25hbWUnIGtleSkuXG4gICAqXG4gICAqICAgICB2YXIgbXlDb21wID0gbmV3IE15Q29tcG9uZW50KHBsYXllciwge1xuICAgKiAgICAgICBjaGlsZHJlbjogW1xuICAgKiAgICAgICAgICdidXR0b24nLFxuICAgKiAgICAgICAgIHtcbiAgICogICAgICAgICAgIG5hbWU6ICdidXR0b24nLFxuICAgKiAgICAgICAgICAgc29tZU90aGVyT3B0aW9uOiB0cnVlXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICBdXG4gICAqICAgICB9KTtcbiAgICpcbiAgICovXG4gIGluaXRDaGlsZHJlbigpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm9wdGlvbnNfLmNoaWxkcmVuO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAvLyBgdGhpc2AgaXMgYHBhcmVudGBcbiAgICAgIGxldCBwYXJlbnRPcHRpb25zID0gdGhpcy5vcHRpb25zKCk7XG4gICAgICBsZXQgaGFuZGxlQWRkID0gKG5hbWUsIG9wdHMpID0+IHtcbiAgICAgICAgLy8gQWxsb3cgb3B0aW9ucyBmb3IgY2hpbGRyZW4gdG8gYmUgc2V0IGF0IHRoZSBwYXJlbnQgb3B0aW9uc1xuICAgICAgICAvLyBlLmcuIHZpZGVvanMoaWQsIHsgY29udHJvbEJhcjogZmFsc2UgfSk7XG4gICAgICAgIC8vIGluc3RlYWQgb2YgdmlkZW9qcyhpZCwgeyBjaGlsZHJlbjogeyBjb250cm9sQmFyOiBmYWxzZSB9KTtcbiAgICAgICAgaWYgKHBhcmVudE9wdGlvbnNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9wdHMgPSBwYXJlbnRPcHRpb25zW25hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxsb3cgZm9yIGRpc2FibGluZyBkZWZhdWx0IGNvbXBvbmVudHNcbiAgICAgICAgLy8gZS5nLiBvcHRpb25zWydjaGlsZHJlbiddWydwb3N0ZXJJbWFnZSddID0gZmFsc2VcbiAgICAgICAgaWYgKG9wdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBhZGQgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gQWRkIGEgZGlyZWN0IHJlZmVyZW5jZSB0byB0aGUgY2hpbGQgYnkgbmFtZSBvbiB0aGUgcGFyZW50IGluc3RhbmNlLlxuICAgICAgICAvLyBJZiB0d28gb2YgdGhlIHNhbWUgY29tcG9uZW50IGFyZSB1c2VkLCBkaWZmZXJlbnQgbmFtZXMgc2hvdWxkIGJlIHN1cHBsaWVkXG4gICAgICAgIC8vIGZvciBlYWNoXG4gICAgICAgIHRoaXNbbmFtZV0gPSB0aGlzLmFkZENoaWxkKG5hbWUsIG9wdHMpO1xuICAgICAgfTtcblxuICAgICAgLy8gQWxsb3cgZm9yIGFuIGFycmF5IG9mIGNoaWxkcmVuIGRldGFpbHMgdG8gcGFzc2VkIGluIHRoZSBvcHRpb25zXG4gICAgICBpZiAoTGliLm9iai5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgICAgbGV0IG9wdHM7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gWydteUNvbXBvbmVudCddXG4gICAgICAgICAgICBuYW1lID0gY2hpbGQ7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFt7IG5hbWU6ICdteUNvbXBvbmVudCcsIG90aGVyT3B0aW9uOiB0cnVlIH1dXG4gICAgICAgICAgICBuYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgICAgIG9wdHMgPSBjaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYW5kbGVBZGQobmFtZSwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIExpYi5vYmouZWFjaChjaGlsZHJlbiwgaGFuZGxlQWRkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHN1YiBjb21wb25lbnRzIHRvIHN0YWNrIENTUyBjbGFzcyBuYW1lc1xuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjb25zdHJ1Y3RlZCBjbGFzcyBuYW1lXG4gICAqL1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIC8vIENoaWxkIGNsYXNzZXMgY2FuIGluY2x1ZGUgYSBmdW5jdGlvbiB0aGF0IGRvZXM6XG4gICAgLy8gcmV0dXJuICdDTEFTUyBOQU1FJyArIHRoaXMuX3N1cGVyKCk7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogICAgIHZhciBteUZ1bmMgPSBmdW5jdGlvbigpe1xuICAgKiAgICAgICB2YXIgbXlDb21wb25lbnQgPSB0aGlzO1xuICAgKiAgICAgICAvLyBEbyBzb21ldGhpbmcgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAgICogICAgIH07XG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vbignZXZlbnRUeXBlJywgbXlGdW5jKTtcbiAgICpcbiAgICogVGhlIGNvbnRleHQgb2YgbXlGdW5jIHdpbGwgYmUgbXlDb21wb25lbnQgdW5sZXNzIHByZXZpb3VzbHkgYm91bmQuXG4gICAqXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gYWRkIGEgbGlzdGVuZXIgdG8gYW5vdGhlciBlbGVtZW50IG9yIGNvbXBvbmVudC5cbiAgICpcbiAgICogICAgIG15Q29tcG9uZW50Lm9uKG90aGVyRWxlbWVudCwgJ2V2ZW50TmFtZScsIG15RnVuYyk7XG4gICAqICAgICBteUNvbXBvbmVudC5vbihvdGhlckNvbXBvbmVudCwgJ2V2ZW50TmFtZScsIG15RnVuYyk7XG4gICAqXG4gICAqIFRoZSBiZW5lZml0IG9mIHVzaW5nIHRoaXMgb3ZlciBgVmpzRXZlbnRzLm9uKG90aGVyRWxlbWVudCwgJ2V2ZW50TmFtZScsIG15RnVuYylgXG4gICAqIGFuZCBgb3RoZXJDb21wb25lbnQub24oJ2V2ZW50TmFtZScsIG15RnVuYylgIGlzIHRoYXQgdGhpcyB3YXkgdGhlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYW5lZCB1cCB3aGVuIGVpdGhlciBjb21wb25lbnQgaXMgZGlzcG9zZWQuXG4gICAqIEl0IHdpbGwgYWxzbyBiaW5kIG15Q29tcG9uZW50IGFzIHRoZSBjb250ZXh0IG9mIG15RnVuYy5cbiAgICpcbiAgICogKipOT1RFKio6IFdoZW4gdXNpbmcgdGhpcyBvbiBlbGVtZW50cyBpbiB0aGUgcGFnZSBvdGhlciB0aGFuIHdpbmRvd1xuICAgKiBhbmQgZG9jdW1lbnQgKGJvdGggcGVybWFuZW50KSwgaWYgeW91IHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET01cbiAgICogeW91IG5lZWQgdG8gY2FsbCBgbXlDb21wb25lbnQudHJpZ2dlcihlbCwgJ2Rpc3Bvc2UnKWAgb24gaXQgdG8gY2xlYW4gdXBcbiAgICogcmVmZXJlbmNlcyB0byBpdCBhbmQgYWxsb3cgdGhlIGJyb3dzZXIgdG8gZ2FyYmFnZSBjb2xsZWN0IGl0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd8Q29tcG9uZW50fSBmaXJzdCAgIFRoZSBldmVudCB0eXBlIG9yIG90aGVyIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbnxTdHJpbmd9ICAgICAgc2Vjb25kICBUaGUgZXZlbnQgaGFuZGxlciBvciBldmVudCB0eXBlXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICAgICAgICB0aGlyZCAgIFRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gICAgICAgIHNlbGZcbiAgICovXG4gIG9uKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgfHwgTGliLm9iai5pc0FycmF5KGZpcnN0KSkge1xuICAgICAgRXZlbnRzLm9uKHRoaXMuZWxfLCBmaXJzdCwgTGliLmJpbmQodGhpcywgc2Vjb25kKSk7XG5cbiAgICAvLyBUYXJnZXRpbmcgYW5vdGhlciBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBmaXJzdDtcbiAgICAgIGNvbnN0IHR5cGUgPSBzZWNvbmQ7XG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgLy8gV2hlbiB0aGlzIGNvbXBvbmVudCBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIHRoZSBvdGhlciBjb21wb25lbnRcbiAgICAgIGNvbnN0IHJlbW92ZU9uRGlzcG9zZSA9ICgpID0+IHRoaXMub2ZmKHRhcmdldCwgdHlwZSwgZm4pO1xuXG4gICAgICAvLyBVc2UgdGhlIHNhbWUgZnVuY3Rpb24gSUQgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlciBpdCB1c2luZyB0aGUgSURcbiAgICAgIC8vIG9mIHRoZSBvcmlnaW5hbCBsaXN0ZW5lclxuICAgICAgcmVtb3ZlT25EaXNwb3NlLmd1aWQgPSBmbi5ndWlkO1xuICAgICAgdGhpcy5vbignZGlzcG9zZScsIHJlbW92ZU9uRGlzcG9zZSk7XG5cbiAgICAgIC8vIElmIHRoZSBvdGhlciBjb21wb25lbnQgaXMgZGlzcG9zZWQgZmlyc3Qgd2UgbmVlZCB0byBjbGVhbiB0aGUgcmVmZXJlbmNlXG4gICAgICAvLyB0byB0aGUgb3RoZXIgY29tcG9uZW50IGluIHRoaXMgY29tcG9uZW50J3MgcmVtb3ZlT25EaXNwb3NlIGxpc3RlbmVyXG4gICAgICAvLyBPdGhlcndpc2Ugd2UgY3JlYXRlIGEgbWVtb3J5IGxlYWsuXG4gICAgICBjb25zdCBjbGVhblJlbW92ZXIgPSAoKSA9PiB0aGlzLm9mZignZGlzcG9zZScsIHJlbW92ZU9uRGlzcG9zZSk7XG5cbiAgICAgIC8vIEFkZCB0aGUgc2FtZSBmdW5jdGlvbiBJRCBzbyB3ZSBjYW4gZWFzaWx5IHJlbW92ZSBpdCBsYXRlclxuICAgICAgY2xlYW5SZW1vdmVyLmd1aWQgPSBmbi5ndWlkO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgRE9NIG5vZGVcbiAgICAgIGlmIChmaXJzdC5ub2RlTmFtZSkge1xuICAgICAgICAvLyBBZGQgdGhlIGxpc3RlbmVyIHRvIHRoZSBvdGhlciBlbGVtZW50XG4gICAgICAgIEV2ZW50cy5vbih0YXJnZXQsIHR5cGUsIGZuKTtcbiAgICAgICAgRXZlbnRzLm9uKHRhcmdldCwgJ2Rpc3Bvc2UnLCBjbGVhblJlbW92ZXIpO1xuXG4gICAgICAvLyBTaG91bGQgYmUgYSBjb21wb25lbnRcbiAgICAgIC8vIE5vdCB1c2luZyBgaW5zdGFuY2VvZiBDb21wb25lbnRgIGJlY2F1c2UgaXQgbWFrZXMgbW9jayBwbGF5ZXJzIGRpZmZpY3VsdFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3Qub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBsaXN0ZW5lciB0byB0aGUgb3RoZXIgY29tcG9uZW50XG4gICAgICAgIHRhcmdldC5vbih0eXBlLCBmbik7XG4gICAgICAgIHRhcmdldC5vbignZGlzcG9zZScsIGNsZWFuUmVtb3Zlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhpcyBjb21wb25lbnQncyBlbGVtZW50XG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vZmYoJ2V2ZW50VHlwZScsIG15RnVuYyk7XG4gICAqXG4gICAqIElmIG15RnVuYyBpcyBleGNsdWRlZCwgQUxMIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50IHR5cGUgd2lsbCBiZSByZW1vdmVkLlxuICAgKiBJZiBldmVudFR5cGUgaXMgZXhjbHVkZWQsIEFMTCBsaXN0ZW5lcnMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQWx0ZXJuYXRpdmVseSB5b3UgY2FuIHVzZSBgb2ZmYCB0byByZW1vdmUgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCB0byBvdGhlclxuICAgKiBlbGVtZW50cyBvciBjb21wb25lbnRzIHVzaW5nIGBteUNvbXBvbmVudC5vbihvdGhlckNvbXBvbmVudC4uLmAuXG4gICAqIEluIHRoaXMgY2FzZSBib3RoIHRoZSBldmVudCB0eXBlIGFuZCBsaXN0ZW5lciBmdW5jdGlvbiBhcmUgUkVRVUlSRUQuXG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vZmYob3RoZXJFbGVtZW50LCAnZXZlbnRUeXBlJywgbXlGdW5jKTtcbiAgICogICAgIG15Q29tcG9uZW50Lm9mZihvdGhlckNvbXBvbmVudCwgJ2V2ZW50VHlwZScsIG15RnVuYyk7XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZz18Q29tcG9uZW50fSAgZmlyc3QgIFRoZSBldmVudCB0eXBlIG9yIG90aGVyIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbj18U3RyaW5nfSAgICAgICBzZWNvbmQgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIG9yIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtICB7RnVuY3Rpb249fSAgICAgICAgICAgICAgdGhpcmQgIFRoZSBsaXN0ZW5lciBmb3Igb3RoZXIgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIG9mZihmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgIGlmICghZmlyc3QgfHwgdHlwZW9mIGZpcnN0ID09PSAnc3RyaW5nJyB8fCBMaWIub2JqLmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICBFdmVudHMub2ZmKHRoaXMuZWxfLCBmaXJzdCwgc2Vjb25kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZmlyc3Q7XG4gICAgICBjb25zdCB0eXBlID0gc2Vjb25kO1xuICAgICAgLy8gRW5zdXJlIHRoZXJlJ3MgYXQgbGVhc3QgYSBndWlkLCBldmVuIGlmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgYmVlbiB1c2VkXG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBkaXNwb3NlIGxpc3RlbmVyIG9uIHRoaXMgY29tcG9uZW50LFxuICAgICAgLy8gd2hpY2ggd2FzIGdpdmVuIHRoZSBzYW1lIGd1aWQgYXMgdGhlIGV2ZW50IGxpc3RlbmVyXG4gICAgICB0aGlzLm9mZignZGlzcG9zZScsIGZuKTtcblxuICAgICAgaWYgKGZpcnN0Lm5vZGVOYW1lKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGlzdGVuZXJcbiAgICAgICAgRXZlbnRzLm9mZih0YXJnZXQsIHR5cGUsIGZuKTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0ZW5lciBmb3IgY2xlYW5pbmcgdGhlIGRpc3Bvc2UgbGlzdGVuZXJcbiAgICAgICAgRXZlbnRzLm9mZih0YXJnZXQsICdkaXNwb3NlJywgZm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0Lm9mZih0eXBlLCBmbik7XG4gICAgICAgIHRhcmdldC5vZmYoJ2Rpc3Bvc2UnLCBmbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIHRyaWdnZXJlZCBvbmx5IG9uY2UgYW5kIHRoZW4gcmVtb3ZlZFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQub25lKCdldmVudE5hbWUnLCBteUZ1bmMpO1xuICAgKlxuICAgKiBBbHRlcm5hdGl2ZWx5IHlvdSBjYW4gYWRkIGEgbGlzdGVuZXIgdG8gYW5vdGhlciBlbGVtZW50IG9yIGNvbXBvbmVudFxuICAgKiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkIG9ubHkgb25jZS5cbiAgICpcbiAgICogICAgIG15Q29tcG9uZW50Lm9uZShvdGhlckVsZW1lbnQsICdldmVudE5hbWUnLCBteUZ1bmMpO1xuICAgKiAgICAgbXlDb21wb25lbnQub25lKG90aGVyQ29tcG9uZW50LCAnZXZlbnROYW1lJywgbXlGdW5jKTtcbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfENvbXBvbmVudH0gIGZpcnN0ICAgVGhlIGV2ZW50IHR5cGUgb3Igb3RoZXIgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufFN0cmluZ30gICAgICAgc2Vjb25kICBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gb3IgZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbj19ICAgICAgICAgICAgIHRoaXJkICAgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIGZvciBvdGhlciBjb21wb25lbnRcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgb25lKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgfHwgTGliLm9iai5pc0FycmF5KGZpcnN0KSkge1xuICAgICAgRXZlbnRzLm9uZSh0aGlzLmVsXywgZmlyc3QsIExpYi5iaW5kKHRoaXMsIHNlY29uZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBmaXJzdDtcbiAgICAgIGNvbnN0IHR5cGUgPSBzZWNvbmQ7XG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgY29uc3QgbmV3RnVuYyA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5vZmYodGFyZ2V0LCB0eXBlLCBuZXdGdW5jKTtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIHNhbWUgZnVuY3Rpb24gSUQgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlclxuICAgICAgbmV3RnVuYy5ndWlkID0gZm4uZ3VpZDtcblxuICAgICAgdGhpcy5vbih0YXJnZXQsIHR5cGUsIG5ld0Z1bmMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYW4gZXZlbnQgb24gYW4gZWxlbWVudFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQudHJpZ2dlcignZXZlbnROYW1lJyk7XG4gICAqICAgICBteUNvbXBvbmVudC50cmlnZ2VyKHsndHlwZSc6J2V2ZW50TmFtZSd9KTtcbiAgICpcbiAgICogQHBhcmFtICB7RXZlbnR8T2JqZWN0fFN0cmluZ30gZXZlbnQgIEEgc3RyaW5nICh0aGUgdHlwZSkgb3IgYW4gZXZlbnQgb2JqZWN0IHdpdGggYSB0eXBlIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9ICAgICAgIHNlbGZcbiAgICovXG4gIHRyaWdnZXIoZXZlbnQpIHtcbiAgICBFdmVudHMudHJpZ2dlcih0aGlzLmVsXywgZXZlbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgYSBsaXN0ZW5lciB0byB0aGUgY29tcG9uZW50J3MgcmVhZHkgc3RhdGVcbiAgICpcbiAgICogRGlmZmVyZW50IGZyb20gZXZlbnQgbGlzdGVuZXJzIGluIHRoYXQgaWYgdGhlIHJlYWR5IGV2ZW50IGhhcyBhbHJlYWR5IGhhcHBlbmVkXG4gICAqIGl0IHdpbGwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gaW1tZWRpYXRlbHkuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiBSZWFkeSBsaXN0ZW5lclxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqL1xuICByZWFkeShmbikge1xuICAgIGlmIChmbikge1xuICAgICAgaWYgKHRoaXMuaXNSZWFkeV8pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVhZHlRdWV1ZV8gPSB0aGlzLnJlYWR5UXVldWVfIHx8IFtdO1xuICAgICAgICB0aGlzLnJlYWR5UXVldWVfLnB1c2goZm4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSByZWFkeSBsaXN0ZW5lcnNcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgdHJpZ2dlclJlYWR5KCkge1xuICAgIHRoaXMuaXNSZWFkeV8gPSB0cnVlO1xuXG4gICAgbGV0IHJlYWR5UXVldWUgPSB0aGlzLnJlYWR5UXVldWVfO1xuXG4gICAgaWYgKHJlYWR5UXVldWUgJiYgcmVhZHlRdWV1ZS5sZW5ndGggPiAwKSB7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVhZHlRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZWFkeVF1ZXVlW2ldLmNhbGwodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2V0IFJlYWR5IFF1ZXVlXG4gICAgICB0aGlzLnJlYWR5UXVldWVfID0gW107XG5cbiAgICAgIC8vIEFsbG93IGZvciB1c2luZyBldmVudCBsaXN0ZW5lcnMgYWxzbywgaW4gY2FzZSB5b3Ugd2FudCB0byBkbyBzb21ldGhpbmcgZXZlcnl0aW1lIGEgc291cmNlIGlzIHJlYWR5LlxuICAgICAgdGhpcy50cmlnZ2VyKCdyZWFkeScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGNvbXBvbmVudCdzIGVsZW1lbnQgaGFzIGEgQ1NTIGNsYXNzIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9DaGVjayBDbGFzc25hbWUgdG8gY2hlY2tcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgaGFzQ2xhc3MoY2xhc3NUb0NoZWNrKSB7XG4gICAgcmV0dXJuIExpYi5oYXNDbGFzcyh0aGlzLmVsXywgY2xhc3NUb0NoZWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBDU1MgY2xhc3MgbmFtZSB0byB0aGUgY29tcG9uZW50J3MgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0FkZCBDbGFzc25hbWUgdG8gYWRkXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIGFkZENsYXNzKGNsYXNzVG9BZGQpIHtcbiAgICBMaWIuYWRkQ2xhc3ModGhpcy5lbF8sIGNsYXNzVG9BZGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9SZW1vdmUgQ2xhc3NuYW1lIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqL1xuICByZW1vdmVDbGFzcyhjbGFzc1RvUmVtb3ZlKSB7XG4gICAgTGliLnJlbW92ZUNsYXNzKHRoaXMuZWxfLCBjbGFzc1RvUmVtb3ZlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQgZWxlbWVudCBpZiBoaWRkZW5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB0aGUgY29tcG9uZW50IGVsZW1lbnQgaWYgY3VycmVudGx5IHNob3dpbmdcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTG9jayBhbiBpdGVtIGluIGl0cyB2aXNpYmxlIHN0YXRlXG4gICAqIFRvIGJlIHVzZWQgd2l0aCBmYWRlSW4vZmFkZU91dC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFVubG9jayBhbiBpdGVtIHRvIGJlIGhpZGRlblxuICAgKiBUbyBiZSB1c2VkIHdpdGggZmFkZUluL2ZhZGVPdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvciBnZXQgdGhlIHdpZHRoIG9mIHRoZSBjb21wb25lbnQgKENTUyB2YWx1ZXMpXG4gICAqXG4gICAqIFNldHRpbmcgdGhlIHZpZGVvIHRhZyBkaW1lbnNpb24gdmFsdWVzIG9ubHkgd29ya3Mgd2l0aCB2YWx1ZXMgaW4gcGl4ZWxzLlxuICAgKiBQZXJjZW50IHZhbHVlcyB3aWxsIG5vdCB3b3JrLlxuICAgKiBTb21lIHBlcmNlbnRzIGNhbiBiZSB1c2VkLCBidXQgd2lkdGgoKS9oZWlnaHQoKSB3aWxsIHJldHVybiB0aGUgbnVtYmVyICsgJSxcbiAgICogbm90IHRoZSBhY3R1YWwgY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nPX0gbnVtICAgT3B0aW9uYWwgd2lkdGggbnVtYmVyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IHNraXBMaXN0ZW5lcnMgU2tpcCB0aGUgJ3Jlc2l6ZScgZXZlbnQgdHJpZ2dlclxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IFRoaXMgY29tcG9uZW50LCB3aGVuIHNldHRpbmcgdGhlIHdpZHRoXG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSB3aWR0aCwgd2hlbiBnZXR0aW5nXG4gICAqL1xuICB3aWR0aChudW0sIHNraXBMaXN0ZW5lcnMpIHtcbiAgICByZXR1cm4gdGhpcy5kaW1lbnNpb24oJ3dpZHRoJywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBoZWlnaHQgb2YgdGhlIGNvbXBvbmVudCAoQ1NTIHZhbHVlcylcbiAgICpcbiAgICogU2V0dGluZyB0aGUgdmlkZW8gdGFnIGRpbWVuc2lvbiB2YWx1ZXMgb25seSB3b3JrcyB3aXRoIHZhbHVlcyBpbiBwaXhlbHMuXG4gICAqIFBlcmNlbnQgdmFsdWVzIHdpbGwgbm90IHdvcmsuXG4gICAqIFNvbWUgcGVyY2VudHMgY2FuIGJlIHVzZWQsIGJ1dCB3aWR0aCgpL2hlaWdodCgpIHdpbGwgcmV0dXJuIHRoZSBudW1iZXIgKyAlLFxuICAgKiBub3QgdGhlIGFjdHVhbCBjb21wdXRlZCB3aWR0aC9oZWlnaHQuXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcnxTdHJpbmc9fSBudW0gICAgIE5ldyBjb21wb25lbnQgaGVpZ2h0XG4gICAqIEBwYXJhbSAge0Jvb2xlYW49fSBza2lwTGlzdGVuZXJzIFNraXAgdGhlIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhpcyBjb21wb25lbnQsIHdoZW4gc2V0dGluZyB0aGUgaGVpZ2h0XG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSBoZWlnaHQsIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgaGVpZ2h0KG51bSwgc2tpcExpc3RlbmVycykge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignaGVpZ2h0JywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IGF0IHRoZSBzYW1lIHRpbWVcbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gd2lkdGhcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gaGVpZ2h0XG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudFxuICAgKi9cbiAgZGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gU2tpcCByZXNpemUgbGlzdGVuZXJzIG9uIHdpZHRoIGZvciBvcHRpbWl6YXRpb25cbiAgICByZXR1cm4gdGhpcy53aWR0aCh3aWR0aCwgdHJ1ZSkuaGVpZ2h0KGhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB3aWR0aCBvciBoZWlnaHRcbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2hhcmVkIGNvZGUgZm9yIHRoZSB3aWR0aCgpIGFuZCBoZWlnaHQoKSBtZXRob2RzLlxuICAgKiBBbGwgZm9yIGFuIGludGVnZXIsIGludGVnZXIgKyAncHgnIG9yIGludGVnZXIgKyAnJSc7XG4gICAqXG4gICAqIEtub3duIGlzc3VlOiBIaWRkZW4gZWxlbWVudHMgb2ZmaWNpYWxseSBoYXZlIGEgd2lkdGggb2YgMC4gV2UncmUgZGVmYXVsdGluZ1xuICAgKiB0byB0aGUgc3R5bGUud2lkdGggdmFsdWUgYW5kIGZhbGxpbmcgYmFjayB0byBjb21wdXRlZFN0eWxlIHdoaWNoIGhhcyB0aGVcbiAgICogaGlkZGVuIGVsZW1lbnQgaXNzdWUuIEluZm8sIGJ1dCBwcm9iYWJseSBub3QgYW4gZWZmaWNpZW50IGZpeDpcbiAgICogaHR0cDovL3d3dy5mb2xpb3Rlay5jb20vZGV2YmxvZy9nZXR0aW5nLXRoZS13aWR0aC1vZi1hLWhpZGRlbi1lbGVtZW50LXdpdGgtanF1ZXJ5LXVzaW5nLXdpZHRoL1xuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHdpZHRoT3JIZWlnaHQgICd3aWR0aCcgb3IgJ2hlaWdodCdcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZz19IG51bSAgICAgTmV3IGRpbWVuc2lvblxuICAgKiBAcGFyYW0gIHtCb29sZWFuPX0gc2tpcExpc3RlbmVycyBTa2lwIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudCBpZiBhIGRpbWVuc2lvbiB3YXMgc2V0XG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSBkaW1lbnNpb24gaWYgbm90aGluZyB3YXMgc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkaW1lbnNpb24od2lkdGhPckhlaWdodCwgbnVtLCBza2lwTGlzdGVuZXJzKSB7XG4gICAgaWYgKG51bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTZXQgdG8gemVybyBpZiBudWxsIG9yIGxpdGVyYWxseSBOYU4gKE5hTiAhPT0gTmFOKVxuICAgICAgaWYgKG51bSA9PT0gbnVsbCB8fCBudW0gIT09IG51bSkge1xuICAgICAgICBudW0gPSAwO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB1c2luZyBjc3Mgd2lkdGgvaGVpZ2h0ICglIG9yIHB4KSBhbmQgYWRqdXN0XG4gICAgICBpZiAoKCcnICsgbnVtKS5pbmRleE9mKCclJykgIT09IC0xIHx8ICgnJyArIG51bSkuaW5kZXhPZigncHgnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5lbF8uc3R5bGVbd2lkdGhPckhlaWdodF0gPSBudW07XG4gICAgICB9IGVsc2UgaWYgKG51bSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMuZWxfLnN0eWxlW3dpZHRoT3JIZWlnaHRdID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XSA9IG51bSArICdweCc7XG4gICAgICB9XG5cbiAgICAgIC8vIHNraXBMaXN0ZW5lcnMgYWxsb3dzIHVzIHRvIGF2b2lkIHRyaWdnZXJpbmcgdGhlIHJlc2l6ZSBldmVudCB3aGVuIHNldHRpbmcgYm90aCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICBpZiAoIXNraXBMaXN0ZW5lcnMpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNpemUnKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGNvbXBvbmVudFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gTm90IHNldHRpbmcgYSB2YWx1ZSwgc28gZ2V0dGluZyBpdFxuICAgIC8vIE1ha2Ugc3VyZSBlbGVtZW50IGV4aXN0c1xuICAgIGlmICghdGhpcy5lbF8pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEdldCBkaW1lbnNpb24gdmFsdWUgZnJvbSBzdHlsZVxuICAgIGxldCB2YWwgPSB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XTtcbiAgICBsZXQgcHhJbmRleCA9IHZhbC5pbmRleE9mKCdweCcpO1xuXG4gICAgaWYgKHB4SW5kZXggIT09IC0xKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIHBpeGVsIHZhbHVlIHdpdGggbm8gJ3B4J1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbC5zbGljZSgwLCBweEluZGV4KSwgMTApO1xuICAgIH1cblxuICAgIC8vIE5vIHB4IHNvIHVzaW5nICUgb3Igbm8gc3R5bGUgd2FzIHNldCwgc28gZmFsbGluZyBiYWNrIHRvIG9mZnNldFdpZHRoL2hlaWdodFxuICAgIC8vIElmIGNvbXBvbmVudCBoYXMgZGlzcGxheTpub25lLCBvZmZzZXQgd2lsbCByZXR1cm4gMFxuICAgIC8vIFRPRE86IGhhbmRsZSBkaXNwbGF5Om5vbmUgYW5kIG5vIGRpbWVuc2lvbiBzdHlsZSB1c2luZyBweFxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmVsX1snb2Zmc2V0JyArIExpYi5jYXBpdGFsaXplKHdpZHRoT3JIZWlnaHQpXSwgMTApO1xuXG4gICAgLy8gQ29tcHV0ZWRTdHlsZSB2ZXJzaW9uLlxuICAgIC8vIE9ubHkgZGlmZmVyZW5jZSBpcyBpZiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gaXQgd2lsbCByZXR1cm5cbiAgICAvLyB0aGUgcGVyY2VudCB2YWx1ZSAoZS5nLiAnMTAwJScnKVxuICAgIC8vIGluc3RlYWQgb2YgemVybyBsaWtlIG9mZnNldFdpZHRoIHJldHVybnMuXG4gICAgLy8gdmFyIHZhbCA9IExpYi5nZXRDb21wdXRlZFN0eWxlVmFsdWUodGhpcy5lbF8sIHdpZHRoT3JIZWlnaHQpO1xuICAgIC8vIHZhciBweEluZGV4ID0gdmFsLmluZGV4T2YoJ3B4Jyk7XG5cbiAgICAvLyBpZiAocHhJbmRleCAhPT0gLTEpIHtcbiAgICAvLyAgIHJldHVybiB2YWwuc2xpY2UoMCwgcHhJbmRleCk7XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyAgIHJldHVybiB2YWw7XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgJ3RhcCcgZXZlbnRzIHdoZW4gdG91Y2ggZXZlbnRzIGFyZSBzdXBwb3J0ZWRcbiAgICpcbiAgICogVGhpcyBpcyB1c2VkIHRvIHN1cHBvcnQgdG9nZ2xpbmcgdGhlIGNvbnRyb2xzIHRocm91Z2ggYSB0YXAgb24gdGhlIHZpZGVvLlxuICAgKlxuICAgKiBXZSdyZSByZXF1aXJpbmcgdGhlbSB0byBiZSBlbmFibGVkIGJlY2F1c2Ugb3RoZXJ3aXNlIGV2ZXJ5IGNvbXBvbmVudCB3b3VsZFxuICAgKiBoYXZlIHRoaXMgZXh0cmEgb3ZlcmhlYWQgdW5uZWNlc3NhcmlseSwgb24gbW9iaWxlIGRldmljZXMgd2hlcmUgZXh0cmFcbiAgICogb3ZlcmhlYWQgaXMgZXNwZWNpYWxseSBiYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbWl0VGFwRXZlbnRzKCkge1xuICAgIC8vIFRyYWNrIHRoZSBzdGFydCB0aW1lIHNvIHdlIGNhbiBkZXRlcm1pbmUgaG93IGxvbmcgdGhlIHRvdWNoIGxhc3RlZFxuICAgIGxldCB0b3VjaFN0YXJ0ID0gMDtcbiAgICBsZXQgZmlyc3RUb3VjaCA9IG51bGw7XG5cbiAgICAvLyBNYXhpbXVtIG1vdmVtZW50IGFsbG93ZWQgZHVyaW5nIGEgdG91Y2ggZXZlbnQgdG8gc3RpbGwgYmUgY29uc2lkZXJlZCBhIHRhcFxuICAgIC8vIE90aGVyIHBvcHVsYXIgbGlicyB1c2UgYW55d2hlcmUgZnJvbSAyIChoYW1tZXIuanMpIHRvIDE1LCBzbyAxMCBzZWVtcyBsaWtlIGEgbmljZSwgcm91bmQgbnVtYmVyLlxuICAgIGNvbnN0IHRhcE1vdmVtZW50VGhyZXNob2xkID0gMTA7XG5cbiAgICAvLyBUaGUgbWF4aW11bSBsZW5ndGggYSB0b3VjaCBjYW4gYmUgd2hpbGUgc3RpbGwgYmVpbmcgY29uc2lkZXJlZCBhIHRhcFxuICAgIGNvbnN0IHRvdWNoVGltZVRocmVzaG9sZCA9IDIwMDtcblxuICAgIGxldCBjb3VsZEJlVGFwO1xuXG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGZpbmdlciwgZG9uJ3QgY29uc2lkZXIgdHJlYXRpbmcgdGhpcyBhcyBhIGNsaWNrXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZmlyc3RUb3VjaCA9IExpYi5vYmouY29weShldmVudC50b3VjaGVzWzBdKTtcbiAgICAgICAgLy8gUmVjb3JkIHN0YXJ0IHRpbWUgc28gd2UgY2FuIGRldGVjdCBhIHRhcCB2cy4gXCJ0b3VjaCBhbmQgaG9sZFwiXG4gICAgICAgIHRvdWNoU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgLy8gUmVzZXQgY291bGRCZVRhcCB0cmFja2luZ1xuICAgICAgICBjb3VsZEJlVGFwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGZpbmdlciwgZG9uJ3QgY29uc2lkZXIgdHJlYXRpbmcgdGhpcyBhcyBhIGNsaWNrXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvdWxkQmVUYXAgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RUb3VjaCkge1xuICAgICAgICAvLyBTb21lIGRldmljZXMgd2lsbCB0aHJvdyB0b3VjaG1vdmVzIGZvciBhbGwgYnV0IHRoZSBzbGlnaHRlc3Qgb2YgdGFwcy5cbiAgICAgICAgLy8gU28sIGlmIHdlIG1vdmVkIG9ubHkgYSBzbWFsbCBkaXN0YW5jZSwgdGhpcyBjb3VsZCBzdGlsbCBiZSBhIHRhcFxuICAgICAgICBjb25zdCB4ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggLSBmaXJzdFRvdWNoLnBhZ2VYO1xuICAgICAgICBjb25zdCB5ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVkgLSBmaXJzdFRvdWNoLnBhZ2VZO1xuICAgICAgICBjb25zdCB0b3VjaERpc3RhbmNlID0gTWF0aC5zcXJ0KHhkaWZmICogeGRpZmYgKyB5ZGlmZiAqIHlkaWZmKTtcblxuICAgICAgICBpZiAodG91Y2hEaXN0YW5jZSA+IHRhcE1vdmVtZW50VGhyZXNob2xkKSB7XG4gICAgICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBub1RhcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBUT0RPOiBMaXN0ZW4gdG8gdGhlIG9yaWdpbmFsIHRhcmdldC4gaHR0cDovL3lvdXR1LmJlL0R1amZwWE9LVXA4P3Q9MTNtOHNcbiAgICB0aGlzLm9uKCd0b3VjaGxlYXZlJywgbm9UYXApO1xuICAgIHRoaXMub24oJ3RvdWNoY2FuY2VsJywgbm9UYXApO1xuXG4gICAgLy8gV2hlbiB0aGUgdG91Y2ggZW5kcywgbWVhc3VyZSBob3cgbG9uZyBpdCB0b29rIGFuZCB0cmlnZ2VyIHRoZSBhcHByb3ByaWF0ZVxuICAgIC8vIGV2ZW50XG4gICAgdGhpcy5vbigndG91Y2hlbmQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgZmlyc3RUb3VjaCA9IG51bGw7XG4gICAgICAvLyBQcm9jZWVkIG9ubHkgaWYgdGhlIHRvdWNobW92ZS9sZWF2ZS9jYW5jZWwgZXZlbnQgZGlkbid0IGhhcHBlblxuICAgICAgaWYgKGNvdWxkQmVUYXAgPT09IHRydWUpIHtcbiAgICAgICAgLy8gTWVhc3VyZSBob3cgbG9uZyB0aGUgdG91Y2ggbGFzdGVkXG4gICAgICAgIGNvbnN0IHRvdWNoVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdG91Y2hTdGFydDtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHRvdWNoIHdhcyBsZXNzIHRoYW4gdGhlIHRocmVzaG9sZCB0byBiZSBjb25zaWRlcmVkIGEgdGFwXG4gICAgICAgIGlmICh0b3VjaFRpbWUgPCB0b3VjaFRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAvLyBEb24ndCBsZXQgYnJvd3NlciB0dXJuIHRoaXMgaW50byBhIGNsaWNrXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3RhcCcpO1xuICAgICAgICAgIC8vIEl0IG1heSBiZSBnb29kIHRvIGNvcHkgdGhlIHRvdWNoZW5kIGV2ZW50IG9iamVjdCBhbmQgY2hhbmdlIHRoZVxuICAgICAgICAgIC8vIHR5cGUgdG8gdGFwLCBpZiB0aGUgb3RoZXIgZXZlbnQgcHJvcGVydGllcyBhcmVuJ3QgZXhhY3QgYWZ0ZXJcbiAgICAgICAgICAvLyBMaWIuZml4RXZlbnQgcnVucyAoZS5nLiBldmVudC50YXJnZXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnQgdXNlciB0b3VjaCBhY3Rpdml0eSB3aGVuIHRvdWNoIGV2ZW50cyBvY2N1clxuICAgKlxuICAgKiBVc2VyIGFjdGl2aXR5IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZW4gY29udHJvbHMgc2hvdWxkIHNob3cvaGlkZS4gSXQnc1xuICAgKiByZWxhdGl2ZWx5IHNpbXBsZSB3aGVuIGl0IGNvbWVzIHRvIG1vdXNlIGV2ZW50cywgYmVjYXVzZSBhbnkgbW91c2UgZXZlbnRcbiAgICogc2hvdWxkIHNob3cgdGhlIGNvbnRyb2xzLiBTbyB3ZSBjYXB0dXJlIG1vdXNlIGV2ZW50cyB0aGF0IGJ1YmJsZSB1cCB0byB0aGVcbiAgICogcGxheWVyIGFuZCByZXBvcnQgYWN0aXZpdHkgd2hlbiB0aGF0IGhhcHBlbnMuXG4gICAqXG4gICAqIFdpdGggdG91Y2ggZXZlbnRzIGl0IGlzbid0IGFzIGVhc3kuIFdlIGNhbid0IHJlbHkgb24gdG91Y2ggZXZlbnRzIGF0IHRoZVxuICAgKiBwbGF5ZXIgbGV2ZWwsIGJlY2F1c2UgYSB0YXAgKHRvdWNoc3RhcnQgKyB0b3VjaGVuZCkgb24gdGhlIHZpZGVvIGl0c2VsZiBvblxuICAgKiBtb2JpbGUgZGV2aWNlcyBpcyBtZWFudCB0byB0dXJuIGNvbnRyb2xzIG9mZiAoYW5kIG9uKS4gVXNlciBhY3Rpdml0eSBpc1xuICAgKiBjaGVja2VkIGFzeW5jaHJvbm91c2x5LCBzbyB3aGF0IGNvdWxkIGhhcHBlbiBpcyBhIHRhcCBldmVudCBvbiB0aGUgdmlkZW9cbiAgICogdHVybnMgdGhlIGNvbnRyb2xzIG9mZiwgdGhlbiB0aGUgdG91Y2hlbmQgZXZlbnQgYnViYmxlcyB1cCB0byB0aGUgcGxheWVyLFxuICAgKiB3aGljaCBpZiBpdCByZXBvcnRlZCB1c2VyIGFjdGl2aXR5LCB3b3VsZCB0dXJuIHRoZSBjb250cm9scyByaWdodCBiYWNrIG9uLlxuICAgKiAoV2UgYWxzbyBkb24ndCB3YW50IHRvIGNvbXBsZXRlbHkgYmxvY2sgdG91Y2ggZXZlbnRzIGZyb20gYnViYmxpbmcgdXApXG4gICAqXG4gICAqIEFsc28gYSB0b3VjaG1vdmUsIHRvdWNoK2hvbGQsIGFuZCBhbnl0aGluZyBvdGhlciB0aGFuIGEgdGFwIGlzIG5vdCBzdXBwb3NlZFxuICAgKiB0byB0dXJuIHRoZSBjb250cm9scyBiYWNrIG9uIG9uIGEgbW9iaWxlIGRldmljZS5cbiAgICpcbiAgICogSGVyZSB3ZSdyZSBzZXR0aW5nIHRoZSBkZWZhdWx0IGNvbXBvbmVudCBiZWhhdmlvciB0byByZXBvcnQgdXNlciBhY3Rpdml0eVxuICAgKiB3aGVuZXZlciB0b3VjaCBldmVudHMgaGFwcGVuLCBhbmQgdGhpcyBjYW4gYmUgdHVybmVkIG9mZiBieSBjb21wb25lbnRzIHRoYXRcbiAgICogd2FudCB0b3VjaCBldmVudHMgdG8gYWN0IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgZW5hYmxlVG91Y2hBY3Rpdml0eSgpIHtcbiAgICAvLyBEb24ndCBjb250aW51ZSBpZiB0aGUgcm9vdCBwbGF5ZXIgZG9lc24ndCBzdXBwb3J0IHJlcG9ydGluZyB1c2VyIGFjdGl2aXR5XG4gICAgaWYgKCF0aGlzLnBsYXllcigpIHx8ICF0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGxpc3RlbmVyIGZvciByZXBvcnRpbmcgdGhhdCB0aGUgdXNlciBpcyBhY3RpdmVcbiAgICBjb25zdCByZXBvcnQgPSBMaWIuYmluZCh0aGlzLnBsYXllcigpLCB0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSk7XG5cbiAgICBsZXQgdG91Y2hIb2xkaW5nO1xuXG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgcmVwb3J0KCk7XG4gICAgICAvLyBGb3IgYXMgbG9uZyBhcyB0aGUgdGhleSBhcmUgdG91Y2hpbmcgdGhlIGRldmljZSBvciBoYXZlIHRoZWlyIG1vdXNlIGRvd24sXG4gICAgICAvLyB3ZSBjb25zaWRlciB0aGVtIGFjdGl2ZSBldmVuIGlmIHRoZXkncmUgbm90IG1vdmluZyB0aGVpciBmaW5nZXIgb3IgbW91c2UuXG4gICAgICAvLyBTbyB3ZSB3YW50IHRvIGNvbnRpbnVlIHRvIHVwZGF0ZSB0aGF0IHRoZXkgYXJlIGFjdGl2ZVxuICAgICAgdGhpcy5jbGVhckludGVydmFsKHRvdWNoSG9sZGluZyk7XG4gICAgICAvLyByZXBvcnQgYXQgdGhlIHNhbWUgaW50ZXJ2YWwgYXMgYWN0aXZpdHlDaGVja1xuICAgICAgdG91Y2hIb2xkaW5nID0gdGhpcy5zZXRJbnRlcnZhbChyZXBvcnQsIDI1MCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b3VjaEVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZXBvcnQoKTtcbiAgICAgIC8vIHN0b3AgdGhlIGludGVydmFsIHRoYXQgbWFpbnRhaW5zIGFjdGl2aXR5IGlmIHRoZSB0b3VjaCBpcyBob2xkaW5nXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwodG91Y2hIb2xkaW5nKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbigndG91Y2htb3ZlJywgcmVwb3J0KTtcbiAgICB0aGlzLm9uKCd0b3VjaGVuZCcsIHRvdWNoRW5kKTtcbiAgICB0aGlzLm9uKCd0b3VjaGNhbmNlbCcsIHRvdWNoRW5kKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRpbWVvdXQgYW5kIHNldHMgdXAgZGlzcG9zYWwgYXV0b21hdGljYWxseS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHJ1biBhZnRlciB0aGUgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgTnVtYmVyIG9mIG1zIHRvIGRlbGF5IGJlZm9yZSBleGVjdXRpbmcgc3BlY2lmaWVkIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIHRpbWVvdXQgSURcbiAgICovXG4gIHNldFRpbWVvdXQoZm4sIHRpbWVvdXQpIHtcbiAgICBmbiA9IExpYi5iaW5kKHRoaXMsIGZuKTtcblxuICAgIC8vIHdpbmRvdy5zZXRUaW1lb3V0IHdvdWxkIGJlIHByZWZlcmFibGUgaGVyZSwgYnV0IGR1ZSB0byBzb21lIGJpemFycmUgaXNzdWUgd2l0aCBTaW5vbiBhbmQvb3IgUGhhbnRvbWpzLCB3ZSBjYW4ndC5cbiAgICBsZXQgdGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoZm4sIHRpbWVvdXQpO1xuXG4gICAgY29uc3QgZGlzcG9zZUZuID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH07XG5cbiAgICBkaXNwb3NlRm4uZ3VpZCA9IGB2anMtdGltZW91dC0ke3RpbWVvdXRJZH1gO1xuXG4gICAgdGhpcy5vbignZGlzcG9zZScsIGRpc3Bvc2VGbik7XG5cbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhIHRpbWVvdXQgYW5kIHJlbW92ZXMgdGhlIGFzc29jaWF0ZWQgZGlzcG9zZSBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZW91dElkIFRoZSBpZCBvZiB0aGUgdGltZW91dCB0byBjbGVhclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIHRpbWVvdXQgSURcbiAgICovXG4gIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpIHtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgICBjb25zdCBkaXNwb3NlRm4gPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgZGlzcG9zZUZuLmd1aWQgPSBgdmpzLXRpbWVvdXQtJHt0aW1lb3V0SWR9YDtcblxuICAgIHRoaXMub2ZmKCdkaXNwb3NlJywgZGlzcG9zZUZuKTtcblxuICAgIHJldHVybiB0aW1lb3V0SWQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnRlcnZhbCBhbmQgc2V0cyB1cCBkaXNwb3NhbCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gcnVuIGV2ZXJ5IE4gc2Vjb25kcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsIE51bWJlciBvZiBtcyB0byBkZWxheSBiZWZvcmUgZXhlY3V0aW5nIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7TnVtYmVyfSBSZXR1cm5zIHRoZSBpbnRlcnZhbCBJRFxuICAgKi9cbiAgc2V0SW50ZXJ2YWwoZm4sIGludGVydmFsKSB7XG4gICAgZm4gPSBMaWIuYmluZCh0aGlzLCBmbik7XG5cbiAgICBsZXQgaW50ZXJ2YWxJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmbiwgaW50ZXJ2YWwpO1xuXG4gICAgY29uc3QgZGlzcG9zZUZuID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgfTtcblxuICAgIGRpc3Bvc2VGbi5ndWlkID0gYHZqcy1pbnRlcnZhbC0ke2ludGVydmFsSWR9YDtcblxuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBkaXNwb3NlRm4pO1xuXG4gICAgcmV0dXJuIGludGVydmFsSWQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFuIGludGVydmFsIGFuZCByZW1vdmVzIHRoZSBhc3NvY2lhdGVkIGRpc3Bvc2UgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsSWQgVGhlIGlkIG9mIHRoZSBpbnRlcnZhbCB0byBjbGVhclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIGludGVydmFsIElEXG4gICAqL1xuICBjbGVhckludGVydmFsKGludGVydmFsSWQpIHtcbiAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcblxuICAgIGNvbnN0IGRpc3Bvc2VGbiA9IGZ1bmN0aW9uKCkge307XG5cbiAgICBkaXNwb3NlRm4uZ3VpZCA9IGB2anMtaW50ZXJ2YWwtJHtpbnRlcnZhbElkfWA7XG5cbiAgICB0aGlzLm9mZignZGlzcG9zZScsIGRpc3Bvc2VGbik7XG5cbiAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgfVxuXG4gIHN0YXRpYyByZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wKSB7XG4gICAgaWYgKCFDb21wb25lbnQuY29tcG9uZW50c18pIHtcbiAgICAgIENvbXBvbmVudC5jb21wb25lbnRzXyA9IHt9O1xuICAgIH1cblxuICAgIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXSA9IGNvbXA7XG4gICAgcmV0dXJuIGNvbXA7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29tcG9uZW50KG5hbWUpIHtcbiAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHNfICYmIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXSkge1xuICAgICAgcmV0dXJuIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy52aWRlb2pzICYmIHdpbmRvdy52aWRlb2pzW25hbWVdKSB7XG4gICAgICBMaWIubG9nLndhcm4oYFRoZSAke25hbWV9IGNvbXBvbmVudCB3YXMgYWRkZWQgdG8gdGhlIHZpZGVvanMgb2JqZWN0IHdoZW4gaXQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpYCk7XG4gICAgICByZXR1cm4gd2luZG93LnZpZGVvanNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGV4dGVuZChwcm9wcykge1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgLy8gU2V0IHVwIHRoZSBjb25zdHJ1Y3RvciB1c2luZyB0aGUgc3VwcGxpZWQgaW5pdCBtZXRob2RcbiAgICAvLyBvciB1c2luZyB0aGUgaW5pdCBvZiB0aGUgcGFyZW50IG9iamVjdFxuICAgIC8vIE1ha2Ugc3VyZSB0byBjaGVjayB0aGUgdW5vYmZ1c2NhdGVkIHZlcnNpb24gZm9yIGV4dGVybmFsIGxpYnNcbiAgICBsZXQgaW5pdCA9IHByb3BzLmluaXQgfHwgcHJvcHMuaW5pdCB8fCB0aGlzLnByb3RvdHlwZS5pbml0IHx8IHRoaXMucHJvdG90eXBlLmluaXQgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAvLyBJbiBSZXNpZydzIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZSAocHJldmlvdXNseSB1c2VkKSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyAgaXMgYSBmdW5jdGlvbiB0aGF0IGNhbGxzIGB0aGlzLmluaXQuYXBwbHkoYXJndW1lbnRzKWBcbiAgICAvLyBIb3dldmVyIHRoYXQgd291bGQgcHJldmVudCB1cyBmcm9tIHVzaW5nIGBQYXJlbnRPYmplY3QuY2FsbCh0aGlzKTtgXG4gICAgLy8gIGluIGEgQ2hpbGQgY29uc3RydWN0b3IgYmVjYXVzZSB0aGUgYHRoaXNgIGluIGB0aGlzLmluaXRgXG4gICAgLy8gIHdvdWxkIHN0aWxsIHJlZmVyIHRvIHRoZSBDaGlsZCBhbmQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcC5cbiAgICAvLyBXZSB3b3VsZCBpbnN0ZWFkIGhhdmUgdG8gZG9cbiAgICAvLyAgICBgUGFyZW50T2JqZWN0LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7YFxuICAgIC8vICBCbGVoLiBXZSdyZSBub3QgY3JlYXRpbmcgYSBfc3VwZXIoKSBmdW5jdGlvbiwgc28gaXQncyBnb29kIHRvIGtlZXBcbiAgICAvLyAgdGhlIHBhcmVudCBjb25zdHJ1Y3RvciByZWZlcmVuY2Ugc2ltcGxlLlxuICAgIGxldCBzdWJPYmogPSBmdW5jdGlvbigpIHtcbiAgICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgLy8gSW5oZXJpdCBmcm9tIHRoaXMgb2JqZWN0J3MgcHJvdG90eXBlXG4gICAgc3ViT2JqLnByb3RvdHlwZSA9IExpYi5vYmouY3JlYXRlKHRoaXMucHJvdG90eXBlKTtcbiAgICAvLyBSZXNldCB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkgZm9yIHN1Yk9iaiBvdGhlcndpc2VcbiAgICAvLyBpbnN0YW5jZXMgb2Ygc3ViT2JqIHdvdWxkIGhhdmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBwYXJlbnQgT2JqZWN0XG4gICAgc3ViT2JqLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1Yk9iajtcblxuICAgIC8vIE1ha2UgdGhlIGNsYXNzIGV4dGVuZGFibGVcbiAgICBzdWJPYmouZXh0ZW5kID0gQ29tcG9uZW50LmV4dGVuZDtcbiAgICAvLyBNYWtlIGEgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGluc3RhbmNlc1xuICAgIC8vIHN1Yk9iai5jcmVhdGUgPSBDb3JlT2JqZWN0LmNyZWF0ZTtcblxuICAgIC8vIEV4dGVuZCBzdWJPYmoncyBwcm90b3R5cGUgd2l0aCBmdW5jdGlvbnMgYW5kIG90aGVyIHByb3BlcnRpZXMgZnJvbSBwcm9wc1xuICAgIGZvciAobGV0IG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBzdWJPYmoucHJvdG90eXBlW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Yk9iajtcbiAgfVxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbXBvbmVudCcsIENvbXBvbmVudCk7XG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcblxuLy8gUmVxdWlyZWQgY2hpbGRyZW5cbmltcG9ydCBQbGF5VG9nZ2xlIGZyb20gJy4vcGxheS10b2dnbGUuanMnO1xuaW1wb3J0IEN1cnJlbnRUaW1lRGlzcGxheSBmcm9tICcuL3RpbWUtY29udHJvbHMvY3VycmVudC10aW1lLWRpc3BsYXkuanMnO1xuaW1wb3J0IER1cmF0aW9uRGlzcGxheSBmcm9tICcuL3RpbWUtY29udHJvbHMvZHVyYXRpb24tZGlzcGxheS5qcyc7XG5pbXBvcnQgVGltZURpdmlkZXIgZnJvbSAnLi90aW1lLWNvbnRyb2xzL3RpbWUtZGl2aWRlci5qcyc7XG5pbXBvcnQgUmVtYWluaW5nVGltZURpc3BsYXkgZnJvbSAnLi90aW1lLWNvbnRyb2xzL3JlbWFpbmluZy10aW1lLWRpc3BsYXkuanMnO1xuaW1wb3J0IExpdmVEaXNwbGF5IGZyb20gJy4vbGl2ZS1kaXNwbGF5LmpzJztcbmltcG9ydCBQcm9ncmVzc0NvbnRyb2wgZnJvbSAnLi9wcm9ncmVzcy1jb250cm9sL3Byb2dyZXNzLWNvbnRyb2wuanMnO1xuaW1wb3J0IEZ1bGxzY3JlZW5Ub2dnbGUgZnJvbSAnLi9mdWxsc2NyZWVuLXRvZ2dsZS5qcyc7XG5pbXBvcnQgVm9sdW1lQ29udHJvbCBmcm9tICcuL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1jb250cm9sLmpzJztcbmltcG9ydCBWb2x1bWVNZW51QnV0dG9uIGZyb20gJy4vdm9sdW1lLW1lbnUtYnV0dG9uLmpzJztcbmltcG9ydCBNdXRlVG9nZ2xlIGZyb20gJy4vbXV0ZS10b2dnbGUuanMnO1xuaW1wb3J0IENoYXB0ZXJzQnV0dG9uIGZyb20gJy4vdGV4dC10cmFjay1jb250cm9scy9jaGFwdGVycy1idXR0b24uanMnO1xuaW1wb3J0IFN1YnRpdGxlc0J1dHRvbiBmcm9tICcuL3RleHQtdHJhY2stY29udHJvbHMvc3VidGl0bGVzLWJ1dHRvbi5qcyc7XG5pbXBvcnQgQ2FwdGlvbnNCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWNvbnRyb2xzL2NhcHRpb25zLWJ1dHRvbi5qcyc7XG5pbXBvcnQgUGxheWJhY2tSYXRlTWVudUJ1dHRvbiBmcm9tICcuL3BsYXliYWNrLXJhdGUtbWVudS9wbGF5YmFjay1yYXRlLW1lbnUtYnV0dG9uLmpzJztcbmltcG9ydCBDdXN0b21Db250cm9sU3BhY2VyIGZyb20gJy4vc3BhY2VyLWNvbnRyb2xzL2N1c3RvbS1jb250cm9sLXNwYWNlci5qcyc7XG5cbi8qKlxuICogQ29udGFpbmVyIG9mIG1haW4gY29udHJvbHNcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuY2xhc3MgQ29udHJvbEJhciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLWJhcidcbiAgICB9KTtcbiAgfVxufVxuXG5Db250cm9sQmFyLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgbG9hZEV2ZW50OiAncGxheScsXG4gIGNoaWxkcmVuOiBbXG4gICAgJ3BsYXlUb2dnbGUnLFxuICAgICdjdXJyZW50VGltZURpc3BsYXknLFxuICAgICd0aW1lRGl2aWRlcicsXG4gICAgJ2R1cmF0aW9uRGlzcGxheScsXG4gICAgJ3Byb2dyZXNzQ29udHJvbCcsXG4gICAgJ2xpdmVEaXNwbGF5JyxcbiAgICAncmVtYWluaW5nVGltZURpc3BsYXknLFxuICAgICdjdXN0b21Db250cm9sU3BhY2VyJyxcbiAgICAncGxheWJhY2tSYXRlTWVudUJ1dHRvbicsXG4gICAgJ211dGVUb2dnbGUnLFxuICAgICd2b2x1bWVDb250cm9sJyxcbiAgICAnY2hhcHRlcnNCdXR0b24nLFxuICAgICdzdWJ0aXRsZXNCdXR0b24nLFxuICAgICdjYXB0aW9uc0J1dHRvbicsXG4gICAgJ3ZvbHVtZU1lbnVCdXR0b24nLFxuICAgICdmdWxsc2NyZWVuVG9nZ2xlJ1xuICBdXG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbnRyb2xCYXInLCBDb250cm9sQmFyKTtcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCYXI7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5cbi8qKlxuICogVG9nZ2xlIGZ1bGxzY3JlZW4gdmlkZW9cbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgdmpzLkJ1dHRvblxuICovXG5jbGFzcyBGdWxsc2NyZWVuVG9nZ2xlIGV4dGVuZHMgQnV0dG9uIHtcblxuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLWZ1bGxzY3JlZW4tY29udHJvbCAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcl8uaXNGdWxsc2NyZWVuKCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgdGhpcy5jb250cm9sVGV4dF8uaW5uZXJIVE1MID0gdGhpcy5sb2NhbGl6ZSgnTm9uLUZ1bGxzY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0Xy5pbm5lckhUTUwgPSB0aGlzLmxvY2FsaXplKCdGdWxsc2NyZWVuJyk7XG4gICAgfVxuICB9XG5cbn1cblxuRnVsbHNjcmVlblRvZ2dsZS5wcm90b3R5cGUuYnV0dG9uVGV4dCA9ICdGdWxsc2NyZWVuJztcblxuQnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdGdWxsc2NyZWVuVG9nZ2xlJywgRnVsbHNjcmVlblRvZ2dsZSk7XG5leHBvcnQgZGVmYXVsdCBGdWxsc2NyZWVuVG9nZ2xlO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGxpdmUgaW5kaWNhdG9yXG4gKiBUT0RPIC0gRnV0dXJlIG1ha2UgaXQgY2xpY2sgdG8gc25hcCB0byBsaXZlXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgTGl2ZURpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNyZWF0ZUVsKCkge1xuICAgIHZhciBlbCA9IHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnU3RyZWFtIFR5cGUnKX08L3NwYW4+JHt0aGlzLmxvY2FsaXplKCdMSVZFJyl9YCxcbiAgICAgICdhcmlhLWxpdmUnOiAnb2ZmJ1xuICAgIH0pO1xuXG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTGl2ZURpc3BsYXknLCBMaXZlRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBMaXZlRGlzcGxheTtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWInO1xuXG4vKipcbiAqIEEgYnV0dG9uIGNvbXBvbmVudCBmb3IgbXV0aW5nIHRoZSBhdWRpb1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNdXRlVG9nZ2xlIGV4dGVuZHMgQnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5vbihwbGF5ZXIsICd2b2x1bWVjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG5cbiAgICAvLyBoaWRlIG11dGUgdG9nZ2xlIGlmIHRoZSBjdXJyZW50IHRlY2ggZG9lc24ndCBzdXBwb3J0IHZvbHVtZSBjb250cm9sXG4gICAgaWYgKHBsYXllci50ZWNoICYmIHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKCl7XG4gICAgICBpZiAocGxheWVyLnRlY2hbJ2ZlYXR1cmVzVm9sdW1lQ29udHJvbCddID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKCksXG4gICAgICBpbm5lckhUTUw6IGA8ZGl2PjxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnTXV0ZScpfTwvc3Bhbj48L2Rpdj5gXG4gICAgfSk7XG4gIH1cblxuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLW11dGUtY29udHJvbCAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5wbGF5ZXJfLm11dGVkKCB0aGlzLnBsYXllcl8ubXV0ZWQoKSA/IGZhbHNlIDogdHJ1ZSApO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHZhciB2b2wgPSB0aGlzLnBsYXllcl8udm9sdW1lKCksXG4gICAgICAgIGxldmVsID0gMztcblxuICAgIGlmICh2b2wgPT09IDAgfHwgdGhpcy5wbGF5ZXJfLm11dGVkKCkpIHtcbiAgICAgIGxldmVsID0gMDtcbiAgICB9IGVsc2UgaWYgKHZvbCA8IDAuMzMpIHtcbiAgICAgIGxldmVsID0gMTtcbiAgICB9IGVsc2UgaWYgKHZvbCA8IDAuNjcpIHtcbiAgICAgIGxldmVsID0gMjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCByZXdyaXRlIHRoZSBidXR0b24gdGV4dCBpZiB0aGUgYWN0dWFsIHRleHQgZG9lc24ndCBjaGFuZ2UuXG4gICAgLy8gVGhpcyBjYXVzZXMgdW5uZWNlc3NhcnkgYW5kIGNvbmZ1c2luZyBpbmZvcm1hdGlvbiBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZXZlcnkgdGltZSB0aGUgdm9sdW1lIGxldmVsIGlzIGNoYW5nZWQuXG4gICAgbGV0IHRvTXV0ZSA9IHRoaXMucGxheWVyXy5tdXRlZCgpID8gJ1VubXV0ZScgOiAnTXV0ZSc7XG4gICAgbGV0IGxvY2FsaXplZE11dGUgPSB0aGlzLmxvY2FsaXplKHRvTXV0ZSk7XG4gICAgaWYgKHRoaXMuZWxfLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmlubmVySFRNTCAhPT0gbG9jYWxpemVkTXV0ZSkge1xuICAgICAgdGhpcy5lbF8uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gbG9jYWxpemVkTXV0ZTtcbiAgICB9XG5cbiAgICAvKiBUT0RPIGltcHJvdmUgbXV0ZWQgaWNvbiBjbGFzc2VzICovXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIExpYi5yZW1vdmVDbGFzcyh0aGlzLmVsXywgYHZqcy12b2wtJHtpfWApO1xuICAgIH1cbiAgICBMaWIuYWRkQ2xhc3ModGhpcy5lbF8sIGB2anMtdm9sLSR7bGV2ZWx9YCk7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ011dGVUb2dnbGUnLCBNdXRlVG9nZ2xlKTtcbmV4cG9ydCBkZWZhdWx0IE11dGVUb2dnbGU7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcblxuLyoqXG4gKiBCdXR0b24gdG8gdG9nZ2xlIGJldHdlZW4gcGxheSBhbmQgcGF1c2VcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFBsYXlUb2dnbGUgZXh0ZW5kcyBCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMub24ocGxheWVyLCAncGxheScsIHRoaXMuaGFuZGxlUGxheSk7XG4gICAgdGhpcy5vbihwbGF5ZXIsICdwYXVzZScsIHRoaXMuaGFuZGxlUGF1c2UpO1xuICB9XG5cbiAgYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gYHZqcy1wbGF5LWNvbnRyb2wgJHtzdXBlci5idWlsZENTU0NsYXNzKCl9YDtcbiAgfVxuXG4gIC8vIGhhbmRsZUNsaWNrIC0gVG9nZ2xlIGJldHdlZW4gcGxheSBhbmQgcGF1c2VcbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaGFuZGxlUGxheSAtIEFkZCB0aGUgdmpzLXBsYXlpbmcgY2xhc3MgdG8gdGhlIGVsZW1lbnQgc28gaXQgY2FuIGNoYW5nZSBhcHBlYXJhbmNlXG4gIGhhbmRsZVBsYXkoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBhdXNlZCcpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7XG4gICAgdGhpcy5lbF8uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gdGhpcy5sb2NhbGl6ZSgnUGF1c2UnKTsgLy8gY2hhbmdlIHRoZSBidXR0b24gdGV4dCB0byBcIlBhdXNlXCJcbiAgfVxuXG4gIC8vIGhhbmRsZVBhdXNlIC0gQWRkIHRoZSB2anMtcGF1c2VkIGNsYXNzIHRvIHRoZSBlbGVtZW50IHNvIGl0IGNhbiBjaGFuZ2UgYXBwZWFyYW5jZVxuICBoYW5kbGVQYXVzZSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICB0aGlzLmVsXy5jaGlsZHJlblswXS5jaGlsZHJlblswXS5pbm5lckhUTUwgPSB0aGlzLmxvY2FsaXplKCdQbGF5Jyk7IC8vIGNoYW5nZSB0aGUgYnV0dG9uIHRleHQgdG8gXCJQbGF5XCJcbiAgfVxuXG59XG5cblBsYXlUb2dnbGUucHJvdG90eXBlLmJ1dHRvblRleHQgPSAnUGxheSc7XG5cbkJ1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnUGxheVRvZ2dsZScsIFBsYXlUb2dnbGUpO1xuZXhwb3J0IGRlZmF1bHQgUGxheVRvZ2dsZTtcbiIsImltcG9ydCBNZW51QnV0dG9uIGZyb20gJy4uLy4uL21lbnUvbWVudS1idXR0b24uanMnO1xuaW1wb3J0IE1lbnUgZnJvbSAnLi4vLi4vbWVudS9tZW51LmpzJztcbmltcG9ydCBQbGF5YmFja1JhdGVNZW51SXRlbSBmcm9tICcuL3BsYXliYWNrLXJhdGUtbWVudS1pdGVtLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGNvbnRyb2xsaW5nIHRoZSBwbGF5YmFjayByYXRlXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFBsYXliYWNrUmF0ZU1lbnVCdXR0b24gZXh0ZW5kcyBNZW51QnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICB0aGlzLnVwZGF0ZUxhYmVsKCk7XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIHRoaXMudXBkYXRlVmlzaWJpbGl0eSk7XG4gICAgdGhpcy5vbihwbGF5ZXIsICdyYXRlY2hhbmdlJywgdGhpcy51cGRhdGVMYWJlbCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgpO1xuXG4gICAgdGhpcy5sYWJlbEVsXyA9IExpYi5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXliYWNrLXJhdGUtdmFsdWUnLFxuICAgICAgaW5uZXJIVE1MOiAxLjBcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMubGFiZWxFbF8pO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLy8gTWVudSBjcmVhdGlvblxuICBjcmVhdGVNZW51KCkge1xuICAgIGxldCBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXIoKSk7XG4gICAgbGV0IHJhdGVzID0gdGhpcy5wbGF5ZXIoKS5vcHRpb25zKClbJ3BsYXliYWNrUmF0ZXMnXTtcblxuICAgIGlmIChyYXRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IHJhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIG1lbnUuYWRkQ2hpbGQoXG4gICAgICAgICAgbmV3IFBsYXliYWNrUmF0ZU1lbnVJdGVtKHRoaXMucGxheWVyKCksIHsgJ3JhdGUnOiByYXRlc1tpXSArICd4J30pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cblxuICB1cGRhdGVBUklBQXR0cmlidXRlcygpIHtcbiAgICAvLyBDdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgICB0aGlzLmVsKCkuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICAvLyBzZWxlY3QgbmV4dCByYXRlIG9wdGlvblxuICAgIGxldCBjdXJyZW50UmF0ZSA9IHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCk7XG4gICAgbGV0IHJhdGVzID0gdGhpcy5wbGF5ZXIoKS5vcHRpb25zKClbJ3BsYXliYWNrUmF0ZXMnXTtcbiAgICAvLyB0aGlzIHdpbGwgc2VsZWN0IGZpcnN0IG9uZSBpZiB0aGUgbGFzdCBvbmUgY3VycmVudGx5IHNlbGVjdGVkXG4gICAgbGV0IG5ld1JhdGUgPSByYXRlc1swXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8cmF0ZXMubGVuZ3RoIDsgaSsrKSB7XG4gICAgICBpZiAocmF0ZXNbaV0gPiBjdXJyZW50UmF0ZSkge1xuICAgICAgICBuZXdSYXRlID0gcmF0ZXNbaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZShuZXdSYXRlKTtcbiAgfVxuXG4gIHBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXG4gICAgICAmJiB0aGlzLnBsYXllcigpLnRlY2hbJ2ZlYXR1cmVzUGxheWJhY2tSYXRlJ11cbiAgICAgICYmIHRoaXMucGxheWVyKCkub3B0aW9ucygpWydwbGF5YmFja1JhdGVzJ11cbiAgICAgICYmIHRoaXMucGxheWVyKCkub3B0aW9ucygpWydwbGF5YmFja1JhdGVzJ10ubGVuZ3RoID4gMFxuICAgIDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIHBsYXliYWNrIHJhdGUgY29udHJvbHMgd2hlbiB0aGV5J3JlIG5vIHBsYXliYWNrIHJhdGUgb3B0aW9ucyB0byBzZWxlY3RcbiAgICovXG4gIHVwZGF0ZVZpc2liaWxpdHkoKSB7XG4gICAgaWYgKHRoaXMucGxheWJhY2tSYXRlU3VwcG9ydGVkKCkpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYnV0dG9uIGxhYmVsIHdoZW4gcmF0ZSBjaGFuZ2VkXG4gICAqL1xuICB1cGRhdGVMYWJlbCgpIHtcbiAgICBpZiAodGhpcy5wbGF5YmFja1JhdGVTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhpcy5sYWJlbEVsXy5pbm5lckhUTUwgPSB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpICsgJ3gnO1xuICAgIH1cbiAgfVxuXG59XG5cblBsYXliYWNrUmF0ZU1lbnVCdXR0b24ucHJvdG90eXBlLmJ1dHRvblRleHQgPSAnUGxheWJhY2sgUmF0ZSc7XG5QbGF5YmFja1JhdGVNZW51QnV0dG9uLnByb3RvdHlwZS5jbGFzc05hbWUgPSAndmpzLXBsYXliYWNrLXJhdGUnO1xuXG5NZW51QnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51QnV0dG9uJywgUGxheWJhY2tSYXRlTWVudUJ1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBQbGF5YmFja1JhdGVNZW51QnV0dG9uO1xuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4uLy4uL21lbnUvbWVudS1pdGVtLmpzJztcblxuLyoqXG4gKiBUaGUgc3BlY2lmaWMgbWVudSBpdGVtIHR5cGUgZm9yIHNlbGVjdGluZyBhIHBsYXliYWNrIHJhdGVcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgUGxheWJhY2tSYXRlTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbSB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBsZXQgbGFiZWwgPSBvcHRpb25zWydyYXRlJ107XG4gICAgbGV0IHJhdGUgPSBwYXJzZUZsb2F0KGxhYmVsLCAxMCk7XG5cbiAgICAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cbiAgICBvcHRpb25zWydsYWJlbCddID0gbGFiZWw7XG4gICAgb3B0aW9uc1snc2VsZWN0ZWQnXSA9IHJhdGUgPT09IDE7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB0aGlzLnJhdGUgPSByYXRlO1xuXG4gICAgdGhpcy5vbihwbGF5ZXIsICdyYXRlY2hhbmdlJywgdGhpcy51cGRhdGUpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgc3VwZXIuaGFuZGxlQ2xpY2soKTtcbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSh0aGlzLnJhdGUpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSA9PT0gdGhpcy5yYXRlKTtcbiAgfVxuXG59XG5cblBsYXliYWNrUmF0ZU1lbnVJdGVtLnByb3RvdHlwZS5jb250ZW50RWxUeXBlID0gJ2J1dHRvbic7XG5cbk1lbnVJdGVtLnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51SXRlbScsIFBsYXliYWNrUmF0ZU1lbnVJdGVtKTtcbmV4cG9ydCBkZWZhdWx0IFBsYXliYWNrUmF0ZU1lbnVJdGVtO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8qKlxuICogU2hvd3MgbG9hZCBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBMb2FkUHJvZ3Jlc3NCYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3Byb2dyZXNzJywgdGhpcy51cGRhdGUpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbG9hZC1wcm9ncmVzcycsXG4gICAgICBpbm5lckhUTUw6IGA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj48c3Bhbj4ke3RoaXMubG9jYWxpemUoJ0xvYWRlZCcpfTwvc3Bhbj46IDAlPC9zcGFuPmBcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgYnVmZmVyZWQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWQoKTtcbiAgICBsZXQgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICBsZXQgYnVmZmVyZWRFbmQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWRFbmQoKTtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmVsXy5jaGlsZHJlbjtcblxuICAgIC8vIGdldCB0aGUgcGVyY2VudCB3aWR0aCBvZiBhIHRpbWUgY29tcGFyZWQgdG8gdGhlIHRvdGFsIGVuZFxuICAgIGxldCBwZXJjZW50aWZ5ID0gZnVuY3Rpb24gKHRpbWUsIGVuZCl7XG4gICAgICBsZXQgcGVyY2VudCA9ICh0aW1lIC8gZW5kKSB8fCAwOyAvLyBubyBOYU5cbiAgICAgIHJldHVybiAoKHBlcmNlbnQgPj0gMSA/IDEgOiBwZXJjZW50KSAqIDEwMCkgKyAnJSc7XG4gICAgfTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgd2lkdGggb2YgdGhlIHByb2dyZXNzIGJhclxuICAgIHRoaXMuZWxfLnN0eWxlLndpZHRoID0gcGVyY2VudGlmeShidWZmZXJlZEVuZCwgZHVyYXRpb24pO1xuXG4gICAgLy8gYWRkIGNoaWxkIGVsZW1lbnRzIHRvIHJlcHJlc2VudCB0aGUgaW5kaXZpZHVhbCBidWZmZXJlZCB0aW1lIHJhbmdlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzdGFydCA9IGJ1ZmZlcmVkLnN0YXJ0KGkpO1xuICAgICAgbGV0IGVuZCA9IGJ1ZmZlcmVkLmVuZChpKTtcbiAgICAgIGxldCBwYXJ0ID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmICghcGFydCkge1xuICAgICAgICBwYXJ0ID0gdGhpcy5lbF8uYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIHBlcmNlbnQgYmFzZWQgb24gdGhlIHdpZHRoIG9mIHRoZSBwcm9ncmVzcyBiYXIgKGJ1ZmZlcmVkRW5kKVxuICAgICAgcGFydC5zdHlsZS5sZWZ0ID0gcGVyY2VudGlmeShzdGFydCwgYnVmZmVyZWRFbmQpO1xuICAgICAgcGFydC5zdHlsZS53aWR0aCA9IHBlcmNlbnRpZnkoZW5kIC0gc3RhcnQsIGJ1ZmZlcmVkRW5kKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdW51c2VkIGJ1ZmZlcmVkIHJhbmdlIGVsZW1lbnRzXG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA+IGJ1ZmZlcmVkLmxlbmd0aDsgaS0tKSB7XG4gICAgICB0aGlzLmVsXy5yZW1vdmVDaGlsZChjaGlsZHJlbltpLTFdKTtcbiAgICB9XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xvYWRQcm9ncmVzc0JhcicsIExvYWRQcm9ncmVzc0Jhcik7XG5leHBvcnQgZGVmYXVsdCBMb2FkUHJvZ3Jlc3NCYXI7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5cbi8qKlxuICogU2hvd3MgcGxheSBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBQbGF5UHJvZ3Jlc3NCYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXktcHJvZ3Jlc3MnLFxuICAgICAgaW5uZXJIVE1MOiBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+PHNwYW4+JHt0aGlzLmxvY2FsaXplKCdQcm9ncmVzcycpfTwvc3Bhbj46IDAlPC9zcGFuPmBcbiAgICB9KTtcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheVByb2dyZXNzQmFyJywgUGxheVByb2dyZXNzQmFyKTtcbmV4cG9ydCBkZWZhdWx0IFBsYXlQcm9ncmVzc0JhcjtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCBTZWVrQmFyIGZyb20gJy4vc2Vlay1iYXIuanMnO1xuXG4vKipcbiAqIFRoZSBQcm9ncmVzcyBDb250cm9sIGNvbXBvbmVudCBjb250YWlucyB0aGUgc2VlayBiYXIsIGxvYWQgcHJvZ3Jlc3MsXG4gKiBhbmQgcGxheSBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBQcm9ncmVzc0NvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1wcm9ncmVzcy1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuICB9XG59XG5cblByb2dyZXNzQ29udHJvbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiB7XG4gICAgJ3NlZWtCYXInOiB7fVxuICB9XG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1Byb2dyZXNzQ29udHJvbCcsIFByb2dyZXNzQ29udHJvbCk7XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc0NvbnRyb2w7XG4iLCJpbXBvcnQgU2xpZGVyIGZyb20gJy4uLy4uL3NsaWRlci9zbGlkZXIuanMnO1xuaW1wb3J0IExvYWRQcm9ncmVzc0JhciBmcm9tICcuL2xvYWQtcHJvZ3Jlc3MtYmFyLmpzJztcbmltcG9ydCBQbGF5UHJvZ3Jlc3NCYXIgZnJvbSAnLi9wbGF5LXByb2dyZXNzLWJhci5qcyc7XG5pbXBvcnQgU2Vla0hhbmRsZSBmcm9tICcuL3NlZWstaGFuZGxlLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vKipcbiAqIFNlZWsgQmFyIGFuZCBob2xkZXIgZm9yIHRoZSBwcm9ncmVzcyBiYXJzXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFNlZWtCYXIgZXh0ZW5kcyBTbGlkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3RpbWV1cGRhdGUnLCB0aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKTtcbiAgICBwbGF5ZXIucmVhZHkoTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVBUklBQXR0cmlidXRlcykpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtaG9sZGVyJyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ3ZpZGVvIHByb2dyZXNzIGJhcidcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUFSSUFBdHRyaWJ1dGVzKCkge1xuICAgICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgICAgbGV0IHRpbWUgPSAodGhpcy5wbGF5ZXJfLnNjcnViYmluZygpKSA/IHRoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7XG4gICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCBMaWIucm91bmQodGhpcy5nZXRQZXJjZW50KCkqMTAwLCAyKSk7IC8vIG1hY2hpbmUgcmVhZGFibGUgdmFsdWUgb2YgcHJvZ3Jlc3MgYmFyIChwZXJjZW50YWdlIGNvbXBsZXRlKVxuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVldGV4dCcsIExpYi5mb3JtYXRUaW1lKHRpbWUsIHRoaXMucGxheWVyXy5kdXJhdGlvbigpKSk7IC8vIGh1bWFuIHJlYWRhYmxlIHZhbHVlIG9mIHByb2dyZXNzIGJhciAodGltZSBjb21wbGV0ZSlcbiAgfVxuXG4gIGdldFBlcmNlbnQoKSB7XG4gICAgbGV0IHBlcmNlbnQgPSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuICAgIHJldHVybiBwZXJjZW50ID49IDEgPyAxIDogcGVyY2VudDtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHN1cGVyLmhhbmRsZU1vdXNlRG93bihldmVudCk7XG5cbiAgICB0aGlzLnBsYXllcl8uc2NydWJiaW5nKHRydWUpO1xuXG4gICAgdGhpcy52aWRlb1dhc1BsYXlpbmcgPSAhdGhpcy5wbGF5ZXJfLnBhdXNlZCgpO1xuICAgIHRoaXMucGxheWVyXy5wYXVzZSgpO1xuICB9XG5cbiAgaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgbGV0IG5ld1RpbWUgPSB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KSAqIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHZpZGVvIGVuZCB3aGlsZSBzY3J1YmJpbmcuXG4gICAgaWYgKG5ld1RpbWUgPT09IHRoaXMucGxheWVyXy5kdXJhdGlvbigpKSB7IG5ld1RpbWUgPSBuZXdUaW1lIC0gMC4xOyB9XG5cbiAgICAvLyBTZXQgbmV3IHRpbWUgKHRlbGwgcGxheWVyIHRvIHNlZWsgdG8gbmV3IHRpbWUpXG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKG5ld1RpbWUpO1xuICB9XG5cbiAgaGFuZGxlTW91c2VVcChldmVudCkge1xuICAgIHN1cGVyLmhhbmRsZU1vdXNlVXAoZXZlbnQpO1xuXG4gICAgdGhpcy5wbGF5ZXJfLnNjcnViYmluZyhmYWxzZSk7XG4gICAgaWYgKHRoaXMudmlkZW9XYXNQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIHN0ZXBGb3J3YXJkKCkge1xuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSArIDUpOyAvLyBtb3JlIHF1aWNrbHkgZmFzdCBmb3J3YXJkIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gIH1cblxuICBzdGVwQmFjaygpIHtcbiAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLSA1KTsgLy8gbW9yZSBxdWlja2x5IHJld2luZCBmb3Iga2V5Ym9hcmQtb25seSB1c2Vyc1xuICB9XG5cbn1cblxuU2Vla0Jhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiB7XG4gICAgJ2xvYWRQcm9ncmVzc0Jhcic6IHt9LFxuICAgICdwbGF5UHJvZ3Jlc3NCYXInOiB7fSxcbiAgICAnc2Vla0hhbmRsZSc6IHt9XG4gIH0sXG4gICdiYXJOYW1lJzogJ3BsYXlQcm9ncmVzc0JhcicsXG4gICdoYW5kbGVOYW1lJzogJ3NlZWtIYW5kbGUnXG59O1xuXG5TZWVrQmFyLnByb3RvdHlwZS5wbGF5ZXJFdmVudCA9ICd0aW1ldXBkYXRlJztcblxuU2xpZGVyLnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrQmFyJywgU2Vla0Jhcik7XG5leHBvcnQgZGVmYXVsdCBTZWVrQmFyO1xuIiwiaW1wb3J0IFNsaWRlckhhbmRsZSBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLWhhbmRsZS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBUaGUgU2VlayBIYW5kbGUgc2hvd3MgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBsYXloZWFkIGR1cmluZyBwbGF5YmFjayxcbiAqIGFuZCBjYW4gYmUgZHJhZ2dlZCB0byBhZGp1c3QgdGhlIHBsYXloZWFkLlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBTZWVrSGFuZGxlIGV4dGVuZHMgU2xpZGVySGFuZGxlIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtc2Vlay1oYW5kbGUnLFxuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVDb250ZW50KCkge1xuICAgIGxldCB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICB0aGlzLmVsXy5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHtMaWIuZm9ybWF0VGltZSh0aW1lLCB0aGlzLnBsYXllcl8uZHVyYXRpb24oKSl9PC9zcGFuPmA7XG4gIH1cblxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgaGFuZGxlIGNvbnRlbnQsIHdoaWNoIG1heSBiZSByZWFkIGJ5IHNjcmVlbiByZWFkZXJzXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblNlZWtIYW5kbGUucHJvdG90eXBlLmRlZmF1bHRWYWx1ZSA9ICcwMDowMCc7XG5cblNsaWRlckhhbmRsZS5yZWdpc3RlckNvbXBvbmVudCgnU2Vla0hhbmRsZScsIFNlZWtIYW5kbGUpO1xuZXhwb3J0IGRlZmF1bHQgU2Vla0hhbmRsZTtcbiIsImltcG9ydCBTcGFjZXIgZnJvbSAnLi9zcGFjZXIuanMnO1xuXG4vKipcbiAqIFNwYWNlciBzcGVjaWZpY2FsbHkgbWVhbnQgdG8gYmUgdXNlZCBhcyBhbiBpbnNlcnRpb24gcG9pbnQgZm9yIG5ldyBwbHVnaW5zLCBldGMuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JlY3Q9fSBvcHRpb25zXG4gKi9cbmNsYXNzIEN1c3RvbUNvbnRyb2xTcGFjZXIgZXh0ZW5kcyBTcGFjZXIge1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLWN1c3RvbS1jb250cm9sLXNwYWNlciAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKClcbiAgICB9KTtcbiAgfVxufVxuXG5TcGFjZXIucmVnaXN0ZXJDb21wb25lbnQoJ0N1c3RvbUNvbnRyb2xTcGFjZXInLCBDdXN0b21Db250cm9sU3BhY2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQ29udHJvbFNwYWNlcjtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcblxuLyoqXG4gKiBKdXN0IGFuIGVtcHR5IHNwYWNlciBlbGVtZW50IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gYXBwZW5kIHBvaW50IGZvciBwbHVnaW5zLCBldGMuXG4gKiBBbHNvIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBzcGFjZSBiZXR3ZWVuIGVsZW1lbnRzIHdoZW4gbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqL1xuY2xhc3MgU3BhY2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gYHZqcy1zcGFjZXIgJHtzdXBlci5idWlsZENTU0NsYXNzKCl9YDtcbiAgfVxuXG4gIGNyZWF0ZUVsKHByb3BzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpXG4gICAgfSk7XG4gIH1cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTcGFjZXInLCBTcGFjZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBTcGFjZXI7XG4iLCJpbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5cbmNsYXNzIENhcHRpb25TZXR0aW5nc01lbnVJdGVtIGV4dGVuZHMgVGV4dFRyYWNrTWVudUl0ZW0ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIG9wdGlvbnNbJ3RyYWNrJ10gPSB7XG4gICAgICAna2luZCc6IG9wdGlvbnNbJ2tpbmQnXSxcbiAgICAgICdwbGF5ZXInOiBwbGF5ZXIsXG4gICAgICAnbGFiZWwnOiBvcHRpb25zWydraW5kJ10gKyAnIHNldHRpbmdzJyxcbiAgICAgICdkZWZhdWx0JzogZmFsc2UsXG4gICAgICBtb2RlOiAnZGlzYWJsZWQnXG4gICAgfTtcblxuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXRleHR0cmFjay1zZXR0aW5ncycpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZCgndGV4dFRyYWNrU2V0dGluZ3MnKS5zaG93KCk7XG4gIH1cblxufVxuXG5UZXh0VHJhY2tNZW51SXRlbS5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0nLCBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSk7XG5leHBvcnQgZGVmYXVsdCBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbTtcbiIsImltcG9ydCBUZXh0VHJhY2tCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWJ1dHRvbi5qcyc7XG5pbXBvcnQgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0gZnJvbSAnLi9jYXB0aW9uLXNldHRpbmdzLW1lbnUtaXRlbS5qcyc7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2FwdGlvbnNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ2FwdGlvbnNCdXR0b24gZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsJ0NhcHRpb25zIE1lbnUnKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgdGhyZXNob2xkID0gMjtcbiAgICBzdXBlci51cGRhdGUoKTtcblxuICAgIC8vIGlmIG5hdGl2ZSwgdGhlbiB0aHJlc2hvbGQgaXMgMSBiZWNhdXNlIG5vIHNldHRpbmdzIGJ1dHRvblxuICAgIGlmICh0aGlzLnBsYXllcigpLnRlY2ggJiYgdGhpcy5wbGF5ZXIoKS50ZWNoWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSkge1xuICAgICAgdGhyZXNob2xkID0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IHRocmVzaG9sZCkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUl0ZW1zKCkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgaWYgKCEodGhpcy5wbGF5ZXIoKS50ZWNoICYmIHRoaXMucGxheWVyKCkudGVjaFsnZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pKSB7XG4gICAgICBpdGVtcy5wdXNoKG5ldyBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSh0aGlzLnBsYXllcl8sIHsgJ2tpbmQnOiB0aGlzLmtpbmRfIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlSXRlbXMoaXRlbXMpO1xuICB9XG5cbn1cblxuQ2FwdGlvbnNCdXR0b24ucHJvdG90eXBlLmtpbmRfID0gJ2NhcHRpb25zJztcbkNhcHRpb25zQnV0dG9uLnByb3RvdHlwZS5idXR0b25UZXh0ID0gJ0NhcHRpb25zJztcbkNhcHRpb25zQnV0dG9uLnByb3RvdHlwZS5jbGFzc05hbWUgPSAndmpzLWNhcHRpb25zLWJ1dHRvbic7XG5cblRleHRUcmFja0J1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvbnNCdXR0b24nLCBDYXB0aW9uc0J1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBDYXB0aW9uc0J1dHRvbjtcbiIsImltcG9ydCBUZXh0VHJhY2tCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWJ1dHRvbi5qcyc7XG5pbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5pbXBvcnQgQ2hhcHRlcnNUcmFja01lbnVJdGVtIGZyb20gJy4vY2hhcHRlcnMtdHJhY2stbWVudS1pdGVtLmpzJztcbmltcG9ydCBNZW51IGZyb20gJy4uLy4uL21lbnUvbWVudS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbi8vIENoYXB0ZXJzIGFjdCBtdWNoIGRpZmZlcmVudGx5IHRoYW4gb3RoZXIgdGV4dCB0cmFja3Ncbi8vIEN1ZXMgYXJlIG5hdmlnYXRpb24gdnMuIG90aGVyIHRyYWNrcyBvZiBhbHRlcm5hdGl2ZSBsYW5ndWFnZXNcbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2hhcHRlcnNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ2hhcHRlcnNCdXR0b24gZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsJ0NoYXB0ZXJzIE1lbnUnKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG1lbnUgaXRlbSBmb3IgZWFjaCB0ZXh0IHRyYWNrXG4gIGNyZWF0ZUl0ZW1zKCkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgbGV0IHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICBpZiAodHJhY2tbJ2tpbmQnXSA9PT0gdGhpcy5raW5kXykge1xuICAgICAgICBpdGVtcy5wdXNoKG5ldyBUZXh0VHJhY2tNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAgICAndHJhY2snOiB0cmFja1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG5cbiAgY3JlYXRlTWVudSgpIHtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKSB8fCBbXTtcbiAgICBsZXQgY2hhcHRlcnNUcmFjaztcbiAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLmtpbmRfKSB7XG4gICAgICAgIGlmICghdHJhY2suY3Vlcykge1xuICAgICAgICAgIHRyYWNrWydtb2RlJ10gPSAnaGlkZGVuJztcbiAgICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSAqL1xuICAgICAgICAgIC8vIFRPRE8gc2VlIGlmIHdlIGNhbiBmaWd1cmUgb3V0IGEgYmV0dGVyIHdheSBvZiBkb2luZyB0aGlzIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy8xODY0XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1lbnUoKTtcbiAgICAgICAgICB9KSwgMTAwKTtcbiAgICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6ZmFsc2UgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFwdGVyc1RyYWNrID0gdHJhY2s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbWVudSA9IHRoaXMubWVudTtcbiAgICBpZiAobWVudSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXJfKTtcbiAgICAgIG1lbnUuY29udGVudEVsKCkuYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCdsaScsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtdGl0bGUnLFxuICAgICAgICBpbm5lckhUTUw6IExpYi5jYXBpdGFsaXplKHRoaXMua2luZF8pLFxuICAgICAgICB0YWJpbmRleDogLTFcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcHRlcnNUcmFjaykge1xuICAgICAgbGV0IGN1ZXMgPSBjaGFwdGVyc1RyYWNrWydjdWVzJ10sIGN1ZTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjdWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjdWUgPSBjdWVzW2ldO1xuXG4gICAgICAgIGxldCBtaSA9IG5ldyBDaGFwdGVyc1RyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgICAgJ3RyYWNrJzogY2hhcHRlcnNUcmFjayxcbiAgICAgICAgICAnY3VlJzogY3VlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW1zLnB1c2gobWkpO1xuXG4gICAgICAgIG1lbnUuYWRkQ2hpbGQobWkpO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRDaGlsZChtZW51KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuXG59XG5cbkNoYXB0ZXJzQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdjaGFwdGVycyc7XG5DaGFwdGVyc0J1dHRvbi5wcm90b3R5cGUuYnV0dG9uVGV4dCA9ICdDaGFwdGVycyc7XG5DaGFwdGVyc0J1dHRvbi5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ3Zqcy1jaGFwdGVycy1idXR0b24nO1xuXG5UZXh0VHJhY2tCdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzQnV0dG9uJywgQ2hhcHRlcnNCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgQ2hhcHRlcnNCdXR0b247XG4iLCJpbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi4vLi4vbWVudS9tZW51LWl0ZW0uanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIENoYXB0ZXJzVHJhY2tNZW51SXRlbSBleHRlbmRzIE1lbnVJdGVtIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIGxldCB0cmFjayA9IG9wdGlvbnNbJ3RyYWNrJ107XG4gICAgbGV0IGN1ZSA9IG9wdGlvbnNbJ2N1ZSddO1xuICAgIGxldCBjdXJyZW50VGltZSA9IHBsYXllci5jdXJyZW50VGltZSgpO1xuXG4gICAgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG4gICAgb3B0aW9uc1snbGFiZWwnXSA9IGN1ZS50ZXh0O1xuICAgIG9wdGlvbnNbJ3NlbGVjdGVkJ10gPSAoY3VlWydzdGFydFRpbWUnXSA8PSBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8IGN1ZVsnZW5kVGltZSddKTtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy50cmFjayA9IHRyYWNrO1xuICAgIHRoaXMuY3VlID0gY3VlO1xuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlKSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICBzdXBlci5oYW5kbGVDbGljaygpO1xuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLmN1ZS5zdGFydFRpbWUpO1xuICAgIHRoaXMudXBkYXRlKHRoaXMuY3VlLnN0YXJ0VGltZSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgbGV0IGN1ZSA9IHRoaXMuY3VlO1xuICAgIGxldCBjdXJyZW50VGltZSA9IHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO1xuXG4gICAgLy8gdmpzLmxvZyhjdXJyZW50VGltZSwgY3VlLnN0YXJ0VGltZSk7XG4gICAgdGhpcy5zZWxlY3RlZChjdWVbJ3N0YXJ0VGltZSddIDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgY3VlWydlbmRUaW1lJ10pO1xuICB9XG5cbn1cblxuTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzVHJhY2tNZW51SXRlbScsIENoYXB0ZXJzVHJhY2tNZW51SXRlbSk7XG5leHBvcnQgZGVmYXVsdCBDaGFwdGVyc1RyYWNrTWVudUl0ZW07XG4iLCJpbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsIG1lbnUgaXRlbSBmb3IgdHVybmluZyBvZiBhIHNwZWNpZmljIHR5cGUgb2YgdGV4dCB0cmFja1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBPZmZUZXh0VHJhY2tNZW51SXRlbSBleHRlbmRzIFRleHRUcmFja01lbnVJdGVtIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIC8vIENyZWF0ZSBwc2V1ZG8gdHJhY2sgaW5mb1xuICAgIC8vIFJlcXVpcmVzIG9wdGlvbnNbJ2tpbmQnXVxuICAgIG9wdGlvbnNbJ3RyYWNrJ10gPSB7XG4gICAgICAna2luZCc6IG9wdGlvbnNbJ2tpbmQnXSxcbiAgICAgICdwbGF5ZXInOiBwbGF5ZXIsXG4gICAgICAnbGFiZWwnOiBvcHRpb25zWydraW5kJ10gKyAnIG9mZicsXG4gICAgICAnZGVmYXVsdCc6IGZhbHNlLFxuICAgICAgJ21vZGUnOiAnZGlzYWJsZWQnXG4gICAgfTtcblxuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG4gICAgdGhpcy5zZWxlY3RlZCh0cnVlKTtcbiAgfVxuXG4gIGhhbmRsZVRyYWNrc0NoYW5nZShldmVudCl7XG4gICAgbGV0IHRyYWNrcyA9IHRoaXMucGxheWVyKCkudGV4dFRyYWNrcygpO1xuICAgIGxldCBzZWxlY3RlZCA9IHRydWU7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLnRyYWNrWydraW5kJ10gJiYgdHJhY2tbJ21vZGUnXSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2VsZWN0ZWQoc2VsZWN0ZWQpO1xuICB9XG5cbn1cblxuVGV4dFRyYWNrTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ09mZlRleHRUcmFja01lbnVJdGVtJywgT2ZmVGV4dFRyYWNrTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgT2ZmVGV4dFRyYWNrTWVudUl0ZW07IiwiaW1wb3J0IFRleHRUcmFja0J1dHRvbiBmcm9tICcuL3RleHQtdHJhY2stYnV0dG9uLmpzJztcblxuLyoqXG4gKiBUaGUgYnV0dG9uIGNvbXBvbmVudCBmb3IgdG9nZ2xpbmcgYW5kIHNlbGVjdGluZyBzdWJ0aXRsZXNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgU3VidGl0bGVzQnV0dG9uIGV4dGVuZHMgVGV4dFRyYWNrQnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KTtcbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCdTdWJ0aXRsZXMgTWVudScpO1xuICB9XG5cbn1cblxuU3VidGl0bGVzQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdzdWJ0aXRsZXMnO1xuU3VidGl0bGVzQnV0dG9uLnByb3RvdHlwZS5idXR0b25UZXh0ID0gJ1N1YnRpdGxlcyc7XG5TdWJ0aXRsZXNCdXR0b24ucHJvdG90eXBlLmNsYXNzTmFtZSA9ICd2anMtc3VidGl0bGVzLWJ1dHRvbic7XG5cblRleHRUcmFja0J1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnU3VidGl0bGVzQnV0dG9uJywgU3VidGl0bGVzQnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IFN1YnRpdGxlc0J1dHRvbjsiLCJpbXBvcnQgTWVudUJ1dHRvbiBmcm9tICcuLi8uLi9tZW51L21lbnUtYnV0dG9uLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG5pbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5pbXBvcnQgT2ZmVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi9vZmYtdGV4dC10cmFjay1tZW51LWl0ZW0uanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBidXR0b25zIHRoYXQgdG9nZ2xlIHNwZWNpZmljIHRleHQgdHJhY2sgdHlwZXMgKGUuZy4gc3VidGl0bGVzKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUZXh0VHJhY2tCdXR0b24gZXh0ZW5kcyBNZW51QnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA8PSAxKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB1cGRhdGVIYW5kbGVyID0gTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGUpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuXG4gICAgdGhpcy5wbGF5ZXJfLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB1cGRhdGVIYW5kbGVyKTtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgbWVudSBpdGVtIGZvciBlYWNoIHRleHQgdHJhY2tcbiAgY3JlYXRlSXRlbXMoaXRlbXM9W10pIHtcbiAgICAvLyBBZGQgYW4gT0ZGIG1lbnUgaXRlbSB0byB0dXJuIGFsbCB0cmFja3Mgb2ZmXG4gICAgaXRlbXMucHVzaChuZXcgT2ZmVGV4dFRyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7ICdraW5kJzogdGhpcy5raW5kXyB9KSk7XG5cbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIGlmICghdHJhY2tzKSB7XG4gICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcblxuICAgICAgLy8gb25seSBhZGQgdHJhY2tzIHRoYXQgYXJlIG9mIHRoZSBhcHByb3ByaWF0ZSBraW5kIGFuZCBoYXZlIGEgbGFiZWxcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLmtpbmRfKSB7XG4gICAgICAgIGl0ZW1zLnB1c2gobmV3IFRleHRUcmFja01lbnVJdGVtKHRoaXMucGxheWVyXywge1xuICAgICAgICAgICd0cmFjayc6IHRyYWNrXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cblxufVxuXG5NZW51QnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdUZXh0VHJhY2tCdXR0b24nLCBUZXh0VHJhY2tCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrQnV0dG9uO1xuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4uLy4uL21lbnUvbWVudS1pdGVtLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qKlxuICogVGhlIHNwZWNpZmljIG1lbnUgaXRlbSB0eXBlIGZvciBzZWxlY3RpbmcgYSBsYW5ndWFnZSB3aXRoaW4gYSB0ZXh0IHRyYWNrIGtpbmRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgVGV4dFRyYWNrTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbSB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBsZXQgdHJhY2sgPSBvcHRpb25zWyd0cmFjayddO1xuICAgIGxldCB0cmFja3MgPSBwbGF5ZXIudGV4dFRyYWNrcygpO1xuXG4gICAgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG4gICAgb3B0aW9uc1snbGFiZWwnXSA9IHRyYWNrWydsYWJlbCddIHx8IHRyYWNrWydsYW5ndWFnZSddIHx8ICdVbmtub3duJztcbiAgICBvcHRpb25zWydzZWxlY3RlZCddID0gdHJhY2tbJ2RlZmF1bHQnXSB8fCB0cmFja1snbW9kZSddID09PSAnc2hvd2luZyc7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMudHJhY2sgPSB0cmFjaztcblxuICAgIGlmICh0cmFja3MpIHtcbiAgICAgIGxldCBjaGFuZ2VIYW5kbGVyID0gTGliLmJpbmQodGhpcywgdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UpO1xuXG4gICAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgICB0aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGlPUzcgZG9lc24ndCBkaXNwYXRjaCBjaGFuZ2UgZXZlbnRzIHRvIFRleHRUcmFja0xpc3RzIHdoZW4gYW5cbiAgICAvLyBhc3NvY2lhdGVkIHRyYWNrJ3MgbW9kZSBjaGFuZ2VzLiBXaXRob3V0IHNvbWV0aGluZyBsaWtlXG4gICAgLy8gT2JqZWN0Lm9ic2VydmUoKSAoYWxzbyBub3QgcHJlc2VudCBvbiBpT1M3KSwgaXQncyBub3RcbiAgICAvLyBwb3NzaWJsZSB0byBkZXRlY3QgY2hhbmdlcyB0byB0aGUgbW9kZSBhdHRyaWJ1dGUgYW5kIHBvbHlmaWxsXG4gICAgLy8gdGhlIGNoYW5nZSBldmVudC4gQXMgYSBwb29yIHN1YnN0aXR1dGUsIHdlIG1hbnVhbGx5IGRpc3BhdGNoXG4gICAgLy8gY2hhbmdlIGV2ZW50cyB3aGVuZXZlciB0aGUgY29udHJvbHMgbW9kaWZ5IHRoZSBtb2RlLlxuICAgIGlmICh0cmFja3MgJiYgdHJhY2tzLm9uY2hhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBldmVudDtcblxuICAgICAgdGhpcy5vbihbJ3RhcCcsICdjbGljayddLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuRXZlbnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gQW5kcm9pZCAyLjMgdGhyb3dzIGFuIElsbGVnYWwgQ29uc3RydWN0b3IgZXJyb3IgZm9yIHdpbmRvdy5FdmVudFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBldmVudCA9IG5ldyB3aW5kb3cuRXZlbnQoJ2NoYW5nZScpO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKXt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBsZXQga2luZCA9IHRoaXMudHJhY2tbJ2tpbmQnXTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIHN1cGVyLmhhbmRsZUNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghdHJhY2tzKSByZXR1cm47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHRyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAodHJhY2tbJ2tpbmQnXSAhPT0ga2luZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYWNrID09PSB0aGlzLnRyYWNrKSB7XG4gICAgICAgIHRyYWNrWydtb2RlJ10gPSAnc2hvd2luZyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja1snbW9kZSddID0gJ2Rpc2FibGVkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVUcmFja3NDaGFuZ2UoZXZlbnQpe1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy50cmFja1snbW9kZSddID09PSAnc2hvd2luZycpO1xuICB9XG5cbn1cblxuTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja01lbnVJdGVtJywgVGV4dFRyYWNrTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrTWVudUl0ZW07XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgY3VycmVudCB0aW1lXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ3VycmVudFRpbWVEaXNwbGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ3RpbWV1cGRhdGUnLCB0aGlzLnVwZGF0ZUNvbnRlbnQpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGVsID0gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jdXJyZW50LXRpbWUgdmpzLXRpbWUtY29udHJvbCB2anMtY29udHJvbCdcbiAgICB9KTtcblxuICAgIHRoaXMuY29udGVudEVsXyA9IExpYi5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWN1cnJlbnQtdGltZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPkN1cnJlbnQgVGltZSA8L3NwYW4+JyArICcwOjAwJywgLy8gbGFiZWwgdGhlIGN1cnJlbnQgdGltZSBmb3Igc2NyZWVuIHJlYWRlciB1c2Vyc1xuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnIC8vIHRlbGwgc2NyZWVuIHJlYWRlcnMgbm90IHRvIGF1dG9tYXRpY2FsbHkgcmVhZCB0aGUgdGltZSBhcyBpdCBjaGFuZ2VzXG4gICAgfSk7XG5cbiAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pO1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIHVwZGF0ZUNvbnRlbnQoKSB7XG4gICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgIGxldCB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICBsZXQgbG9jYWxpemVkVGV4dCA9IHRoaXMubG9jYWxpemUoJ0N1cnJlbnQgVGltZScpO1xuICAgIGxldCBmb3JtYXR0ZWRUaW1lID0gTGliLmZvcm1hdFRpbWUodGltZSwgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO1xuICAgIHRoaXMuY29udGVudEVsXy5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHtsb2NhbGl6ZWRUZXh0fTwvc3Bhbj4gJHtmb3JtYXR0ZWRUaW1lfWA7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0N1cnJlbnRUaW1lRGlzcGxheScsIEN1cnJlbnRUaW1lRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBDdXJyZW50VGltZURpc3BsYXk7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgZHVyYXRpb25cbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBEdXJhdGlvbkRpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIC8vIHRoaXMgbWlnaHQgbmVlZCB0byBiZSBjaGFuZ2VkIHRvICdkdXJhdGlvbmNoYW5nZScgaW5zdGVhZCBvZiAndGltZXVwZGF0ZScgZXZlbnR1YWxseSxcbiAgICAvLyBob3dldmVyIHRoZSBkdXJhdGlvbmNoYW5nZSBldmVudCBmaXJlcyBiZWZvcmUgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgaXMgc2V0LFxuICAgIC8vIHNvIHRoZSB2YWx1ZSBjYW5ub3QgYmUgd3JpdHRlbiBvdXQgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAgLy8gT25jZSB0aGUgb3JkZXIgb2YgZHVyYXRpb25jaGFuZ2UgYW5kIHRoaXMucGxheWVyXy5kdXJhdGlvbigpIGJlaW5nIHNldCBpcyBmaWd1cmVkIG91dCxcbiAgICAvLyB0aGlzIGNhbiBiZSB1cGRhdGVkLlxuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWR1cmF0aW9uIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1kdXJhdGlvbi1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnRHVyYXRpb24gVGltZScpfTwvc3Bhbj4gMDowMGAsIC8vIGxhYmVsIHRoZSBkdXJhdGlvbiB0aW1lIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzXG4gICAgICAnYXJpYS1saXZlJzogJ29mZicgLy8gdGVsbCBzY3JlZW4gcmVhZGVycyBub3QgdG8gYXV0b21hdGljYWxseSByZWFkIHRoZSB0aW1lIGFzIGl0IGNoYW5nZXNcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgdXBkYXRlQ29udGVudCgpIHtcbiAgICBsZXQgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgIGxldCBsb2NhbGl6ZWRUZXh0ID0gdGhpcy5sb2NhbGl6ZSgnRHVyYXRpb24gVGltZScpO1xuICAgICAgbGV0IGZvcm1hdHRlZFRpbWUgPSBMaWIuZm9ybWF0VGltZShkdXJhdGlvbik7XG4gICAgICB0aGlzLmNvbnRlbnRFbF8uaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7bG9jYWxpemVkVGV4dH08L3NwYW4+ICR7Zm9ybWF0dGVkVGltZX1gOyAvLyBsYWJlbCB0aGUgZHVyYXRpb24gdGltZSBmb3Igc2NyZWVuIHJlYWRlciB1c2Vyc1xuICAgIH1cbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnRHVyYXRpb25EaXNwbGF5JywgRHVyYXRpb25EaXNwbGF5KTtcbmV4cG9ydCBkZWZhdWx0IER1cmF0aW9uRGlzcGxheTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWInO1xuXG4vKipcbiAqIERpc3BsYXlzIHRoZSB0aW1lIGxlZnQgaW4gdGhlIHZpZGVvXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgUmVtYWluaW5nVGltZURpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXJlbWFpbmluZy10aW1lIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1yZW1haW5pbmctdGltZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnUmVtYWluaW5nIFRpbWUnKX08L3NwYW4+IC0wOjAwYCwgLy8gbGFiZWwgdGhlIHJlbWFpbmluZyB0aW1lIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzXG4gICAgICAnYXJpYS1saXZlJzogJ29mZicgLy8gdGVsbCBzY3JlZW4gcmVhZGVycyBub3QgdG8gYXV0b21hdGljYWxseSByZWFkIHRoZSB0aW1lIGFzIGl0IGNoYW5nZXNcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgdXBkYXRlQ29udGVudCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IGxvY2FsaXplZFRleHQgPSB0aGlzLmxvY2FsaXplKCdSZW1haW5pbmcgVGltZScpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IExpYi5mb3JtYXRUaW1lKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lKCkpO1xuICAgICAgdGhpcy5jb250ZW50RWxfLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4ke2xvY2FsaXplZFRleHR9PC9zcGFuPiAtJHtmb3JtYXR0ZWRUaW1lfWA7XG4gICAgfVxuXG4gICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgIC8vIHZhciB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICAvLyB0aGlzLmNvbnRlbnRFbF8uaW5uZXJIVE1MID0gdmpzLmZvcm1hdFRpbWUodGltZSwgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO1xuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdSZW1haW5pbmdUaW1lRGlzcGxheScsIFJlbWFpbmluZ1RpbWVEaXNwbGF5KTtcbmV4cG9ydCBkZWZhdWx0IFJlbWFpbmluZ1RpbWVEaXNwbGF5O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuXG4vKipcbiAqIFRoZSBzZXBhcmF0b3IgYmV0d2VlbiB0aGUgY3VycmVudCB0aW1lIGFuZCBkdXJhdGlvblxuICpcbiAqIENhbiBiZSBoaWRkZW4gaWYgaXQncyBub3QgbmVlZGVkIGluIHRoZSBkZXNpZ24uXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFRpbWVEaXZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10aW1lLWNvbnRyb2wgdmpzLXRpbWUtZGl2aWRlcicsXG4gICAgICBpbm5lckhUTUw6ICc8ZGl2PjxzcGFuPi88L3NwYW4+PC9kaXY+J1xuICAgIH0pO1xuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUaW1lRGl2aWRlcicsIFRpbWVEaXZpZGVyKTtcbmV4cG9ydCBkZWZhdWx0IFRpbWVEaXZpZGVyO1xuIiwiaW1wb3J0IFNsaWRlciBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vLyBSZXF1aXJlZCBjaGlsZHJlblxuaW1wb3J0IFZvbHVtZUhhbmRsZSBmcm9tICcuL3ZvbHVtZS1oYW5kbGUuanMnO1xuaW1wb3J0IFZvbHVtZUxldmVsIGZyb20gJy4vdm9sdW1lLWxldmVsLmpzJztcblxuLyoqXG4gKiBUaGUgYmFyIHRoYXQgY29udGFpbnMgdGhlIHZvbHVtZSBsZXZlbCBhbmQgY2FuIGJlIGNsaWNrZWQgb24gdG8gYWRqdXN0IHRoZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVCYXIgZXh0ZW5kcyBTbGlkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3ZvbHVtZWNoYW5nZScsIHRoaXMudXBkYXRlQVJJQUF0dHJpYnV0ZXMpO1xuICAgIHBsYXllci5yZWFkeShMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy12b2x1bWUtYmFyJyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ3ZvbHVtZSBsZXZlbCdcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8ubXV0ZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLm11dGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoZXZlbnQpKTtcbiAgfVxuXG4gIGdldFBlcmNlbnQoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5tdXRlZCgpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyXy52b2x1bWUoKTtcbiAgICB9XG4gIH1cblxuICBzdGVwRm9yd2FyZCgpIHtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSArIDAuMSk7XG4gIH1cblxuICBzdGVwQmFjaygpIHtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSAtIDAuMSk7XG4gIH1cblxuICB1cGRhdGVBUklBQXR0cmlidXRlcygpIHtcbiAgICAvLyBDdXJyZW50IHZhbHVlIG9mIHZvbHVtZSBiYXIgYXMgYSBwZXJjZW50YWdlXG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgTGliLnJvdW5kKHRoaXMucGxheWVyXy52b2x1bWUoKSoxMDAsIDIpKTtcbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWV0ZXh0JywgTGliLnJvdW5kKHRoaXMucGxheWVyXy52b2x1bWUoKSoxMDAsIDIpKyclJyk7XG4gIH1cblxufVxuXG5Wb2x1bWVCYXIucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICBjaGlsZHJlbjoge1xuICAgICd2b2x1bWVMZXZlbCc6IHt9LFxuICAgICd2b2x1bWVIYW5kbGUnOiB7fVxuICB9LFxuICAnYmFyTmFtZSc6ICd2b2x1bWVMZXZlbCcsXG4gICdoYW5kbGVOYW1lJzogJ3ZvbHVtZUhhbmRsZSdcbn07XG5cblZvbHVtZUJhci5wcm90b3R5cGUucGxheWVyRXZlbnQgPSAndm9sdW1lY2hhbmdlJztcblxuU2xpZGVyLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVCYXInLCBWb2x1bWVCYXIpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lQmFyO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8vIFJlcXVpcmVkIGNoaWxkcmVuXG5pbXBvcnQgVm9sdW1lQmFyIGZyb20gJy4vdm9sdW1lLWJhci5qcyc7XG5cbi8qKlxuICogVGhlIGNvbXBvbmVudCBmb3IgY29udHJvbGxpbmcgdGhlIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICAvLyBoaWRlIHZvbHVtZSBjb250cm9scyB3aGVuIHRoZXkncmUgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCB0ZWNoXG4gICAgaWYgKHBsYXllci50ZWNoICYmIHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9XG4gICAgdGhpcy5vbihwbGF5ZXIsICdsb2Fkc3RhcnQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYgKHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhpZGRlbicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG4gIH1cblxufVxuXG5Wb2x1bWVDb250cm9sLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgY2hpbGRyZW46IHtcbiAgICAndm9sdW1lQmFyJzoge31cbiAgfVxufTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVDb250cm9sJywgVm9sdW1lQ29udHJvbCk7XG5leHBvcnQgZGVmYXVsdCBWb2x1bWVDb250cm9sO1xuIiwiaW1wb3J0IFNsaWRlckhhbmRsZSBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLWhhbmRsZS5qcyc7XG5cbi8qKlxuICogVGhlIHZvbHVtZSBoYW5kbGUgY2FuIGJlIGRyYWdnZWQgdG8gYWRqdXN0IHRoZSB2b2x1bWUgbGV2ZWxcbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgVm9sdW1lSGFuZGxlIGV4dGVuZHMgU2xpZGVySGFuZGxlIHtcblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWhhbmRsZSdcbiAgICB9KTtcbiAgfVxuXG59XG5cblZvbHVtZUhhbmRsZS5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gJzAwOjAwJztcblxuU2xpZGVySGFuZGxlLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVIYW5kbGUnLCBWb2x1bWVIYW5kbGUpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lSGFuZGxlO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuXG4vKipcbiAqIFNob3dzIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVMZXZlbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWxldmVsJyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPjwvc3Bhbj4nXG4gICAgfSk7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1ZvbHVtZUxldmVsJywgVm9sdW1lTGV2ZWwpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lTGV2ZWw7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbi5qcyc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9tZW51L21lbnUuanMnO1xuaW1wb3J0IE1lbnVCdXR0b24gZnJvbSAnLi4vbWVudS9tZW51LWJ1dHRvbi5qcyc7XG5pbXBvcnQgTXV0ZVRvZ2dsZSBmcm9tICcuL211dGUtdG9nZ2xlLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuaW1wb3J0IFZvbHVtZUJhciBmcm9tICcuL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1iYXIuanMnO1xuXG4vKipcbiAqIE1lbnUgYnV0dG9uIHdpdGggYSBwb3B1cCBmb3Igc2hvd2luZyB0aGUgdm9sdW1lIHNsaWRlci5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVNZW51QnV0dG9uIGV4dGVuZHMgTWVudUJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgLy8gU2FtZSBsaXN0ZW5lcnMgYXMgTXV0ZVRvZ2dsZVxuICAgIHRoaXMub24ocGxheWVyLCAndm9sdW1lY2hhbmdlJywgdGhpcy52b2x1bWVVcGRhdGUpO1xuXG4gICAgLy8gaGlkZSBtdXRlIHRvZ2dsZSBpZiB0aGUgY3VycmVudCB0ZWNoIGRvZXNuJ3Qgc3VwcG9ydCB2b2x1bWUgY29udHJvbFxuICAgIGlmIChwbGF5ZXIudGVjaCAmJiBwbGF5ZXIudGVjaFsnZmVhdHVyZXNWb2x1bWVDb250cm9sJ10gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfVxuICAgIHRoaXMub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgZnVuY3Rpb24oKXtcbiAgICAgIGlmIChwbGF5ZXIudGVjaFsnZmVhdHVyZXNWb2x1bWVDb250cm9sJ10gPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtbWVudS1idXR0b24nKTtcbiAgfVxuXG4gIGNyZWF0ZU1lbnUoKSB7XG4gICAgbGV0IG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcl8sIHtcbiAgICAgIGNvbnRlbnRFbFR5cGU6ICdkaXYnXG4gICAgfSk7XG5cbiAgICAvLyBUaGUgdm9sdW1lQmFyIGlzIHZlcnRpY2FsIGJ5IGRlZmF1bHQgaW4gdGhlIGJhc2UgdGhlbWUgd2hlbiB1c2VkIHdpdGggYSBWb2x1bWVNZW51QnV0dG9uXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNfWyd2b2x1bWVCYXInXSB8fCB7fTtcbiAgICBvcHRpb25zWyd2ZXJ0aWNhbCddID0gb3B0aW9uc1sndmVydGljYWwnXSB8fCB0cnVlO1xuXG4gICAgbGV0IHZjID0gbmV3IFZvbHVtZUJhcih0aGlzLnBsYXllcl8sIG9wdGlvbnMpO1xuXG4gICAgdmMub24oJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XG4gICAgICBtZW51LmxvY2tTaG93aW5nKCk7XG4gICAgfSk7XG4gICAgdmMub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgIG1lbnUudW5sb2NrU2hvd2luZygpO1xuICAgIH0pO1xuICAgIG1lbnUuYWRkQ2hpbGQodmMpO1xuICAgIHJldHVybiBtZW51O1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgTXV0ZVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzKTtcbiAgICBzdXBlci5oYW5kbGVDbGljaygpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLW1lbnUtYnV0dG9uIHZqcy1tZW51LWJ1dHRvbiB2anMtY29udHJvbCB2anMtYnV0dG9uJyxcbiAgICAgIGlubmVySFRNTDogYDxkaXY+PHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHt0aGlzLmxvY2FsaXplKCdNdXRlJyl9PC9zcGFuPjwvZGl2PmBcbiAgICB9KTtcbiAgfVxuXG59XG5cblZvbHVtZU1lbnVCdXR0b24ucHJvdG90eXBlLnZvbHVtZVVwZGF0ZSA9IE11dGVUb2dnbGUucHJvdG90eXBlLnVwZGF0ZTtcblxuQnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVNZW51QnV0dG9uJywgVm9sdW1lTWVudUJ1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBWb2x1bWVNZW51QnV0dG9uO1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBDb3JlIE9iamVjdC9DbGFzcyBmb3Igb2JqZWN0cyB0aGF0IHVzZSBpbmhlcml0YW5jZSArIGNvbnN0cnVjdG9yc1xuICpcbiAqIFRvIGNyZWF0ZSBhIGNsYXNzIHRoYXQgY2FuIGJlIHN1YmNsYXNzZWQgaXRzZWxmLCBleHRlbmQgdGhlIENvcmVPYmplY3QgY2xhc3MuXG4gKlxuICogICAgIHZhciBBbmltYWwgPSBDb3JlT2JqZWN0LmV4dGVuZCgpO1xuICogICAgIHZhciBIb3JzZSA9IEFuaW1hbC5leHRlbmQoKTtcbiAqXG4gKiBUaGUgY29uc3RydWN0b3IgY2FuIGJlIGRlZmluZWQgdGhyb3VnaCB0aGUgaW5pdCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QgYXJndW1lbnQuXG4gKlxuICogICAgIHZhciBBbmltYWwgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gKiAgICAgICBpbml0OiBmdW5jdGlvbihuYW1lLCBzb3VuZCl7XG4gKiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogT3RoZXIgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBjYW4gYmUgYWRkZWQgdGhlIHNhbWUgd2F5LCBvciBkaXJlY3RseSB0byB0aGVcbiAqIHByb3RvdHlwZS5cbiAqXG4gKiAgICB2YXIgQW5pbWFsID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICogICAgICAgaW5pdDogZnVuY3Rpb24obmFtZSl7XG4gKiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gKiAgICAgICB9LFxuICogICAgICAgZ2V0TmFtZTogZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAqICAgICAgIH0sXG4gKiAgICAgICBzb3VuZDogJy4uLidcbiAqICAgIH0pO1xuICpcbiAqICAgIEFuaW1hbC5wcm90b3R5cGUubWFrZVNvdW5kID0gZnVuY3Rpb24oKXtcbiAqICAgICAgYWxlcnQodGhpcy5zb3VuZCk7XG4gKiAgICB9O1xuICpcbiAqIFRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhIGNsYXNzLCB1c2UgdGhlIGNyZWF0ZSBtZXRob2QuXG4gKlxuICogICAgdmFyIGZsdWZmeSA9IEFuaW1hbC5jcmVhdGUoJ0ZsdWZmeScpO1xuICogICAgZmx1ZmZ5LmdldE5hbWUoKTsgLy8gLT4gRmx1ZmZ5XG4gKlxuICogTWV0aG9kcyBhbmQgcHJvcGVydGllcyBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBzdWJjbGFzc2VzLlxuICpcbiAqICAgICB2YXIgSG9yc2UgPSBBbmltYWwuZXh0ZW5kKHtcbiAqICAgICAgIHNvdW5kOiAnTmVpZ2hoaGhoISdcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgdmFyIGhvcnNleSA9IEhvcnNlLmNyZWF0ZSgnSG9yc2V5Jyk7XG4gKiAgICAgaG9yc2V5LmdldE5hbWUoKTsgLy8gLT4gSG9yc2V5XG4gKiAgICAgaG9yc2V5Lm1ha2VTb3VuZCgpOyAvLyAtPiBBbGVydDogTmVpZ2hoaGhoIVxuICpcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBDb3JlT2JqZWN0ID0gZnVuY3Rpb24oKXt9O1xuLy8gTWFudWFsbHkgZXhwb3J0aW5nIHZqc1snQ29yZU9iamVjdCddIGhlcmUgZm9yIENsb3N1cmUgQ29tcGlsZXJcbi8vIGJlY2F1c2Ugb2YgdGhlIHVzZSBvZiB0aGUgZXh0ZW5kL2NyZWF0ZSBjbGFzcyBtZXRob2RzXG4vLyBJZiB3ZSBkaWRuJ3QgZG8gdGhpcywgdGhvc2UgZnVuY3Rpb25zIHdvdWxkIGdldCBmbGF0dGVuZWQgdG8gc29tZXRoaW5nIGxpa2Vcbi8vIGBhID0gLi4uYCBhbmQgYHRoaXMucHJvdG90eXBlYCB3b3VsZCByZWZlciB0byB0aGUgZ2xvYmFsIG9iamVjdCBpbnN0ZWFkIG9mXG4vLyBDb3JlT2JqZWN0XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBPYmplY3RcbiAqXG4gKiAgICAgdmFyIEFuaW1hbCA9IENvcmVPYmplY3QuZXh0ZW5kKCk7XG4gKiAgICAgdmFyIEhvcnNlID0gQW5pbWFsLmV4dGVuZCgpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBGdW5jdGlvbnMgYW5kIHByb3BlcnRpZXMgdG8gYmUgYXBwbGllZCB0byB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2JqZWN0J3MgcHJvdG90eXBlXG4gKiBAcmV0dXJuIHtDb3JlT2JqZWN0fSBBbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIENvcmVPYmplY3RcbiAqIEB0aGlzIHsqfVxuICovXG5Db3JlT2JqZWN0LmV4dGVuZCA9IGZ1bmN0aW9uKHByb3BzPXt9KXtcbiAgLy8gU2V0IHVwIHRoZSBjb25zdHJ1Y3RvciB1c2luZyB0aGUgc3VwcGxpZWQgaW5pdCBtZXRob2RcbiAgLy8gb3IgdXNpbmcgdGhlIGluaXQgb2YgdGhlIHBhcmVudCBvYmplY3RcbiAgLy8gTWFrZSBzdXJlIHRvIGNoZWNrIHRoZSB1bm9iZnVzY2F0ZWQgdmVyc2lvbiBmb3IgZXh0ZXJuYWwgbGlic1xuICBsZXQgaW5pdCA9IHByb3BzWydpbml0J10gfHwgcHJvcHMuaW5pdCB8fCB0aGlzLnByb3RvdHlwZVsnaW5pdCddIHx8IHRoaXMucHJvdG90eXBlLmluaXQgfHwgZnVuY3Rpb24oKXt9O1xuICAvLyBJbiBSZXNpZydzIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZSAocHJldmlvdXNseSB1c2VkKSB0aGUgY29uc3RydWN0b3JcbiAgLy8gIGlzIGEgZnVuY3Rpb24gdGhhdCBjYWxscyBgdGhpcy5pbml0LmFwcGx5KGFyZ3VtZW50cylgXG4gIC8vIEhvd2V2ZXIgdGhhdCB3b3VsZCBwcmV2ZW50IHVzIGZyb20gdXNpbmcgYFBhcmVudE9iamVjdC5jYWxsKHRoaXMpO2BcbiAgLy8gIGluIGEgQ2hpbGQgY29uc3RydWN0b3IgYmVjYXVzZSB0aGUgYHRoaXNgIGluIGB0aGlzLmluaXRgXG4gIC8vICB3b3VsZCBzdGlsbCByZWZlciB0byB0aGUgQ2hpbGQgYW5kIGNhdXNlIGFuIGluZmluaXRlIGxvb3AuXG4gIC8vIFdlIHdvdWxkIGluc3RlYWQgaGF2ZSB0byBkb1xuICAvLyAgICBgUGFyZW50T2JqZWN0LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7YFxuICAvLyAgQmxlaC4gV2UncmUgbm90IGNyZWF0aW5nIGEgX3N1cGVyKCkgZnVuY3Rpb24sIHNvIGl0J3MgZ29vZCB0byBrZWVwXG4gIC8vICB0aGUgcGFyZW50IGNvbnN0cnVjdG9yIHJlZmVyZW5jZSBzaW1wbGUuXG4gIGxldCBzdWJPYmogPSBmdW5jdGlvbigpe1xuICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBJbmhlcml0IGZyb20gdGhpcyBvYmplY3QncyBwcm90b3R5cGVcbiAgc3ViT2JqLnByb3RvdHlwZSA9IExpYi5vYmouY3JlYXRlKHRoaXMucHJvdG90eXBlKTtcbiAgLy8gUmVzZXQgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5IGZvciBzdWJPYmogb3RoZXJ3aXNlXG4gIC8vIGluc3RhbmNlcyBvZiBzdWJPYmogd291bGQgaGF2ZSB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHBhcmVudCBPYmplY3RcbiAgc3ViT2JqLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1Yk9iajtcblxuICAvLyBNYWtlIHRoZSBjbGFzcyBleHRlbmRhYmxlXG4gIHN1Yk9iai5leHRlbmQgPSBDb3JlT2JqZWN0LmV4dGVuZDtcbiAgLy8gTWFrZSBhIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBpbnN0YW5jZXNcbiAgc3ViT2JqLmNyZWF0ZSA9IENvcmVPYmplY3QuY3JlYXRlO1xuXG4gIC8vIEV4dGVuZCBzdWJPYmoncyBwcm90b3R5cGUgd2l0aCBmdW5jdGlvbnMgYW5kIG90aGVyIHByb3BlcnRpZXMgZnJvbSBwcm9wc1xuICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJPYmoucHJvdG90eXBlW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1Yk9iajtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgT2JqZWN0IGNsYXNzXG4gKlxuICogICAgIHZhciBteUFuaW1hbCA9IEFuaW1hbC5jcmVhdGUoKTtcbiAqXG4gKiBAcmV0dXJuIHtDb3JlT2JqZWN0fSBBbiBpbnN0YW5jZSBvZiBhIENvcmVPYmplY3Qgc3ViY2xhc3NcbiAqIEB0aGlzIHsqfVxuICovXG5Db3JlT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uKCl7XG4gIC8vIENyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoaXMgb2JqZWN0J3MgcHJvdG90eXBlXG4gIHZhciBpbnN0ID0gTGliLm9iai5jcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuXG4gIC8vIEFwcGx5IHRoaXMgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gdGhlIG5ldyBvYmplY3RcbiAgdGhpcy5hcHBseShpbnN0LCBhcmd1bWVudHMpO1xuXG4gIC8vIFJldHVybiB0aGUgbmV3IG9iamVjdFxuICByZXR1cm4gaW5zdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvcmVPYmplY3Q7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWFpbiBmdW5jdGlvbiBzcmMuXG4gKi9cblxuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgUGx1Z2lucyBmcm9tICcuL3BsdWdpbnMnO1xuaW1wb3J0IE9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgKiBhcyBWanNVdGlsIGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgQ29yZU9iamVjdCBmcm9tICcuL2NvcmUtb2JqZWN0JztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKipcbiAqIERvdWJsZXMgYXMgdGhlIG1haW4gZnVuY3Rpb24gZm9yIHVzZXJzIHRvIGNyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSBhbmQgYWxzb1xuICogdGhlIG1haW4gbGlicmFyeSBvYmplY3QuXG4gKlxuICogKipBTElBU0VTKiogdmlkZW9qcywgX1ZfIChkZXByZWNhdGVkKVxuICpcbiAqIFRoZSBgdmpzYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBpbml0aWFsaXplIG9yIHJldHJpZXZlIGEgcGxheWVyLlxuICpcbiAqICAgICB2YXIgbXlQbGF5ZXIgPSB2anMoJ215X3ZpZGVvX2lkJyk7XG4gKlxuICogQHBhcmFtICB7U3RyaW5nfEVsZW1lbnR9IGlkICAgICAgVmlkZW8gZWxlbWVudCBvciB2aWRlbyBlbGVtZW50IElEXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zICAgICAgICBPcHRpb25hbCBvcHRpb25zIG9iamVjdCBmb3IgY29uZmlnL3NldHRpbmdzXG4gKiBAcGFyYW0gIHtGdW5jdGlvbj19IHJlYWR5ICAgICAgICBPcHRpb25hbCByZWFkeSBjYWxsYmFja1xuICogQHJldHVybiB7UGxheWVyfSAgICAgICAgICAgICBBIHBsYXllciBpbnN0YW5jZVxuICogQG5hbWVzcGFjZVxuICovXG52YXIgdmlkZW9qcyA9IGZ1bmN0aW9uKGlkLCBvcHRpb25zLCByZWFkeSl7XG4gIHZhciB0YWc7IC8vIEVsZW1lbnQgb2YgSURcblxuICAvLyBBbGxvdyBmb3IgZWxlbWVudCBvciBJRCB0byBiZSBwYXNzZWQgaW5cbiAgLy8gU3RyaW5nIElEXG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG5cbiAgICAvLyBBZGp1c3QgZm9yIGpRdWVyeSBJRCBzeW50YXhcbiAgICBpZiAoaWQuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgICBpZCA9IGlkLnNsaWNlKDEpO1xuICAgIH1cblxuICAgIC8vIElmIGEgcGxheWVyIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCBmb3IgdGhpcyBJRCByZXR1cm4gaXQuXG4gICAgaWYgKFBsYXllci5wbGF5ZXJzW2lkXSkge1xuXG4gICAgICAvLyBJZiBvcHRpb25zIG9yIHJlYWR5IGZ1bnRpb24gYXJlIHBhc3NlZCwgd2FyblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgTGliLmxvZy53YXJuKGBQbGF5ZXIgXCIke2lkfVwiIGlzIGFscmVhZHkgaW5pdGlhbGlzZWQuIE9wdGlvbnMgd2lsbCBub3QgYmUgYXBwbGllZC5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgIFBsYXllci5wbGF5ZXJzW2lkXS5yZWFkeShyZWFkeSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQbGF5ZXIucGxheWVyc1tpZF07XG5cbiAgICAvLyBPdGhlcndpc2UgZ2V0IGVsZW1lbnQgZm9yIElEXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZyA9IExpYi5lbChpZCk7XG4gICAgfVxuXG4gIC8vIElEIGlzIGEgbWVkaWEgZWxlbWVudFxuICB9IGVsc2Uge1xuICAgIHRhZyA9IGlkO1xuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGEgdXNlYWJsZSBlbGVtZW50XG4gIGlmICghdGFnIHx8ICF0YWcubm9kZU5hbWUpIHsgLy8gcmU6IG5vZGVOYW1lLCBjb3VsZCBiZSBhIGJveCBkaXYgYWxzb1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBlbGVtZW50IG9yIElEIHN1cHBsaWVkIGlzIG5vdCB2YWxpZC4gKHZpZGVvanMpJyk7IC8vIFJldHVybnNcbiAgfVxuXG4gIC8vIEVsZW1lbnQgbWF5IGhhdmUgYSBwbGF5ZXIgYXR0ciByZWZlcnJpbmcgdG8gYW4gYWxyZWFkeSBjcmVhdGVkIHBsYXllciBpbnN0YW5jZS5cbiAgLy8gSWYgbm90LCBzZXQgdXAgYSBuZXcgcGxheWVyIGFuZCByZXR1cm4gdGhlIGluc3RhbmNlLlxuICByZXR1cm4gdGFnWydwbGF5ZXInXSB8fCBuZXcgUGxheWVyKHRhZywgb3B0aW9ucywgcmVhZHkpO1xufTtcblxuLy8gQ0ROIFZlcnNpb24uIFVzZWQgdG8gdGFyZ2V0IHJpZ2h0IGZsYXNoIHN3Zi5cbnZpZGVvanMuQ0ROX1ZFUlNJT04gPSAnX19WRVJTSU9OX05PX1BBVENIX18nO1xudmlkZW9qcy5BQ0NFU1NfUFJPVE9DT0wgPSAoJ2h0dHBzOicgPT09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJyk7XG5cbi8qKlxuKiBGdWxsIHBsYXllciB2ZXJzaW9uXG4qIEB0eXBlIHtzdHJpbmd9XG4qL1xudmlkZW9qc1snVkVSU0lPTiddID0gJ19fVkVSU0lPTl9fJztcblxuLy8gU2V0IENETiBWZXJzaW9uIG9mIHN3ZlxuLy8gVGhlIGFkZGVkICgrKSBibG9ja3MgdGhlIHJlcGxhY2UgZnJvbSBjaGFuZ2luZyB0aGlzIF9WRVJTSU9OX05PX1BBVENIXyBzdHJpbmdcbmlmICh2aWRlb2pzLkNETl9WRVJTSU9OICE9PSAnX19WRVJTSU9OXycrJ05PX1BBVENIX18nKSB7XG4gIE9wdGlvbnNbJ2ZsYXNoJ11bJ3N3ZiddID0gYCR7dmlkZW9qcy5BQ0NFU1NfUFJPVE9DT0x9dmpzLnplbmNkbi5uZXQvJHt2aWRlb2pzLkNETl9WRVJTSU9OfS92aWRlby1qcy5zd2ZgO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIGFkZGluZyBsYW5ndWFnZXMgdG8gdGhlIGRlZmF1bHQgb3B0aW9ucy4gVXNlZnVsIGZvclxuICogYW1lbmRpbmcgbXVsdGlwbGUgbGFuZ3VhZ2Ugc3VwcG9ydCBhdCBydW50aW1lLlxuICpcbiAqIEV4YW1wbGU6IHZpZGVvanMuYWRkTGFuZ3VhZ2UoJ2VzJywgeydIZWxsbyc6J0hvbGEnfSk7XG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBjb2RlIFRoZSBsYW5ndWFnZSBjb2RlIG9yIGRpY3Rpb25hcnkgcHJvcGVydHlcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBUaGUgZGF0YSB2YWx1ZXMgdG8gYmUgdHJhbnNsYXRlZFxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIGdsb2JhbCBsYW5ndWFnZXMgZGljdGlvbmFyeSBvYmplY3RcbiAqL1xudmlkZW9qcy5hZGRMYW5ndWFnZSA9IGZ1bmN0aW9uKGNvZGUsIGRhdGEpe1xuICBpZihPcHRpb25zWydsYW5ndWFnZXMnXVtjb2RlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgT3B0aW9uc1snbGFuZ3VhZ2VzJ11bY29kZV0gPSBWanNVdGlsLm1lcmdlT3B0aW9ucyhPcHRpb25zWydsYW5ndWFnZXMnXVtjb2RlXSwgZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgT3B0aW9uc1snbGFuZ3VhZ2VzJ11bY29kZV0gPSBkYXRhO1xuICB9XG4gIHJldHVybiBPcHRpb25zWydsYW5ndWFnZXMnXTtcbn07XG5cbi8qKlxuICogQ3VzdG9tIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKVxuICpcbiAqIFZpZGVvLmpzIHdpbGwgbmV2ZXIgYmUgYSBub24tYnJvd3NlciBsaWIgc28gd2UgY2FuIHNpbXBsaWZ5IFVNRCBhIGJ1bmNoIGFuZFxuICogc3RpbGwgc3VwcG9ydCByZXF1aXJlanMgYW5kIGJyb3dzZXJpZnkuIFRoaXMgYWxzbyBuZWVkcyB0byBiZSBjbG9zdXJlXG4gKiBjb21waWxlciBjb21wYXRpYmxlLCBzbyBzdHJpbmcga2V5cyBhcmUgdXNlZC5cbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICBkZWZpbmUoJ3ZpZGVvanMnLCBbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIHZpZGVvanM7IH0pO1xuXG4vLyBjaGVja2luZyB0aGF0IG1vZHVsZSBpcyBhbiBvYmplY3QgdG9vIGJlY2F1c2Ugb2YgdW1kanMvdW1kIzM1XG59IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGVbJ2V4cG9ydHMnXSA9IHZpZGVvanM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZpZGVvanM7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5cbi8qKlxuICogRGlzcGxheSB0aGF0IGFuIGVycm9yIGhhcyBvY2N1cnJlZCBtYWtpbmcgdGhlIHZpZGVvIHVucGxheWFibGVcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBFcnJvckRpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMub24ocGxheWVyLCAnZXJyb3InLCB0aGlzLnVwZGF0ZSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICB2YXIgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWVycm9yLWRpc3BsYXknXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicpO1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyKCkuZXJyb3IoKSkge1xuICAgICAgdGhpcy5jb250ZW50RWxfLmlubmVySFRNTCA9IHRoaXMubG9jYWxpemUodGhpcy5wbGF5ZXIoKS5lcnJvcigpLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0Vycm9yRGlzcGxheScsIEVycm9yRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBFcnJvckRpc3BsYXk7XG4iLCJpbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxudmFyIEV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uKCkge307XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18gPSB7fTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGZuKSB7XG4gIC8vIFJlbW92ZSB0aGUgYWRkRXZlbnRMaXN0ZW5lciBhbGlhcyBiZWZvcmUgY2FsbGluZyBFdmVudHMub25cbiAgLy8gc28gd2UgZG9uJ3QgZ2V0IGludG8gYW4gaW5maW5pdGUgdHlwZSBsb29wXG4gIGxldCBhZWwgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXI7XG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgRXZlbnRzLm9uKHRoaXMsIHR5cGUsIGZuKTtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gYWVsO1xufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgRXZlbnRzLm9mZih0aGlzLCB0eXBlLCBmbik7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmY7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25lID0gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgRXZlbnRzLm9uZSh0aGlzLCB0eXBlLCBmbik7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCkge1xuICBsZXQgdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9O1xuICB9XG4gIGV2ZW50ID0gRXZlbnRzLmZpeEV2ZW50KGV2ZW50KTtcblxuICBpZiAodGhpcy5hbGxvd2VkRXZlbnRzX1t0eXBlXSAmJiB0aGlzWydvbicgKyB0eXBlXSkge1xuICAgIHRoaXNbJ29uJyArIHR5cGVdKGV2ZW50KTtcbiAgfVxuXG4gIEV2ZW50cy50cmlnZ2VyKHRoaXMsIGV2ZW50KTtcbn07XG4vLyBUaGUgc3RhbmRhcmQgRE9NIEV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoKSBpcyBhbGlhc2VkIHRvIHRyaWdnZXIoKVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS50cmlnZ2VyO1xuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgRXZlbnQgU3lzdGVtIChKb2huIFJlc2lnIC0gU2VjcmV0cyBvZiBhIEpTIE5pbmphIGh0dHA6Ly9qc25pbmphLmNvbS8pXG4gKiAoT3JpZ2luYWwgYm9vayB2ZXJzaW9uIHdhc24ndCBjb21wbGV0ZWx5IHVzYWJsZSwgc28gZml4ZWQgc29tZSB0aGluZ3MgYW5kIG1hZGUgQ2xvc3VyZSBDb21waWxlciBjb21wYXRpYmxlKVxuICogVGhpcyBzaG91bGQgd29yayB2ZXJ5IHNpbWlsYXJseSB0byBqUXVlcnkncyBldmVudHMsIGhvd2V2ZXIgaXQncyBiYXNlZCBvZmYgdGhlIGJvb2sgdmVyc2lvbiB3aGljaCBpc24ndCBhc1xuICogcm9idXN0IGFzIGpxdWVyeSdzLCBzbyB0aGVyZSdzIHByb2JhYmx5IHNvbWUgZGlmZmVyZW5jZXMuXG4gKi9cblxuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLyoqXG4gKiBGaXggYSBuYXRpdmUgZXZlbnQgdG8gaGF2ZSBzdGFuZGFyZCBwcm9wZXJ0eSB2YWx1ZXNcbiAqIEBwYXJhbSAge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0IHRvIGZpeFxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGZpeEV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gVGVzdCBpZiBmaXhpbmcgdXAgaXMgbmVlZGVkXG4gIC8vIFVzZWQgdG8gY2hlY2sgaWYgIWV2ZW50LnN0b3BQcm9wYWdhdGlvbiBpbnN0ZWFkIG9mIGlzUHJvcGFnYXRpb25TdG9wcGVkXG4gIC8vIEJ1dCBuYXRpdmUgZXZlbnRzIHJldHVybiB0cnVlIGZvciBzdG9wUHJvcGFnYXRpb24sIGJ1dCBkb24ndCBoYXZlXG4gIC8vIG90aGVyIGV4cGVjdGVkIG1ldGhvZHMgbGlrZSBpc1Byb3BhZ2F0aW9uU3RvcHBlZC4gU2VlbXMgdG8gYmUgYSBwcm9ibGVtXG4gIC8vIHdpdGggdGhlIEphdmFzY3JpcHQgTmluamEgY29kZS4gU28gd2UncmUganVzdCBvdmVycmlkaW5nIGFsbCBldmVudHMgbm93LlxuICBpZiAoIWV2ZW50IHx8ICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgIHZhciBvbGQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICBldmVudCA9IHt9O1xuICAgIC8vIENsb25lIHRoZSBvbGQgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIG1vZGlmeSB0aGUgdmFsdWVzIGV2ZW50ID0ge307XG4gICAgLy8gSUU4IERvZXNuJ3QgbGlrZSB3aGVuIHlvdSBtZXNzIHdpdGggbmF0aXZlIGV2ZW50IHByb3BlcnRpZXNcbiAgICAvLyBGaXJlZm94IHJldHVybnMgZmFsc2UgZm9yIGV2ZW50Lmhhc093blByb3BlcnR5KCd0eXBlJykgYW5kIG90aGVyIHByb3BzXG4gICAgLy8gIHdoaWNoIG1ha2VzIGNvcHlpbmcgbW9yZSBkaWZmaWN1bHQuXG4gICAgLy8gVE9ETzogUHJvYmFibHkgYmVzdCB0byBjcmVhdGUgYSB3aGl0ZWxpc3Qgb2YgZXZlbnQgcHJvcHNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2xkKSB7XG4gICAgICAvLyBTYWZhcmkgNi4wLjMgd2FybnMgeW91IGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIGxheWVyWC9ZXG4gICAgICAvLyBDaHJvbWUgd2FybnMgeW91IGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIGtleWJvYXJkRXZlbnQua2V5TG9jYXRpb25cbiAgICAgIGlmIChrZXkgIT09ICdsYXllclgnICYmIGtleSAhPT0gJ2xheWVyWScgJiYga2V5ICE9PSAna2V5TG9jYXRpb24nKSB7XG4gICAgICAgIC8vIENocm9tZSAzMisgd2FybnMgaWYgeW91IHRyeSB0byBjb3B5IGRlcHJlY2F0ZWQgcmV0dXJuVmFsdWUsIGJ1dFxuICAgICAgICAvLyB3ZSBzdGlsbCB3YW50IHRvIGlmIHByZXZlbnREZWZhdWx0IGlzbid0IHN1cHBvcnRlZCAoSUU4KS5cbiAgICAgICAgaWYgKCEoa2V5ID09PSAncmV0dXJuVmFsdWUnICYmIG9sZC5wcmV2ZW50RGVmYXVsdCkpIHtcbiAgICAgICAgICBldmVudFtrZXldID0gb2xkW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGUgZXZlbnQgb2NjdXJyZWQgb24gdGhpcyBlbGVtZW50XG4gICAgaWYgKCFldmVudC50YXJnZXQpIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHdoaWNoIG90aGVyIGVsZW1lbnQgdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG9cbiAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID0gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/XG4gICAgICBldmVudC50b0VsZW1lbnQgOlxuICAgICAgZXZlbnQuZnJvbUVsZW1lbnQ7XG5cbiAgICAvLyBTdG9wIHRoZSBkZWZhdWx0IGJyb3dzZXIgYWN0aW9uXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob2xkLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIG9sZC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG5cbiAgICAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9sZC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgb2xkLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICB9O1xuXG4gICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5GYWxzZTtcblxuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgYW5kIGV4ZWN1dGluZyBvdGhlciBoYW5kbGVyc1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVybkZhbHNlO1xuXG4gICAgLy8gSGFuZGxlIG1vdXNlIHBvc2l0aW9uXG4gICAgaWYgKGV2ZW50LmNsaWVudFggIT0gbnVsbCkge1xuICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgIGV2ZW50LnBhZ2VYID0gZXZlbnQuY2xpZW50WCArXG4gICAgICAgIChkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCkgLVxuICAgICAgICAoZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDApO1xuICAgICAgZXZlbnQucGFnZVkgPSBldmVudC5jbGllbnRZICtcbiAgICAgICAgKGRvYyAmJiBkb2Muc2Nyb2xsVG9wIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgfHwgMCkgLVxuICAgICAgICAoZG9jICYmIGRvYy5jbGllbnRUb3AgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCB8fCAwKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUga2V5IHByZXNzZXNcbiAgICBldmVudC53aGljaCA9IGV2ZW50LmNoYXJDb2RlIHx8IGV2ZW50LmtleUNvZGU7XG5cbiAgICAvLyBGaXggYnV0dG9uIGZvciBtb3VzZSBjbGlja3M6XG4gICAgLy8gMCA9PSBsZWZ0OyAxID09IG1pZGRsZTsgMiA9PSByaWdodFxuICAgIGlmIChldmVudC5idXR0b24gIT0gbnVsbCkge1xuICAgICAgZXZlbnQuYnV0dG9uID0gKGV2ZW50LmJ1dHRvbiAmIDEgPyAwIDpcbiAgICAgICAgKGV2ZW50LmJ1dHRvbiAmIDQgPyAxIDpcbiAgICAgICAgICAoZXZlbnQuYnV0dG9uICYgMiA/IDIgOiAwKSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgZml4ZWQtdXAgaW5zdGFuY2VcbiAgcmV0dXJuIGV2ZW50O1xufTtcblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZWxlbWVudFxuICogSXQgc3RvcmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGluIGEgc2VwYXJhdGUgY2FjaGUgb2JqZWN0XG4gKiBhbmQgYWRkcyBhIGdlbmVyaWMgaGFuZGxlciB0byB0aGUgZWxlbWVudCdzIGV2ZW50LFxuICogYWxvbmcgd2l0aCBhIHVuaXF1ZSBpZCAoZ3VpZCkgdG8gdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIEVsZW1lbnQgb3Igb2JqZWN0IHRvIGJpbmQgbGlzdGVuZXJzIHRvXG4gKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9ICAgdHlwZSBUeXBlIG9mIGV2ZW50IHRvIGJpbmQgdG8uXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBFdmVudCBsaXN0ZW5lci5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBvbiA9IGZ1bmN0aW9uKGVsZW0sIHR5cGUsIGZuKXtcbiAgaWYgKExpYi5vYmouaXNBcnJheSh0eXBlKSkge1xuICAgIHJldHVybiBfaGFuZGxlTXVsdGlwbGVFdmVudHMob24sIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIGxldCBkYXRhID0gTGliLmdldERhdGEoZWxlbSk7XG5cbiAgLy8gV2UgbmVlZCBhIHBsYWNlIHRvIHN0b3JlIGFsbCBvdXIgaGFuZGxlciBkYXRhXG4gIGlmICghZGF0YS5oYW5kbGVycykgZGF0YS5oYW5kbGVycyA9IHt9O1xuXG4gIGlmICghZGF0YS5oYW5kbGVyc1t0eXBlXSkgZGF0YS5oYW5kbGVyc1t0eXBlXSA9IFtdO1xuXG4gIGlmICghZm4uZ3VpZCkgZm4uZ3VpZCA9IExpYi5ndWlkKys7XG5cbiAgZGF0YS5oYW5kbGVyc1t0eXBlXS5wdXNoKGZuKTtcblxuICBpZiAoIWRhdGEuZGlzcGF0Y2hlcikge1xuICAgIGRhdGEuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGRhdGEuZGlzcGF0Y2hlciA9IGZ1bmN0aW9uIChldmVudCl7XG5cbiAgICAgIGlmIChkYXRhLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcblxuICAgICAgdmFyIGhhbmRsZXJzID0gZGF0YS5oYW5kbGVyc1tldmVudC50eXBlXTtcblxuICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgIC8vIENvcHkgaGFuZGxlcnMgc28gaWYgaGFuZGxlcnMgYXJlIGFkZGVkL3JlbW92ZWQgZHVyaW5nIHRoZSBwcm9jZXNzIGl0IGRvZXNuJ3QgdGhyb3cgZXZlcnl0aGluZyBvZmYuXG4gICAgICAgIHZhciBoYW5kbGVyc0NvcHkgPSBoYW5kbGVycy5zbGljZSgwKTtcblxuICAgICAgICBmb3IgKHZhciBtID0gMCwgbiA9IGhhbmRsZXJzQ29weS5sZW5ndGg7IG0gPCBuOyBtKyspIHtcbiAgICAgICAgICBpZiAoZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZXJzQ29weVttXS5jYWxsKGVsZW0sIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEuaGFuZGxlcnNbdHlwZV0ubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGRhdGEuZGlzcGF0Y2hlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkge1xuICAgICAgZWxlbS5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgZGF0YS5kaXNwYXRjaGVyKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIE9iamVjdCB0byByZW1vdmUgbGlzdGVuZXJzIGZyb21cbiAqIEBwYXJhbSAge1N0cmluZ3xBcnJheT19ICAgdHlwZSBUeXBlIG9mIGxpc3RlbmVyIHRvIHJlbW92ZS4gRG9uJ3QgaW5jbHVkZSB0byByZW1vdmUgYWxsIGV2ZW50cyBmcm9tIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBTcGVjaWZpYyBsaXN0ZW5lciB0byByZW1vdmUuIERvbid0IGluY2x1ZGUgdG8gcmVtb3ZlIGxpc3RlbmVycyBmb3IgYW4gZXZlbnQgdHlwZS5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBvZmYgPSBmdW5jdGlvbihlbGVtLCB0eXBlLCBmbikge1xuICAvLyBEb24ndCB3YW50IHRvIGFkZCBhIGNhY2hlIG9iamVjdCB0aHJvdWdoIGdldERhdGEgaWYgbm90IG5lZWRlZFxuICBpZiAoIUxpYi5oYXNEYXRhKGVsZW0pKSByZXR1cm47XG5cbiAgbGV0IGRhdGEgPSBMaWIuZ2V0RGF0YShlbGVtKTtcblxuICAvLyBJZiBubyBldmVudHMgZXhpc3QsIG5vdGhpbmcgdG8gdW5iaW5kXG4gIGlmICghZGF0YS5oYW5kbGVycykgeyByZXR1cm47IH1cblxuICBpZiAoTGliLm9iai5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvZmYsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb25cbiAgdmFyIHJlbW92ZVR5cGUgPSBmdW5jdGlvbih0KXtcbiAgICAgZGF0YS5oYW5kbGVyc1t0XSA9IFtdO1xuICAgICBjbGVhblVwRXZlbnRzKGVsZW0sdCk7XG4gIH07XG5cbiAgLy8gQXJlIHdlIHJlbW92aW5nIGFsbCBib3VuZCBldmVudHM/XG4gIGlmICghdHlwZSkge1xuICAgIGZvciAobGV0IHQgaW4gZGF0YS5oYW5kbGVycykgcmVtb3ZlVHlwZSh0KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBkYXRhLmhhbmRsZXJzW3R5cGVdO1xuXG4gIC8vIElmIG5vIGhhbmRsZXJzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm47XG5cbiAgLy8gSWYgbm8gbGlzdGVuZXIgd2FzIHByb3ZpZGVkLCByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdHlwZVxuICBpZiAoIWZuKSB7XG4gICAgcmVtb3ZlVHlwZSh0eXBlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXZSdyZSBvbmx5IHJlbW92aW5nIGEgc2luZ2xlIGhhbmRsZXJcbiAgaWYgKGZuLmd1aWQpIHtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGhhbmRsZXJzLmxlbmd0aDsgbisrKSB7XG4gICAgICBpZiAoaGFuZGxlcnNbbl0uZ3VpZCA9PT0gZm4uZ3VpZCkge1xuICAgICAgICBoYW5kbGVycy5zcGxpY2Uobi0tLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhblVwRXZlbnRzKGVsZW0sIHR5cGUpO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0aGUgbGlzdGVuZXIgY2FjaGUgYW5kIGRpc3BhdGNoZXJzXG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gZWxlbSBFbGVtZW50IHRvIGNsZWFuIHVwXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiBldmVudCB0byBjbGVhbiB1cFxuICogQHByaXZhdGVcbiAqL1xudmFyIGNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbihlbGVtLCB0eXBlKSB7XG4gIHZhciBkYXRhID0gTGliLmdldERhdGEoZWxlbSk7XG5cbiAgLy8gUmVtb3ZlIHRoZSBldmVudHMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaWYgdGhlcmUgYXJlIG5vbmUgbGVmdFxuICBpZiAoZGF0YS5oYW5kbGVyc1t0eXBlXS5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgZGF0YS5oYW5kbGVyc1t0eXBlXTtcbiAgICAvLyBkYXRhLmhhbmRsZXJzW3R5cGVdID0gbnVsbDtcbiAgICAvLyBTZXR0aW5nIHRvIG51bGwgd2FzIGNhdXNpbmcgYW4gZXJyb3Igd2l0aCBkYXRhLmhhbmRsZXJzXG5cbiAgICAvLyBSZW1vdmUgdGhlIG1ldGEtaGFuZGxlciBmcm9tIHRoZSBlbGVtZW50XG4gICAgaWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGRhdGEuZGlzcGF0Y2hlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgZWxlbS5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZGF0YS5kaXNwYXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgdGhlIGV2ZW50cyBvYmplY3QgaWYgdGhlcmUgYXJlIG5vIHR5cGVzIGxlZnRcbiAgaWYgKExpYi5pc0VtcHR5KGRhdGEuaGFuZGxlcnMpKSB7XG4gICAgZGVsZXRlIGRhdGEuaGFuZGxlcnM7XG4gICAgZGVsZXRlIGRhdGEuZGlzcGF0Y2hlcjtcbiAgICBkZWxldGUgZGF0YS5kaXNhYmxlZDtcblxuICAgIC8vIGRhdGEuaGFuZGxlcnMgPSBudWxsO1xuICAgIC8vIGRhdGEuZGlzcGF0Y2hlciA9IG51bGw7XG4gICAgLy8gZGF0YS5kaXNhYmxlZCA9IG51bGw7XG4gIH1cblxuICAvLyBGaW5hbGx5IHJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSBpcyBubyBkYXRhIGxlZnRcbiAgaWYgKExpYi5pc0VtcHR5KGRhdGEpKSB7XG4gICAgTGliLnJlbW92ZURhdGEoZWxlbSk7XG4gIH1cbn07XG5cbi8qKlxuICogVHJpZ2dlciBhbiBldmVudCBmb3IgYW4gZWxlbWVudFxuICogQHBhcmFtICB7RWxlbWVudHxPYmplY3R9ICAgICAgZWxlbSAgRWxlbWVudCB0byB0cmlnZ2VyIGFuIGV2ZW50IG9uXG4gKiBAcGFyYW0gIHtFdmVudHxPYmplY3R8U3RyaW5nfSBldmVudCBBIHN0cmluZyAodGhlIHR5cGUpIG9yIGFuIGV2ZW50IG9iamVjdCB3aXRoIGEgdHlwZSBhdHRyaWJ1dGVcbiAqIEBwcml2YXRlXG4gKi9cbnZhciB0cmlnZ2VyID0gZnVuY3Rpb24oZWxlbSwgZXZlbnQpIHtcbiAgLy8gRmV0Y2hlcyBlbGVtZW50IGRhdGEgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgKGZvciBidWJibGluZykuXG4gIC8vIERvbid0IHdhbnQgdG8gYWRkIGEgZGF0YSBvYmplY3QgdG8gY2FjaGUgZm9yIGV2ZXJ5IHBhcmVudCxcbiAgLy8gc28gY2hlY2tpbmcgaGFzRGF0YSBmaXJzdC5cbiAgdmFyIGVsZW1EYXRhID0gKExpYi5oYXNEYXRhKGVsZW0pKSA/IExpYi5nZXREYXRhKGVsZW0pIDoge307XG4gIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUgfHwgZWxlbS5vd25lckRvY3VtZW50O1xuICAgICAgLy8gdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQsXG4gICAgICAvLyBoYW5kbGVyO1xuXG4gIC8vIElmIGFuIGV2ZW50IG5hbWUgd2FzIHBhc3NlZCBhcyBhIHN0cmluZywgY3JlYXRlcyBhbiBldmVudCBvdXQgb2YgaXRcbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHsgdHlwZTpldmVudCwgdGFyZ2V0OmVsZW0gfTtcbiAgfVxuICAvLyBOb3JtYWxpemVzIHRoZSBldmVudCBwcm9wZXJ0aWVzLlxuICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcblxuICAvLyBJZiB0aGUgcGFzc2VkIGVsZW1lbnQgaGFzIGEgZGlzcGF0Y2hlciwgZXhlY3V0ZXMgdGhlIGVzdGFibGlzaGVkIGhhbmRsZXJzLlxuICBpZiAoZWxlbURhdGEuZGlzcGF0Y2hlcikge1xuICAgIGVsZW1EYXRhLmRpc3BhdGNoZXIuY2FsbChlbGVtLCBldmVudCk7XG4gIH1cblxuICAvLyBVbmxlc3MgZXhwbGljaXRseSBzdG9wcGVkIG9yIHRoZSBldmVudCBkb2VzIG5vdCBidWJibGUgKGUuZy4gbWVkaWEgZXZlbnRzKVxuICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGxzIHRoaXMgZnVuY3Rpb24gdG8gYnViYmxlIHRoZSBldmVudCB1cCB0aGUgRE9NLlxuICAgIGlmIChwYXJlbnQgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgJiYgZXZlbnQuYnViYmxlcyAhPT0gZmFsc2UpIHtcbiAgICB0cmlnZ2VyKHBhcmVudCwgZXZlbnQpO1xuXG4gIC8vIElmIGF0IHRoZSB0b3Agb2YgdGhlIERPTSwgdHJpZ2dlcnMgdGhlIGRlZmF1bHQgYWN0aW9uIHVubGVzcyBkaXNhYmxlZC5cbiAgfSBlbHNlIGlmICghcGFyZW50ICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdmFyIHRhcmdldERhdGEgPSBMaWIuZ2V0RGF0YShldmVudC50YXJnZXQpO1xuXG4gICAgLy8gQ2hlY2tzIGlmIHRoZSB0YXJnZXQgaGFzIGEgZGVmYXVsdCBhY3Rpb24gZm9yIHRoaXMgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnRhcmdldFtldmVudC50eXBlXSkge1xuICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZXMgZXZlbnQgZGlzcGF0Y2hpbmcgb24gdGhlIHRhcmdldCBhcyB3ZSBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgdGhlIGhhbmRsZXIuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIC8vIEV4ZWN1dGVzIHRoZSBkZWZhdWx0IGFjdGlvbi5cbiAgICAgIGlmICh0eXBlb2YgZXZlbnQudGFyZ2V0W2V2ZW50LnR5cGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldFtldmVudC50eXBlXSgpO1xuICAgICAgfVxuICAgICAgLy8gUmUtZW5hYmxlcyBldmVudCBkaXNwYXRjaGluZy5cbiAgICAgIHRhcmdldERhdGEuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJbmZvcm0gdGhlIHRyaWdnZXJlciBpZiB0aGUgZGVmYXVsdCB3YXMgcHJldmVudGVkIGJ5IHJldHVybmluZyBmYWxzZVxuICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgYSBsaXN0ZW5lciBvbmx5IG9uY2UgZm9yIGFuIGV2ZW50XG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIEVsZW1lbnQgb3Igb2JqZWN0IHRvXG4gKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9ICAgdHlwZVxuICogQHBhcmFtICB7RnVuY3Rpb259IGZuXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgb25lID0gZnVuY3Rpb24oZWxlbSwgdHlwZSwgZm4pIHtcbiAgaWYgKExpYi5vYmouaXNBcnJheSh0eXBlKSkge1xuICAgIHJldHVybiBfaGFuZGxlTXVsdGlwbGVFdmVudHMob25lLCBlbGVtLCB0eXBlLCBmbik7XG4gIH1cbiAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpe1xuICAgIG9mZihlbGVtLCB0eXBlLCBmdW5jKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICAvLyBjb3B5IHRoZSBndWlkIHRvIHRoZSBuZXcgZnVuY3Rpb24gc28gaXQgY2FuIHJlbW92ZWQgdXNpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uJ3MgSURcbiAgZnVuYy5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgTGliLmd1aWQrKztcbiAgb24oZWxlbSwgdHlwZSwgZnVuYyk7XG59O1xuXG4vKipcbiAqIExvb3BzIHRocm91Z2ggYW4gYXJyYXkgb2YgZXZlbnQgdHlwZXMgYW5kIGNhbGxzIHRoZSByZXF1ZXN0ZWQgbWV0aG9kIGZvciBlYWNoIHR5cGUuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBUaGUgZXZlbnQgbWV0aG9kIHdlIHdhbnQgdG8gdXNlLlxuICogQHBhcmFtICB7RWxlbWVudHxPYmplY3R9IGVsZW0gRWxlbWVudCBvciBvYmplY3QgdG8gYmluZCBsaXN0ZW5lcnMgdG9cbiAqIEBwYXJhbSAge1N0cmluZ30gICB0eXBlIFR5cGUgb2YgZXZlbnQgdG8gYmluZCB0by5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayAgIEV2ZW50IGxpc3RlbmVyLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2hhbmRsZU11bHRpcGxlRXZlbnRzKGZuLCBlbGVtLCB0eXBlLCBjYWxsYmFjaykge1xuICBMaWIuYXJyLmZvckVhY2godHlwZSwgZnVuY3Rpb24odHlwZSkge1xuICAgIGZuKGVsZW0sIHR5cGUsIGNhbGxiYWNrKTsgLy9DYWxsIHRoZSBldmVudCBtZXRob2QgZm9yIGVhY2ggb25lIG9mIHRoZSB0eXBlc1xuICB9KTtcbn1cblxuZXhwb3J0IHsgb24sIG9mZiwgY2xlYW5VcEV2ZW50cywgZml4RXZlbnQsIG9uZSwgdHJpZ2dlciB9O1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBBIGNvbWJpbmF0aW9uIG9mIG5vZGUgaW5oZXJpdHMgYW5kIGJhYmVsJ3MgaW5oZXJpdHMgKGFmdGVyIHRyYW5zcGlsZSkuXG4gKiBCb3RoIHdvcmsgdGhlIHNhbWUgYnV0IG5vZGUgYWRkcyBgc3VwZXJfYCB0byB0aGUgc3ViQ2xhc3NcbiAqIGFuZCBCYWJsZSBhZGRzIHRoZSBzdXBlckNsYXNzIGFzIF9fcHJvdG9fXy4gQm90aCBzZWVtIHVzZWZ1bC5cbiAqL1xuY29uc3QgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChzdXBlckNsYXNzKSB7XG4gICAgLy8gbm9kZVxuICAgIHN1YkNsYXNzLnN1cGVyXyA9IHN1cGVyQ2xhc3M7XG4gIH1cbn07XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIHN1YmNsYXNzaW5nIHVzaW5nIHRoZSBzYW1lIGluaGVyaXRhbmNlIHRoYXRcbiAqIHZpZGVvanMgdXNlcyBpbnRlcm5hbGx5XG4gKlxuICogYGBgXG4gKiB2YXIgQnV0dG9uID0gdmlkZW9qcy5nZXRDb21wb25lbnQoJ0J1dHRvbicpO1xuICpcbiAqIHZhciBNeUJ1dHRvbiA9IHZpZGVvanMuZXh0ZW5kcyhCdXR0b24sIHtcbiAqICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKHBsYXllciwgb3B0aW9ucykge1xuICogICAgIEJ1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucyk7XG4gKiAgIH0sXG4gKlxuICogICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAvLyBkb1NvbWV0aGluZ1xuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBleHRlbmRzRm4gPSBmdW5jdGlvbihzdXBlckNsYXNzLCBzdWJDbGFzc01ldGhvZHM9e30pIHtcbiAgbGV0IHN1YkNsYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgc3VwZXJDbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICBsZXQgbWV0aG9kcyA9IHt9O1xuXG4gIGlmIChzdWJDbGFzc01ldGhvZHMuY29uc3RydWN0b3IgIT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICBzdWJDbGFzcyA9IHN1YkNsYXNzTWV0aG9kcy5jb25zdHJ1Y3RvcjtcbiAgICBtZXRob2RzID0gc3ViQ2xhc3NNZXRob2RzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzdWJDbGFzc01ldGhvZHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdWJDbGFzcyA9IHN1YkNsYXNzTWV0aG9kcztcbiAgfVxuXG4gIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG5cbiAgLy8gRXh0ZW5kIHN1Yk9iaidzIHByb3RvdHlwZSB3aXRoIGZ1bmN0aW9ucyBhbmQgb3RoZXIgcHJvcGVydGllcyBmcm9tIHByb3BzXG4gIGZvciAodmFyIG5hbWUgaW4gbWV0aG9kcykge1xuICAgIGlmIChtZXRob2RzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2RzW25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJDbGFzcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuZHNGbjtcbiIsImltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKipcbiAqIFN0b3JlIHRoZSBicm93c2VyLXNwZWNpZmljIG1ldGhvZHMgZm9yIHRoZSBmdWxsc2NyZWVuIEFQSVxuICogQHR5cGUge09iamVjdHx1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5sZXQgRnVsbHNjcmVlbkFwaSA9IHt9O1xuXG4vLyBicm93c2VyIEFQSSBtZXRob2RzXG4vLyBtYXAgYXBwcm9hY2ggZnJvbSBTY3JlZW5mdWwuanMgLSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NjcmVlbmZ1bGwuanNcbmNvbnN0IGFwaU1hcCA9IFtcbiAgLy8gU3BlYzogaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy9mdWxsc2NyZWVuL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sXG4gIFtcbiAgICAncmVxdWVzdEZ1bGxzY3JlZW4nLFxuICAgICdleGl0RnVsbHNjcmVlbicsXG4gICAgJ2Z1bGxzY3JlZW5FbGVtZW50JyxcbiAgICAnZnVsbHNjcmVlbkVuYWJsZWQnLFxuICAgICdmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAnZnVsbHNjcmVlbmVycm9yJ1xuICBdLFxuICAvLyBXZWJLaXRcbiAgW1xuICAgICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG4gICAgJ3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcbiAgICAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLFxuICAgICd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXG4gIF0sXG4gIC8vIE9sZCBXZWJLaXQgKFNhZmFyaSA1LjEpXG4gIFtcbiAgICAnd2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4nLFxuICAgICd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcbiAgICAnd2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50JyxcbiAgICAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXG4gICAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXG4gIF0sXG4gIC8vIE1vemlsbGFcbiAgW1xuICAgICdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXG4gICAgJ21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuICAgICdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG4gICAgJ21vekZ1bGxTY3JlZW5FbmFibGVkJyxcbiAgICAnbW96ZnVsbHNjcmVlbmNoYW5nZScsXG4gICAgJ21vemZ1bGxzY3JlZW5lcnJvcidcbiAgXSxcbiAgLy8gTWljcm9zb2Z0XG4gIFtcbiAgICAnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXG4gICAgJ21zRXhpdEZ1bGxzY3JlZW4nLFxuICAgICdtc0Z1bGxzY3JlZW5FbGVtZW50JyxcbiAgICAnbXNGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICAgJ01TRnVsbHNjcmVlbkNoYW5nZScsXG4gICAgJ01TRnVsbHNjcmVlbkVycm9yJ1xuICBdXG5dO1xuXG5sZXQgc3BlY0FwaSA9IGFwaU1hcFswXTtcbmxldCBicm93c2VyQXBpO1xuXG4vLyBkZXRlcm1pbmUgdGhlIHN1cHBvcnRlZCBzZXQgb2YgZnVuY3Rpb25zXG5mb3IgKGxldCBpID0gMDsgaSA8IGFwaU1hcC5sZW5ndGg7IGkrKykge1xuICAvLyBjaGVjayBmb3IgZXhpdEZ1bGxzY3JlZW4gZnVuY3Rpb25cbiAgaWYgKGFwaU1hcFtpXVsxXSBpbiBkb2N1bWVudCkge1xuICAgIGJyb3dzZXJBcGkgPSBhcGlNYXBbaV07XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuLy8gbWFwIHRoZSBicm93c2VyIEFQSSBuYW1lcyB0byB0aGUgc3BlYyBBUEkgbmFtZXNcbmlmIChicm93c2VyQXBpKSB7XG4gIGZvciAobGV0IGk9MDsgaTxicm93c2VyQXBpLmxlbmd0aDsgaSsrKSB7XG4gICAgRnVsbHNjcmVlbkFwaVtzcGVjQXBpW2ldXSA9IGJyb3dzZXJBcGlbaV07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnVsbHNjcmVlbkFwaTtcbiIsImltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcbmxldCBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yO1xuXG5sZXQgaGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlbGVtZW50IGFuZCBhcHBsaWVzIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0gIHtTdHJpbmc9fSB0YWdOYW1lICAgIE5hbWUgb2YgdGFnIHRvIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIEVsZW1lbnQgcHJvcGVydGllcyB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjcmVhdGVFbCA9IGZ1bmN0aW9uKHRhZ05hbWU9J2RpdicsIHByb3BlcnRpZXM9e30pe1xuICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuXG4gIG9iai5lYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BOYW1lLCB2YWwpe1xuICAgIC8vIE5vdCByZW1lbWJlcmluZyB3aHkgd2Ugd2VyZSBjaGVja2luZyBmb3IgZGFzaFxuICAgIC8vIGJ1dCB1c2luZyBzZXRBdHRyaWJ1dGUgbWVhbnMgeW91IGhhdmUgdG8gdXNlIGdldEF0dHJpYnV0ZVxuXG4gICAgLy8gVGhlIGNoZWNrIGZvciBkYXNoIGNoZWNrcyBmb3IgdGhlIGFyaWEtKiBhdHRyaWJ1dGVzLCBsaWtlIGFyaWEtbGFiZWwsIGFyaWEtdmFsdWVtaW4uXG4gICAgLy8gVGhlIGFkZGl0aW9uYWwgY2hlY2sgZm9yIFwicm9sZVwiIGlzIGJlY2F1c2UgdGhlIGRlZmF1bHQgbWV0aG9kIGZvciBhZGRpbmcgYXR0cmlidXRlcyBkb2VzIG5vdFxuICAgIC8vIGFkZCB0aGUgYXR0cmlidXRlIFwicm9sZVwiLiBNeSBndWVzcyBpcyBiZWNhdXNlIGl0J3Mgbm90IGEgdmFsaWQgYXR0cmlidXRlIGluIHNvbWUgbmFtZXNwYWNlcywgYWx0aG91Z2hcbiAgICAvLyBicm93c2VycyBoYW5kbGUgdGhlIGF0dHJpYnV0ZSBqdXN0IGZpbmUuIFRoZSBXM0MgYWxsb3dzIGZvciBhcmlhLSogYXR0cmlidXRlcyB0byBiZSB1c2VkIGluIHByZS1IVE1MNSBkb2NzLlxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByaW1lci8jYXJpYWh0bWwuIFVzaW5nIHNldEF0dHJpYnV0ZSBnZXRzIGFyb3VuZCB0aGlzIHByb2JsZW0uXG4gICAgaWYgKHByb3BOYW1lLmluZGV4T2YoJ2FyaWEtJykgIT09IC0xIHx8IHByb3BOYW1lID09PSAncm9sZScpIHtcbiAgICAgZWwuc2V0QXR0cmlidXRlKHByb3BOYW1lLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgIGVsW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbDtcbn07XG5cbi8qKlxuICogVXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSB1cHBlcmNhc2VkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHN0cmluZyl7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIE9iamVjdCBmdW5jdGlvbnMgY29udGFpbmVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG9iaiA9IHt9O1xuXG4vKipcbiAqIE9iamVjdC5jcmVhdGUgc2hpbSBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZVxuICpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9iaiBPYmplY3QgdG8gdXNlIGFzIHByb3RvdHlwZVxuICogQHByaXZhdGVcbiAqL1xub2JqLmNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24ob2JqKXtcbiAgLy9DcmVhdGUgYSBuZXcgZnVuY3Rpb24gY2FsbGVkICdGJyB3aGljaCBpcyBqdXN0IGFuIGVtcHR5IG9iamVjdC5cbiAgZnVuY3Rpb24gRigpIHt9XG5cbiAgLy90aGUgcHJvdG90eXBlIG9mIHRoZSAnRicgZnVuY3Rpb24gc2hvdWxkIHBvaW50IHRvIHRoZVxuICAvL3BhcmFtZXRlciBvZiB0aGUgYW5vbnltb3VzIGZ1bmN0aW9uLlxuICBGLnByb3RvdHlwZSA9IG9iajtcblxuICAvL2NyZWF0ZSBhIG5ldyBjb25zdHJ1Y3RvciBmdW5jdGlvbiBiYXNlZCBvZmYgb2YgdGhlICdGJyBmdW5jdGlvbi5cbiAgcmV0dXJuIG5ldyBGKCk7XG59O1xuXG4vKipcbiAqIExvb3AgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGluIGFuIG9iamVjdCBhbmQgY2FsbCBhIGZ1bmN0aW9uXG4gKiB3aG9zZSBhcmd1bWVudHMgYXJlIChrZXksdmFsdWUpXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgb2JqIE9iamVjdCBvZiBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlYWNoIHByb3BlcnR5LlxuICogQHRoaXMgeyp9XG4gKiBAcHJpdmF0ZVxuICovXG5vYmouZWFjaCA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpe1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3AuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIGZuLmNhbGwoY29udGV4dCB8fCB0aGlzLCBrZXksIG9ialtrZXldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMgdG9nZXRoZXIgYW5kIHJldHVybiB0aGUgb3JpZ2luYWwuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajFcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqMlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xub2JqLm1lcmdlID0gZnVuY3Rpb24ob2JqMSwgb2JqMil7XG4gIGlmICghb2JqMikgeyByZXR1cm4gb2JqMTsgfVxuICBmb3IgKHZhciBrZXkgaW4gb2JqMil7XG4gICAgaWYgKGhhc093blByb3AuY2FsbChvYmoyLCBrZXkpKSB7XG4gICAgICBvYmoxW2tleV0gPSBvYmoyW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmoxO1xufTtcblxuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cywgYW5kIG1lcmdlIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG9iamVjdHNcbiAqIGluc3RlYWQgb2YganVzdCBvdmVyd3JpdGluZyBvbmUuIFVzZXMgdG8gbWVyZ2Ugb3B0aW9ucyBoYXNoZXNcbiAqIHdoZXJlIGRlZXBlciBkZWZhdWx0IHNldHRpbmdzIGFyZSBpbXBvcnRhbnQuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG92ZXJyaWRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajIgT3ZlcnJpZGluZyBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICBOZXcgb2JqZWN0LiBPYmoxIGFuZCBPYmoyIHdpbGwgYmUgdW50b3VjaGVkLlxuICogQHByaXZhdGVcbiAqL1xub2JqLmRlZXBNZXJnZSA9IGZ1bmN0aW9uKG9iajEsIG9iajIpe1xuICB2YXIga2V5LCB2YWwxLCB2YWwyO1xuXG4gIC8vIG1ha2UgYSBjb3B5IG9mIG9iajEgc28gd2UncmUgbm90IG92ZXJ3cml0aW5nIG9yaWdpbmFsIHZhbHVlcy5cbiAgLy8gbGlrZSBwcm90b3R5cGUub3B0aW9uc18gYW5kIGFsbCBzdWIgb3B0aW9ucyBvYmplY3RzXG4gIG9iajEgPSBvYmouY29weShvYmoxKTtcblxuICBmb3IgKGtleSBpbiBvYmoyKXtcbiAgICBpZiAoaGFzT3duUHJvcC5jYWxsKG9iajIsIGtleSkpIHtcbiAgICAgIHZhbDEgPSBvYmoxW2tleV07XG4gICAgICB2YWwyID0gb2JqMltrZXldO1xuXG4gICAgICAvLyBDaGVjayBpZiBib3RoIHByb3BlcnRpZXMgYXJlIHB1cmUgb2JqZWN0cyBhbmQgZG8gYSBkZWVwIG1lcmdlIGlmIHNvXG4gICAgICBpZiAob2JqLmlzUGxhaW4odmFsMSkgJiYgb2JqLmlzUGxhaW4odmFsMikpIHtcbiAgICAgICAgb2JqMVtrZXldID0gb2JqLmRlZXBNZXJnZSh2YWwxLCB2YWwyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iajFba2V5XSA9IG9iajJba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajE7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBjb3B5IG9mIHRoZSBzdXBwbGllZCBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCB0byBjb3B5XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICBDb3B5IG9mIG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xub2JqLmNvcHkgPSBmdW5jdGlvbihvYmpUb0NvcHkpe1xuICByZXR1cm4gb2JqLm1lcmdlKHt9LCBvYmpUb0NvcHkpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgcGxhaW4sIGFuZCBub3QgYSBkb20gbm9kZSBvciBhbnkgb2JqZWN0IHN1Yi1pbnN0YW5jZVxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgVHJ1ZSBpZiBwbGFpbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAcHJpdmF0ZVxuICovXG5vYmouaXNQbGFpbiA9IGZ1bmN0aW9uKG9iail7XG4gIHJldHVybiAhIW9ialxuICAgICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG4gICAgJiYgb2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBBcnJheVxuKiAgU2luY2UgaW5zdGFuY2VvZiBBcnJheSB3aWxsIG5vdCB3b3JrIG9uIGFycmF5cyBjcmVhdGVkIGluIGFub3RoZXIgZnJhbWUgd2UgbmVlZCB0byB1c2UgQXJyYXkuaXNBcnJheSwgYnV0IHNpbmNlIElFOCBkb2VzIG5vdCBzdXBwb3J0IEFycmF5LmlzQXJyYXkgd2UgbmVlZCB0aGlzIHNoaW1cbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFRydWUgaWYgcGxhaW4sIGZhbHNlIG90aGVyd2lzZVxuICogQHByaXZhdGVcbiAqL1xub2JqLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEJpbmQgKGEuay5hIHByb3h5IG9yIENvbnRleHQpLiBBIHNpbXBsZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBjb250ZXh0IG9mIGEgZnVuY3Rpb25cbiAgIEl0IGFsc28gc3RvcmVzIGEgdW5pcXVlIGlkIG9uIHRoZSBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgZWFzaWx5IHJlbW92ZWQgZnJvbSBldmVudHNcbiAqIEBwYXJhbSAgeyp9ICAgY29udGV4dCBUaGUgb2JqZWN0IHRvIGJpbmQgYXMgc2NvcGVcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgIFRoZSBmdW5jdGlvbiB0byBiZSBib3VuZCB0byBhIHNjb3BlXG4gKiBAcGFyYW0gIHtOdW1iZXI9fSAgIHVpZCAgICAgQW4gb3B0aW9uYWwgdW5pcXVlIElEIGZvciB0aGUgZnVuY3Rpb24gdG8gYmUgc2V0XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBiaW5kID0gZnVuY3Rpb24oY29udGV4dCwgZm4sIHVpZCkge1xuICAvLyBNYWtlIHN1cmUgdGhlIGZ1bmN0aW9uIGhhcyBhIHVuaXF1ZSBJRFxuICBpZiAoIWZuLmd1aWQpIHsgZm4uZ3VpZCA9IGd1aWQrKzsgfVxuXG4gIC8vIENyZWF0ZSB0aGUgbmV3IGZ1bmN0aW9uIHRoYXQgY2hhbmdlcyB0aGUgY29udGV4dFxuICBsZXQgcmV0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQWxsb3cgZm9yIHRoZSBhYmlsaXR5IHRvIGluZGl2aWR1YWxpemUgdGhpcyBmdW5jdGlvblxuICAvLyBOZWVkZWQgaW4gdGhlIGNhc2Ugd2hlcmUgbXVsdGlwbGUgb2JqZWN0cyBtaWdodCBzaGFyZSB0aGUgc2FtZSBwcm90b3R5cGVcbiAgLy8gSUYgYm90aCBpdGVtcyBhZGQgYW4gZXZlbnQgbGlzdGVuZXIgd2l0aCB0aGUgc2FtZSBmdW5jdGlvbiwgdGhlbiB5b3UgdHJ5IHRvIHJlbW92ZSBqdXN0IG9uZVxuICAvLyBpdCB3aWxsIHJlbW92ZSBib3RoIGJlY2F1c2UgdGhleSBib3RoIGhhdmUgdGhlIHNhbWUgZ3VpZC5cbiAgLy8gd2hlbiB1c2luZyB0aGlzLCB5b3UgbmVlZCB0byB1c2UgdGhlIGJpbmQgbWV0aG9kIHdoZW4geW91IHJlbW92ZSB0aGUgbGlzdGVuZXIgYXMgd2VsbC5cbiAgLy8gY3VycmVudGx5IHVzZWQgaW4gdGV4dCB0cmFja3NcbiAgcmV0Lmd1aWQgPSAodWlkKSA/IHVpZCArICdfJyArIGZuLmd1aWQgOiBmbi5ndWlkO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIEVsZW1lbnQgRGF0YSBTdG9yZS4gQWxsb3dzIGZvciBiaW5kaW5nIGRhdGEgdG8gYW4gZWxlbWVudCB3aXRob3V0IHB1dHRpbmcgaXQgZGlyZWN0bHkgb24gdGhlIGVsZW1lbnQuXG4gKiBFeC4gRXZlbnQgbGlzdGVuZXJzIGFyZSBzdG9yZWQgaGVyZS5cbiAqIChhbHNvIGZyb20ganNuaW5qYS5jb20sIHNsaWdodGx5IG1vZGlmaWVkIGFuZCB1cGRhdGVkIGZvciBjbG9zdXJlIGNvbXBpbGVyKVxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjYWNoZSA9IHt9O1xuXG4vKipcbiAqIFVuaXF1ZSBJRCBmb3IgYW4gZWxlbWVudCBvciBmdW5jdGlvblxuICogQHR5cGUge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBndWlkID0gMTtcblxuLyoqXG4gKiBVbmlxdWUgYXR0cmlidXRlIG5hbWUgdG8gc3RvcmUgYW4gZWxlbWVudCdzIGd1aWQgaW5cbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleHBhbmRvID0gJ3ZkYXRhJyArIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY2FjaGUgb2JqZWN0IHdoZXJlIGRhdGEgZm9yIGFuIGVsZW1lbnQgaXMgc3RvcmVkXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCBFbGVtZW50IHRvIHN0b3JlIGRhdGEgZm9yLlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGdldERhdGEgPSBmdW5jdGlvbihlbCl7XG4gIHZhciBpZCA9IGVsW2V4cGFuZG9dO1xuICBpZiAoIWlkKSB7XG4gICAgaWQgPSBlbFtleHBhbmRvXSA9IGd1aWQrKztcbiAgfVxuICBpZiAoIWNhY2hlW2lkXSkge1xuICAgIGNhY2hlW2lkXSA9IHt9O1xuICB9XG4gIHJldHVybiBjYWNoZVtpZF07XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNhY2hlIG9iamVjdCB3aGVyZSBkYXRhIGZvciBhbiBlbGVtZW50IGlzIHN0b3JlZFxuICogQHBhcmFtICB7RWxlbWVudH0gZWwgRWxlbWVudCB0byBzdG9yZSBkYXRhIGZvci5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBoYXNEYXRhID0gZnVuY3Rpb24oZWwpe1xuICB2YXIgaWQgPSBlbFtleHBhbmRvXTtcbiAgcmV0dXJuICEoIWlkIHx8IGlzRW1wdHkoY2FjaGVbaWRdKSk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBkYXRhIGZvciB0aGUgZWxlbWVudCBmcm9tIHRoZSBjYWNoZSBhbmQgdGhlIGd1aWQgYXR0ciBmcm9tIGdldEVsZW1lbnRCeUlkXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCBSZW1vdmUgZGF0YSBmb3IgYW4gZWxlbWVudFxuICogQHByaXZhdGVcbiAqL1xudmFyIHJlbW92ZURhdGEgPSBmdW5jdGlvbihlbCl7XG4gIHZhciBpZCA9IGVsW2V4cGFuZG9dO1xuICBpZiAoIWlkKSB7IHJldHVybjsgfVxuICAvLyBSZW1vdmUgYWxsIHN0b3JlZCBkYXRhXG4gIC8vIENoYW5nZWQgdG8gPSBudWxsXG4gIC8vIGh0dHA6Ly9jb2Rpbmcuc21hc2hpbmdtYWdhemluZS5jb20vMjAxMi8xMS8wNS93cml0aW5nLWZhc3QtbWVtb3J5LWVmZmljaWVudC1qYXZhc2NyaXB0L1xuICAvLyBjYWNoZVtpZF0gPSBudWxsO1xuICBkZWxldGUgY2FjaGVbaWRdO1xuXG4gIC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBwcm9wZXJ0eSBmcm9tIHRoZSBET00gbm9kZVxuICB0cnkge1xuICAgIGRlbGV0ZSBlbFtleHBhbmRvXTtcbiAgfSBjYXRjaChlKSB7XG4gICAgaWYgKGVsLnJlbW92ZUF0dHJpYnV0ZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGV4cGFuZG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IGFwcGVhciB0byBzdXBwb3J0IHJlbW92ZUF0dHJpYnV0ZSBvbiB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICAgICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgZW1wdHlcbiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBUaGUgb2JqZWN0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgIC8vIElubHVkZSBudWxsIHByb3BlcnRpZXMgYXMgZW1wdHkuXG4gICAgaWYgKG9ialtwcm9wXSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gZWxlbWVudCBoYXMgYSBDU1MgY2xhc3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0NoZWNrIENsYXNzbmFtZSB0byBjaGVja1xuICogQHByaXZhdGVcbiAqL1xudmFyIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NUb0NoZWNrKXtcbiAgcmV0dXJuICgoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xhc3NUb0NoZWNrICsgJyAnKSAhPT0gLTEpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBDU1MgY2xhc3MgbmFtZSB0byBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgICAgRWxlbWVudCB0byBhZGQgY2xhc3MgbmFtZSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9BZGQgQ2xhc3NuYW1lIHRvIGFkZFxuICogQHByaXZhdGVcbiAqL1xudmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NUb0FkZCl7XG4gIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NUb0FkZCkpIHtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lID09PSAnJyA/IGNsYXNzVG9BZGQgOiBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzVG9BZGQ7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgQ1NTIGNsYXNzIG5hbWUgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgICAgRWxlbWVudCB0byByZW1vdmUgZnJvbSBjbGFzcyBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0FkZCBDbGFzc25hbWUgdG8gcmVtb3ZlXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LCBjbGFzc1RvUmVtb3ZlKXtcbiAgaWYgKCFoYXNDbGFzcyhlbGVtZW50LCBjbGFzc1RvUmVtb3ZlKSkge3JldHVybjt9XG5cbiAgbGV0IGNsYXNzTmFtZXMgPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXG4gIC8vIG5vIGFyci5pbmRleE9mIGluIGllOCwgYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGEgYmlnIHNoaW1cbiAgZm9yIChsZXQgaSA9IGNsYXNzTmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoY2xhc3NOYW1lc1tpXSA9PT0gY2xhc3NUb1JlbW92ZSkge1xuICAgICAgY2xhc3NOYW1lcy5zcGxpY2UoaSwxKTtcbiAgICB9XG4gIH1cblxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMuam9pbignICcpO1xufTtcblxuLyoqXG4gKiBFbGVtZW50IGZvciB0ZXN0aW5nIGJyb3dzZXIgSFRNTDUgdmlkZW8gY2FwYWJpbGl0aWVzXG4gKiBAdHlwZSB7RWxlbWVudH1cbiAqIEBjb25zdGFudFxuICogQHByaXZhdGVcbiAqL1xudmFyIFRFU1RfVklEID0gY3JlYXRlRWwoJ3ZpZGVvJyk7XG5sZXQgdHJhY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cmFjaycpO1xudHJhY2sua2luZCA9ICdjYXB0aW9ucyc7XG50cmFjay5zcmNsYW5nID0gJ2VuJztcbnRyYWNrLmxhYmVsID0gJ0VuZ2xpc2gnO1xuVEVTVF9WSUQuYXBwZW5kQ2hpbGQodHJhY2spO1xuXG4vKipcbiAqIFVzZXJhZ2VudCBmb3IgYnJvd3NlciB0ZXN0aW5nLlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBjb25zdGFudFxuICogQHByaXZhdGVcbiAqL1xudmFyIFVTRVJfQUdFTlQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuXG4vKipcbiAqIERldmljZSBpcyBhbiBpUGhvbmVcbiAqIEB0eXBlIHtCb29sZWFufVxuICogQGNvbnN0YW50XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSVNfSVBIT05FID0gKC9pUGhvbmUvaSkudGVzdChVU0VSX0FHRU5UKTtcbnZhciBJU19JUEFEID0gKC9pUGFkL2kpLnRlc3QoVVNFUl9BR0VOVCk7XG52YXIgSVNfSVBPRCA9ICgvaVBvZC9pKS50ZXN0KFVTRVJfQUdFTlQpO1xudmFyIElTX0lPUyA9IElTX0lQSE9ORSB8fCBJU19JUEFEIHx8IElTX0lQT0Q7XG5cbnZhciBJT1NfVkVSU0lPTiA9IChmdW5jdGlvbigpe1xuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9PUyAoXFxkKylfL2kpO1xuICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHsgcmV0dXJuIG1hdGNoWzFdOyB9XG59KSgpO1xuXG52YXIgSVNfQU5EUk9JRCA9ICgvQW5kcm9pZC9pKS50ZXN0KFVTRVJfQUdFTlQpO1xudmFyIEFORFJPSURfVkVSU0lPTiA9IChmdW5jdGlvbigpIHtcbiAgLy8gVGhpcyBtYXRjaGVzIEFuZHJvaWQgTWFqb3IuTWlub3IuUGF0Y2ggdmVyc2lvbnNcbiAgLy8gQU5EUk9JRF9WRVJTSU9OIGlzIE1ham9yLk1pbm9yIGFzIGEgTnVtYmVyLCBpZiBNaW5vciBpc24ndCBhdmFpbGFibGUsIHRoZW4gb25seSBNYWpvciBpcyByZXR1cm5lZFxuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9BbmRyb2lkIChcXGQrKSg/OlxcLihcXGQrKSk/KD86XFwuKFxcZCspKSovaSksXG4gICAgbWFqb3IsXG4gICAgbWlub3I7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbWFqb3IgPSBtYXRjaFsxXSAmJiBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgbWlub3IgPSBtYXRjaFsyXSAmJiBwYXJzZUZsb2F0KG1hdGNoWzJdKTtcblxuICBpZiAobWFqb3IgJiYgbWlub3IpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaFsxXSArICcuJyArIG1hdGNoWzJdKTtcbiAgfSBlbHNlIGlmIChtYWpvcikge1xuICAgIHJldHVybiBtYWpvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSkoKTtcbi8vIE9sZCBBbmRyb2lkIGlzIGRlZmluZWQgYXMgVmVyc2lvbiBvbGRlciB0aGFuIDIuMywgYW5kIHJlcXVpcmluZyBhIHdlYmtpdCB2ZXJzaW9uIG9mIHRoZSBhbmRyb2lkIGJyb3dzZXJcbnZhciBJU19PTERfQU5EUk9JRCA9IElTX0FORFJPSUQgJiYgKC93ZWJraXQvaSkudGVzdChVU0VSX0FHRU5UKSAmJiBBTkRST0lEX1ZFUlNJT04gPCAyLjM7XG5cbnZhciBJU19GSVJFRk9YID0gKC9GaXJlZm94L2kpLnRlc3QoVVNFUl9BR0VOVCk7XG52YXIgSVNfQ0hST01FID0gKC9DaHJvbWUvaSkudGVzdChVU0VSX0FHRU5UKTtcbnZhciBJU19JRTggPSAoL01TSUVcXHM4XFwuMC8pLnRlc3QoVVNFUl9BR0VOVCk7XG5cbnZhciBUT1VDSF9FTkFCTEVEID0gISEoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCk7XG52YXIgQkFDS0dST1VORF9TSVpFX1NVUFBPUlRFRCA9ICdiYWNrZ3JvdW5kU2l6ZScgaW4gVEVTVF9WSUQuc3R5bGU7XG5cbi8qKlxuICogQXBwbHkgYXR0cmlidXRlcyB0byBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCAgICAgICAgIFRhcmdldCBlbGVtZW50LlxuICogQHBhcmFtICB7T2JqZWN0PX0gYXR0cmlidXRlcyBFbGVtZW50IGF0dHJpYnV0ZXMgdG8gYmUgYXBwbGllZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBzZXRFbGVtZW50QXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsLCBhdHRyaWJ1dGVzKXtcbiAgb2JqLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24oYXR0ck5hbWUsIGF0dHJWYWx1ZSkge1xuICAgIGlmIChhdHRyVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGF0dHJWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXR0clZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCAoYXR0clZhbHVlID09PSB0cnVlID8gJycgOiBhdHRyVmFsdWUpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZXMsIGFzIGRlZmluZWQgb24gdGhlIEhUTUwgdGFnXG4gKiBBdHRyaWJ1dGVzIGFyZSBub3QgdGhlIHNhbWUgYXMgcHJvcGVydGllcy4gVGhleSdyZSBkZWZpbmVkIG9uIHRoZSB0YWdcbiAqIG9yIHdpdGggc2V0QXR0cmlidXRlICh3aGljaCBzaG91bGRuJ3QgYmUgdXNlZCB3aXRoIEhUTUwpXG4gKiBUaGlzIHdpbGwgcmV0dXJuIHRydWUgb3IgZmFsc2UgZm9yIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAqIEBwYXJhbSAge0VsZW1lbnR9IHRhZyBFbGVtZW50IGZyb20gd2hpY2ggdG8gZ2V0IHRhZyBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0RWxlbWVudEF0dHJpYnV0ZXMgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgb2JqLCBrbm93bkJvb2xlYW5zLCBhdHRycywgYXR0ck5hbWUsIGF0dHJWYWw7XG5cbiAgb2JqID0ge307XG5cbiAgLy8ga25vd24gYm9vbGVhbiBhdHRyaWJ1dGVzXG4gIC8vIHdlIGNhbiBjaGVjayBmb3IgbWF0Y2hpbmcgYm9vbGVhbiBwcm9wZXJ0aWVzLCBidXQgb2xkZXIgYnJvd3NlcnNcbiAgLy8gd29uJ3Qga25vdyBhYm91dCBIVE1MNSBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdCB3ZSBzdGlsbCByZWFkIGZyb21cbiAga25vd25Cb29sZWFucyA9ICcsJysnYXV0b3BsYXksY29udHJvbHMsbG9vcCxtdXRlZCxkZWZhdWx0JysnLCc7XG5cbiAgaWYgKHRhZyAmJiB0YWcuYXR0cmlidXRlcyAmJiB0YWcuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XG4gICAgYXR0cnMgPSB0YWcuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGkgPSBhdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYXR0ck5hbWUgPSBhdHRyc1tpXS5uYW1lO1xuICAgICAgYXR0clZhbCA9IGF0dHJzW2ldLnZhbHVlO1xuXG4gICAgICAvLyBjaGVjayBmb3Iga25vd24gYm9vbGVhbnNcbiAgICAgIC8vIHRoZSBtYXRjaGluZyBlbGVtZW50IHByb3BlcnR5IHdpbGwgcmV0dXJuIGEgdmFsdWUgZm9yIHR5cGVvZlxuICAgICAgaWYgKHR5cGVvZiB0YWdbYXR0ck5hbWVdID09PSAnYm9vbGVhbicgfHwga25vd25Cb29sZWFucy5pbmRleE9mKCcsJythdHRyTmFtZSsnLCcpICE9PSAtMSkge1xuICAgICAgICAvLyB0aGUgdmFsdWUgb2YgYW4gaW5jbHVkZWQgYm9vbGVhbiBhdHRyaWJ1dGUgaXMgdHlwaWNhbGx5IGFuIGVtcHR5XG4gICAgICAgIC8vIHN0cmluZyAoJycpIHdoaWNoIHdvdWxkIGVxdWFsIGZhbHNlIGlmIHdlIGp1c3QgY2hlY2sgZm9yIGEgZmFsc2UgdmFsdWUuXG4gICAgICAgIC8vIHdlIGFsc28gZG9uJ3Qgd2FudCBzdXBwb3J0IGJhZCBjb2RlIGxpa2UgYXV0b3BsYXk9J2ZhbHNlJ1xuICAgICAgICBhdHRyVmFsID0gKGF0dHJWYWwgIT09IG51bGwpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBvYmpbYXR0ck5hbWVdID0gYXR0clZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNvbXB1dGVkIHN0eWxlIHZhbHVlIGZvciBhbiBlbGVtZW50XG4gKiBGcm9tIGh0dHA6Ly9yb2JlcnRueW1hbi5jb20vMjAwNi8wNC8yNC9nZXQtdGhlLXJlbmRlcmVkLXN0eWxlLW9mLWFuLWVsZW1lbnQvXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCAgICAgICAgRWxlbWVudCB0byBnZXQgc3R5bGUgdmFsdWUgZm9yXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ckNzc1J1bGUgU3R5bGUgbmFtZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgIFN0eWxlIHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0Q29tcHV0ZWREaW1lbnNpb24gPSBmdW5jdGlvbihlbCwgc3RyQ3NzUnVsZSl7XG4gIHZhciBzdHJWYWx1ZSA9ICcnO1xuICBpZihkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKXtcbiAgICBzdHJWYWx1ZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKHN0ckNzc1J1bGUpO1xuXG4gIH0gZWxzZSBpZihlbC5jdXJyZW50U3R5bGUpe1xuICAgIC8vIElFOCBXaWR0aC9IZWlnaHQgc3VwcG9ydFxuICAgIGxldCB1cHBlckNhc2VkUnVsZSA9IHN0ckNzc1J1bGUuc3Vic3RyKDAsMSkudG9VcHBlckNhc2UoKSArIHN0ckNzc1J1bGUuc3Vic3RyKDEpO1xuICAgIHN0clZhbHVlID0gZWxbYGNsaWVudCR7dXBwZXJDYXNlZFJ1bGV9YF0gKyAncHgnO1xuICB9XG4gIHJldHVybiBzdHJWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5zZXJ0IGFuIGVsZW1lbnQgYXMgdGhlIGZpcnN0IGNoaWxkIG5vZGUgb2YgYW5vdGhlclxuICogQHBhcmFtICB7RWxlbWVudH0gY2hpbGQgICBFbGVtZW50IHRvIGluc2VydFxuICogQHBhcmFtICB7W3R5cGVdfSBwYXJlbnQgRWxlbWVudCB0byBpbnNlcnQgY2hpbGQgaW50b1xuICogQHByaXZhdGVcbiAqL1xudmFyIGluc2VydEZpcnN0ID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCl7XG4gIGlmIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHBhcmVudC5maXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9XG59O1xuXG4vKipcbiAqIE9iamVjdCB0byBob2xkIGJyb3dzZXIgc3VwcG9ydCBpbmZvcm1hdGlvblxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBicm93c2VyID0ge307XG5cbi8qKlxuICogU2hvcnRoYW5kIGZvciBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgpXG4gKiBBbHNvIGFsbG93cyBmb3IgQ1NTIChqUXVlcnkpIElEIHN5bnRheC4gQnV0IG5vdGhpbmcgb3RoZXIgdGhhbiBJRHMuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGlkICBFbGVtZW50IElEXG4gKiBAcmV0dXJuIHtFbGVtZW50fSAgICBFbGVtZW50IHdpdGggc3VwcGxpZWQgSURcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBlbCA9IGZ1bmN0aW9uKGlkKXtcbiAgaWYgKGlkLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIGlkID0gaWQuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXQgc2Vjb25kcyBhcyBhIHRpbWUgc3RyaW5nLCBIOk1NOlNTIG9yIE06U1NcbiAqIFN1cHBseWluZyBhIGd1aWRlIChpbiBzZWNvbmRzKSB3aWxsIGZvcmNlIGEgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3NcbiAqIHRvIGNvdmVyIHRoZSBsZW5ndGggb2YgdGhlIGd1aWRlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNlY29uZHMgTnVtYmVyIG9mIHNlY29uZHMgdG8gYmUgdHVybmVkIGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gZ3VpZGUgICBOdW1iZXIgKGluIHNlY29uZHMpIHRvIG1vZGVsIHRoZSBzdHJpbmcgYWZ0ZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICBUaW1lIGZvcm1hdHRlZCBhcyBIOk1NOlNTIG9yIE06U1NcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBmb3JtYXRUaW1lID0gZnVuY3Rpb24oc2Vjb25kcywgZ3VpZGU9c2Vjb25kcykge1xuICBsZXQgcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKTtcbiAgbGV0IG0gPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCAlIDYwKTtcbiAgbGV0IGggPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcbiAgY29uc3QgZ20gPSBNYXRoLmZsb29yKGd1aWRlIC8gNjAgJSA2MCk7XG4gIGNvbnN0IGdoID0gTWF0aC5mbG9vcihndWlkZSAvIDM2MDApO1xuXG4gIC8vIGhhbmRsZSBpbnZhbGlkIHRpbWVzXG4gIGlmIChpc05hTihzZWNvbmRzKSB8fCBzZWNvbmRzID09PSBJbmZpbml0eSkge1xuICAgIC8vICctJyBpcyBmYWxzZSBmb3IgYWxsIHJlbGF0aW9uYWwgb3BlcmF0b3JzIChlLmcuIDwsID49KSBzbyB0aGlzIHNldHRpbmdcbiAgICAvLyB3aWxsIGFkZCB0aGUgbWluaW11bSBudW1iZXIgb2YgZmllbGRzIHNwZWNpZmllZCBieSB0aGUgZ3VpZGVcbiAgICBoID0gbSA9IHMgPSAnLSc7XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHNob3cgaG91cnNcbiAgaCA9IChoID4gMCB8fCBnaCA+IDApID8gaCArICc6JyA6ICcnO1xuXG4gIC8vIElmIGhvdXJzIGFyZSBzaG93aW5nLCB3ZSBtYXkgbmVlZCB0byBhZGQgYSBsZWFkaW5nIHplcm8uXG4gIC8vIEFsd2F5cyBzaG93IGF0IGxlYXN0IG9uZSBkaWdpdCBvZiBtaW51dGVzLlxuICBtID0gKCgoaCB8fCBnbSA+PSAxMCkgJiYgbSA8IDEwKSA/ICcwJyArIG0gOiBtKSArICc6JztcblxuICAvLyBDaGVjayBpZiBsZWFkaW5nIHplcm8gaXMgbmVlZCBmb3Igc2Vjb25kc1xuICBzID0gKHMgPCAxMCkgPyAnMCcgKyBzIDogcztcblxuICByZXR1cm4gaCArIG0gKyBzO1xufTtcblxuLy8gQXR0ZW1wdCB0byBibG9jayB0aGUgYWJpbGl0eSB0byBzZWxlY3QgdGV4dCB3aGlsZSBkcmFnZ2luZyBjb250cm9sc1xudmFyIGJsb2NrVGV4dFNlbGVjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xufTtcbi8vIFR1cm4gb2ZmIHRleHQgc2VsZWN0aW9uIGJsb2NraW5nXG52YXIgdW5ibG9ja1RleHRTZWxlY3Rpb24gPSBmdW5jdGlvbigpeyBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTsgfTtcblxuLyoqXG4gKiBUcmltIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kcyBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICBUcmltbWVkIHN0cmluZ1xuICogQHByaXZhdGVcbiAqL1xudmFyIHRyaW0gPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gKHN0cisnJykucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgcm91bmQgb2ZmIGEgbnVtYmVyIHRvIGEgZGVjaW1hbCBwbGFjZVxuICogQHBhcmFtICB7TnVtYmVyfSBudW0gTnVtYmVyIHRvIHJvdW5kXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlYyBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdG9cbiAqIEByZXR1cm4ge051bWJlcn0gICAgIFJvdW5kZWQgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcm91bmQgPSBmdW5jdGlvbihudW0sIGRlYz0wKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSpNYXRoLnBvdygxMCxkZWMpKS9NYXRoLnBvdygxMCxkZWMpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgY3JlYXRlIGEgZmFrZSBUaW1lUmFuZ2Ugb2JqZWN0XG4gKiBNaW1pY3MgYW4gSFRNTDUgdGltZSByYW5nZSBpbnN0YW5jZSwgd2hpY2ggaGFzIGZ1bmN0aW9ucyB0aGF0XG4gKiByZXR1cm4gdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMgZm9yIGEgcmFuZ2VcbiAqIFRpbWVSYW5nZXMgYXJlIHJldHVybmVkIGJ5IHRoZSBidWZmZXJlZCgpIG1ldGhvZFxuICogQHBhcmFtICB7TnVtYmVyfSBzdGFydCBTdGFydCB0aW1lIGluIHNlY29uZHNcbiAqIEBwYXJhbSAge051bWJlcn0gZW5kICAgRW5kIHRpbWUgaW4gc2Vjb25kc1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICBGYWtlIFRpbWVSYW5nZSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjcmVhdGVUaW1lUmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKXtcbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IDEsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RhcnQ7IH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHsgcmV0dXJuIGVuZDsgfVxuICB9O1xufTtcblxuLyoqXG4gKiBBZGQgdG8gbG9jYWwgc3RvcmFnZSAobWF5YmUgcmVtb3ZhYmxlKVxuICogQHByaXZhdGVcbiAqL1xudmFyIHNldExvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICB0cnkge1xuICAgIC8vIElFIHdhcyB0aHJvd2luZyBlcnJvcnMgcmVmZXJlbmNpbmcgdGhlIHZhciBhbnl3aGVyZSB3aXRob3V0IHRoaXNcbiAgICBsZXQgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZSB8fCBmYWxzZTtcbiAgICBpZiAoIWxvY2FsU3RvcmFnZSkgeyByZXR1cm47IH1cbiAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9IGNhdGNoKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAyMiB8fCBlLmNvZGUgPT09IDEwMTQpIHsgLy8gV2Via2l0ID09IDIyIC8gRmlyZWZveCA9PSAxMDE0XG4gICAgICBsb2coJ0xvY2FsU3RvcmFnZSBGdWxsIChWaWRlb0pTKScsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZS5jb2RlID09PSAxOCkge1xuICAgICAgICBsb2coJ0xvY2FsU3RvcmFnZSBub3QgYWxsb3dlZCAoVmlkZW9KUyknLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnTG9jYWxTdG9yYWdlIEVycm9yIChWaWRlb0pTKScsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYWJzb2x1dGUgdmVyc2lvbiBvZiByZWxhdGl2ZSBVUkwuIFVzZWQgdG8gdGVsbCBmbGFzaCBjb3JyZWN0IFVSTC5cbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDcwODMyL2dldHRpbmctYW4tYWJzb2x1dGUtdXJsLWZyb20tYS1yZWxhdGl2ZS1vbmUtaWU2LWlzc3VlXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVybCBVUkwgdG8gbWFrZSBhYnNvbHV0ZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgQWJzb2x1dGUgVVJMXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0QWJzb2x1dGVVUkwgPSBmdW5jdGlvbih1cmwpe1xuICAvLyBDaGVjayBpZiBhYnNvbHV0ZSBVUkxcbiAgaWYgKCF1cmwubWF0Y2goL15odHRwcz86XFwvXFwvLykpIHtcbiAgICAvLyBDb252ZXJ0IHRvIGFic29sdXRlIFVSTC4gRmxhc2ggaG9zdGVkIG9mZi1zaXRlIG5lZWRzIGFuIGFic29sdXRlIFVSTC5cbiAgICB1cmwgPSBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgaW5uZXJIVE1MOiBgPGEgaHJlZj1cIiR7dXJsfVwiPng8L2E+YFxuICAgIH0pLmZpcnN0Q2hpbGQuaHJlZjtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgYW5kIHBhcnNlIHRoZSBlbGVtZW50cyBvZiBhIFVSTFxuICogQHBhcmFtICB7U3RyaW5nfSB1cmwgVGhlIHVybCB0byBwYXJzZVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgQW4gb2JqZWN0IG9mIHVybCBkZXRhaWxzXG4gKi9cbnZhciBwYXJzZVVybCA9IGZ1bmN0aW9uKHVybCkge1xuICBjb25zdCBwcm9wcyA9IFsncHJvdG9jb2wnLCAnaG9zdG5hbWUnLCAncG9ydCcsICdwYXRobmFtZScsICdzZWFyY2gnLCAnaGFzaCcsICdob3N0J107XG5cbiAgLy8gYWRkIHRoZSB1cmwgdG8gYW4gYW5jaG9yIGFuZCBsZXQgdGhlIGJyb3dzZXIgcGFyc2UgdGhlIFVSTFxuICBsZXQgYSA9IGNyZWF0ZUVsKCdhJywgeyBocmVmOiB1cmwgfSk7XG5cbiAgLy8gSUU4IChhbmQgOT8pIEZpeFxuICAvLyBpZTggZG9lc24ndCBwYXJzZSB0aGUgVVJMIGNvcnJlY3RseSB1bnRpbCB0aGUgYW5jaG9yIGlzIGFjdHVhbGx5XG4gIC8vIGFkZGVkIHRvIHRoZSBib2R5LCBhbmQgYW4gaW5uZXJIVE1MIGlzIG5lZWRlZCB0byB0cmlnZ2VyIHRoZSBwYXJzaW5nXG4gIGxldCBhZGRUb0JvZHkgPSAoYS5ob3N0ID09PSAnJyAmJiBhLnByb3RvY29sICE9PSAnZmlsZTonKTtcbiAgbGV0IGRpdjtcbiAgaWYgKGFkZFRvQm9keSkge1xuICAgIGRpdiA9IGNyZWF0ZUVsKCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gYDxhIGhyZWY9XCIke3VybH1cIj48L2E+YDtcbiAgICBhID0gZGl2LmZpcnN0Q2hpbGQ7XG4gICAgLy8gcHJldmVudCB0aGUgZGl2IGZyb20gYWZmZWN0aW5nIGxheW91dFxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICB9XG5cbiAgLy8gQ29weSB0aGUgc3BlY2lmaWMgVVJMIHByb3BlcnRpZXMgdG8gYSBuZXcgb2JqZWN0XG4gIC8vIFRoaXMgaXMgYWxzbyBuZWVkZWQgZm9yIElFOCBiZWNhdXNlIHRoZSBhbmNob3IgbG9zZXMgaXRzXG4gIC8vIHByb3BlcnRpZXMgd2hlbiBpdCdzIHJlbW92ZWQgZnJvbSB0aGUgZG9tXG4gIGxldCBkZXRhaWxzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBkZXRhaWxzW3Byb3BzW2ldXSA9IGFbcHJvcHNbaV1dO1xuICB9XG5cbiAgLy8gSUU5IGFkZHMgdGhlIHBvcnQgdG8gdGhlIGhvc3QgcHJvcGVydHkgdW5saWtlIGV2ZXJ5b25lIGVsc2UuIElmXG4gIC8vIGEgcG9ydCBpZGVudGlmaWVyIGlzIGFkZGVkIGZvciBzdGFuZGFyZCBwb3J0cywgc3RyaXAgaXQuXG4gIGlmIChkZXRhaWxzLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgZGV0YWlscy5ob3N0ID0gZGV0YWlscy5ob3N0LnJlcGxhY2UoLzo4MCQvLCAnJyk7XG4gIH1cbiAgaWYgKGRldGFpbHMucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgZGV0YWlscy5ob3N0ID0gZGV0YWlscy5ob3N0LnJlcGxhY2UoLzo0NDMkLywgJycpO1xuICB9XG5cbiAgaWYgKGFkZFRvQm9keSkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgfVxuXG4gIHJldHVybiBkZXRhaWxzO1xufTtcblxuLyoqXG4gKiBMb2cgbWVzc2FnZXMgdG8gdGhlIGNvbnNvbGUgYW5kIGhpc3RvcnkgYmFzZWQgb24gdGhlIHR5cGUgb2YgbWVzc2FnZVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBtZXNzYWdlLCBvciBgbnVsbGAgZm9yIGBsb2dgXG4gKiBAcGFyYW0gIHtbdHlwZV19IGFyZ3MgVGhlIGFyZ3MgdG8gYmUgcGFzc2VkIHRvIHRoZSBsb2dcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9sb2dUeXBlKHR5cGUsIGFyZ3Mpe1xuICAvLyBjb252ZXJ0IGFyZ3MgdG8gYW4gYXJyYXkgdG8gZ2V0IGFycmF5IGZ1bmN0aW9uc1xuICBsZXQgYXJnc0FycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gIC8vIGlmIHRoZXJlJ3Mgbm8gY29uc29sZSB0aGVuIGRvbid0IHRyeSB0byBvdXRwdXQgbWVzc2FnZXNcbiAgLy8gdGhleSB3aWxsIHN0aWxsIGJlIHN0b3JlZCBpbiBMaWIubG9nLmhpc3RvcnlcbiAgLy8gV2FzIHNldHRpbmcgdGhlc2Ugb25jZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24sIGJ1dCBjb250YWluaW5nIHRoZW1cbiAgLy8gaW4gdGhlIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc2llciB0byB0ZXN0IGNhc2VzIHdoZXJlIGNvbnNvbGUgZG9lc24ndCBleGlzdFxuICBsZXQgbm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICBsZXQgY29uc29sZSA9IHdpbmRvd1snY29uc29sZSddIHx8IHtcbiAgICAnbG9nJzogbm9vcCxcbiAgICAnd2Fybic6IG5vb3AsXG4gICAgJ2Vycm9yJzogbm9vcFxuICB9O1xuXG4gIGlmICh0eXBlKSB7XG4gICAgLy8gYWRkIHRoZSB0eXBlIHRvIHRoZSBmcm9udCBvZiB0aGUgbWVzc2FnZVxuICAgIGFyZ3NBcnJheS51bnNoaWZ0KHR5cGUudG9VcHBlckNhc2UoKSsnOicpO1xuICB9IGVsc2Uge1xuICAgIC8vIGRlZmF1bHQgdG8gbG9nIHdpdGggbm8gcHJlZml4XG4gICAgdHlwZSA9ICdsb2cnO1xuICB9XG5cbiAgLy8gYWRkIHRvIGhpc3RvcnlcbiAgbG9nLmhpc3RvcnkucHVzaChhcmdzQXJyYXkpO1xuXG4gIC8vIGFkZCBjb25zb2xlIHByZWZpeCBhZnRlciBhZGRpbmcgdG8gaGlzdG9yeVxuICBhcmdzQXJyYXkudW5zaGlmdCgnVklERU9KUzonKTtcblxuICAvLyBjYWxsIGFwcHJvcHJpYXRlIGxvZyBmdW5jdGlvblxuICBpZiAoY29uc29sZVt0eXBlXS5hcHBseSkge1xuICAgIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJnc0FycmF5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZTggZG9lc24ndCBhbGxvdyBlcnJvci5hcHBseSwgYnV0IGl0IHdpbGwganVzdCBqb2luKCkgdGhlIGFycmF5IGFueXdheVxuICAgIGNvbnNvbGVbdHlwZV0oYXJnc0FycmF5LmpvaW4oJyAnKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBMb2cgcGxhaW4gZGVidWcgbWVzc2FnZXNcbiAqL1xudmFyIGxvZyA9IGZ1bmN0aW9uKCl7XG4gIF9sb2dUeXBlKG51bGwsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIEtlZXAgYSBoaXN0b3J5IG9mIGxvZyBtZXNzYWdlc1xuICogQHR5cGUge0FycmF5fVxuICovXG5sb2cuaGlzdG9yeSA9IFtdO1xuXG4vKipcbiAqIExvZyBlcnJvciBtZXNzYWdlc1xuICovXG5sb2cuZXJyb3IgPSBmdW5jdGlvbigpe1xuICBfbG9nVHlwZSgnZXJyb3InLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBMb2cgd2FybmluZyBtZXNzYWdlc1xuICovXG5sb2cud2FybiA9IGZ1bmN0aW9uKCl7XG4gIF9sb2dUeXBlKCd3YXJuJywgYXJndW1lbnRzKTtcbn07XG5cbi8vIE9mZnNldCBMZWZ0XG4vLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgdGVjaG5pcXVlIGZyb20gSm9obiBSZXNpZyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvZ2V0Ym91bmRpbmdjbGllbnRyZWN0LWlzLWF3ZXNvbWUvXG52YXIgZmluZFBvc2l0aW9uID0gZnVuY3Rpb24oZWwpIHtcbiAgbGV0IGJveDtcblxuICBpZiAoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuXG4gIGlmICghYm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG4gIGNvbnN0IGNsaWVudExlZnQgPSBkb2NFbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGJvZHkuc2Nyb2xsTGVmdDtcbiAgY29uc3QgbGVmdCA9IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnQ7XG5cbiAgY29uc3QgY2xpZW50VG9wID0gZG9jRWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBib2R5LnNjcm9sbFRvcDtcbiAgY29uc3QgdG9wID0gYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcDtcblxuICAvLyBBbmRyb2lkIHNvbWV0aW1lcyByZXR1cm5zIHNsaWdodGx5IG9mZiBkZWNpbWFsIHZhbHVlcywgc28gbmVlZCB0byByb3VuZFxuICByZXR1cm4ge1xuICAgIGxlZnQ6IHJvdW5kKGxlZnQpLFxuICAgIHRvcDogcm91bmQodG9wKVxuICB9O1xufTtcblxuLyoqXG4gKiBBcnJheSBmdW5jdGlvbnMgY29udGFpbmVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGFyciA9IHt9O1xuXG4vKlxuICogTG9vcHMgdGhyb3VnaCBhbiBhcnJheSBhbmQgcnVucyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0gaW5zaWRlIGl0LlxuICogQHBhcmFtICB7QXJyYXl9ICAgIGFycmF5ICAgICAgIFRoZSBhcnJheVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgIFRoZSBmdW5jdGlvbiB0byBiZSBydW4gZm9yIGVhY2ggaXRlbVxuICogQHBhcmFtICB7Kn0gICAgICAgIHRoaXNBcmcgICAgIFRoZSBgdGhpc2AgYmluZGluZyBvZiBjYWxsYmFja1xuICogQHJldHVybnMge0FycmF5fSAgICAgICAgICAgICAgIFRoZSBhcnJheVxuICogQHByaXZhdGVcbiAqL1xuYXJyLmZvckVhY2ggPSBmdW5jdGlvbihhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgdGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblxuICBpZiAob2JqLmlzQXJyYXkoYXJyYXkpICYmIGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV4dGVuc2lvbiBvZiB0aGUgcGFzc2VkIGZpbGUgbmFtZS4gSXQgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHlvdSBwYXNzIGFuIGludmFsaWQgcGF0aFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSAgICBwYXRoICAgIFRoZSBmaWxlTmFtZSBwYXRoIGxpa2UgJy9wYXRoL3RvL2ZpbGUubXA0J1xuICogQHJldHVybnMge1N0cmluZ30gICAgICAgICAgVGhlIGV4dGVuc2lvbiBpbiBsb3dlciBjYXNlIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBubyBleHRlbnNpb24gY291bGQgYmUgZm91bmQuXG4gKi9cbnZhciBnZXRGaWxlRXh0ZW5zaW9uID0gZnVuY3Rpb24ocGF0aCkge1xuICBpZih0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpe1xuICAgIGxldCBzcGxpdFBhdGhSZSA9IC9eKFxcLz8pKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/KShcXC4oW15cXC5cXC9cXD9dKykpKSg/OltcXC9dKnxbXFw/XS4qKSQvaTtcbiAgICBsZXQgcGF0aFBhcnRzID0gc3BsaXRQYXRoUmUuZXhlYyhwYXRoKTtcblxuICAgIGlmIChwYXRoUGFydHMpIHtcbiAgICAgIHJldHVybiBwYXRoUGFydHMucG9wKCkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnQge1xuICBjcmVhdGVFbCxcbiAgY2FwaXRhbGl6ZSxcbiAgb2JqLFxuICBpc05hTixcbiAgYmluZCxcbiAgY2FjaGUsXG4gIGd1aWQsXG4gIGV4cGFuZG8sXG4gIGdldERhdGEsXG4gIGhhc0RhdGEsXG4gIHJlbW92ZURhdGEsXG4gIGlzRW1wdHksXG4gIGhhc0NsYXNzLFxuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIFRFU1RfVklELFxuICBVU0VSX0FHRU5ULFxuICBJU19JUEhPTkUsXG4gIElTX0lQQUQsXG4gIElTX0lQT0QsXG4gIElTX0lPUyxcbiAgSU9TX1ZFUlNJT04sXG4gIElTX0FORFJPSUQsXG4gIEFORFJPSURfVkVSU0lPTixcbiAgSVNfT0xEX0FORFJPSUQsXG4gIElTX0ZJUkVGT1gsXG4gIElTX0lFOCxcbiAgSVNfQ0hST01FLFxuICBUT1VDSF9FTkFCTEVELFxuICBCQUNLR1JPVU5EX1NJWkVfU1VQUE9SVEVELFxuICBzZXRFbGVtZW50QXR0cmlidXRlcyxcbiAgZ2V0RWxlbWVudEF0dHJpYnV0ZXMsXG4gIGdldENvbXB1dGVkRGltZW5zaW9uLFxuICBpbnNlcnRGaXJzdCxcbiAgYnJvd3NlcixcbiAgZWwsXG4gIGZvcm1hdFRpbWUsXG4gIGJsb2NrVGV4dFNlbGVjdGlvbixcbiAgdW5ibG9ja1RleHRTZWxlY3Rpb24sXG4gIHRyaW0sXG4gIHJvdW5kLFxuICBjcmVhdGVUaW1lUmFuZ2UsXG4gIHNldExvY2FsU3RvcmFnZSxcbiAgZ2V0QWJzb2x1dGVVUkwsXG4gIHBhcnNlVXJsLFxuICBsb2csXG4gIGZpbmRQb3NpdGlvbixcbiAgYXJyLFxuICBnZXRGaWxlRXh0ZW5zaW9uXG59O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbi8qIExvYWRpbmcgU3Bpbm5lclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogTG9hZGluZyBzcGlubmVyIGZvciB3YWl0aW5nIGV2ZW50c1xuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgTG9hZGluZ1NwaW5uZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1sb2FkaW5nLXNwaW5uZXInXG4gICAgfSk7XG4gIH1cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdMb2FkaW5nU3Bpbm5lcicsIExvYWRpbmdTcGlubmVyKTtcbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdTcGlubmVyO1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBDdXN0b20gTWVkaWFFcnJvciB0byBtaW1pYyB0aGUgSFRNTDUgTWVkaWFFcnJvclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIG1lZGlhIGVycm9yIGNvZGVcbiAqL1xubGV0IE1lZGlhRXJyb3IgPSBmdW5jdGlvbihjb2RlKXtcbiAgaWYgKHR5cGVvZiBjb2RlID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZGVmYXVsdCBjb2RlIGlzIHplcm8sIHNvIHRoaXMgaXMgYSBjdXN0b20gZXJyb3JcbiAgICB0aGlzLm1lc3NhZ2UgPSBjb2RlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnb2JqZWN0JykgeyAvLyBvYmplY3RcbiAgICBMaWIub2JqLm1lcmdlKHRoaXMsIGNvZGUpO1xuICB9XG5cbiAgaWYgKCF0aGlzLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBNZWRpYUVycm9yLmRlZmF1bHRNZXNzYWdlc1t0aGlzLmNvZGVdIHx8ICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBlcnJvciBjb2RlIHRoYXQgcmVmZXJzIHR3byBvbmUgb2YgdGhlIGRlZmluZWRcbiAqIE1lZGlhRXJyb3IgdHlwZXNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKi9cbk1lZGlhRXJyb3IucHJvdG90eXBlLmNvZGUgPSAwO1xuXG4vKipcbiAqIEFuIG9wdGlvbmFsIG1lc3NhZ2UgdG8gYmUgc2hvd24gd2l0aCB0aGUgZXJyb3IuXG4gKiBNZXNzYWdlIGlzIG5vdCBwYXJ0IG9mIHRoZSBIVE1MNSB2aWRlbyBzcGVjXG4gKiBidXQgYWxsb3dzIGZvciBtb3JlIGluZm9ybWF0aXZlIGN1c3RvbSBlcnJvcnMuXG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG5NZWRpYUVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gJyc7XG5cbi8qKlxuICogQW4gb3B0aW9uYWwgc3RhdHVzIGNvZGUgdGhhdCBjYW4gYmUgc2V0IGJ5IHBsdWdpbnNcbiAqIHRvIGFsbG93IGV2ZW4gbW9yZSBkZXRhaWwgYWJvdXQgdGhlIGVycm9yLlxuICogRm9yIGV4YW1wbGUgdGhlIEhMUyBwbHVnaW4gbWlnaHQgcHJvdmlkZSB0aGUgc3BlY2lmaWNcbiAqIEhUVFAgc3RhdHVzIGNvZGUgdGhhdCB3YXMgcmV0dXJuZWQgd2hlbiB0aGUgZXJyb3JcbiAqIG9jY3VycmVkLCB0aGVuIGFsbG93aW5nIGEgY3VzdG9tIGVycm9yIG92ZXJsYXlcbiAqIHRvIGRpc3BsYXkgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEB0eXBlIHtbdHlwZV19XG4gKi9cbk1lZGlhRXJyb3IucHJvdG90eXBlLnN0YXR1cyA9IG51bGw7XG5cbk1lZGlhRXJyb3IuZXJyb3JUeXBlcyA9IFtcbiAgJ01FRElBX0VSUl9DVVNUT00nLCAgICAgICAgICAgIC8vID0gMFxuICAnTUVESUFfRVJSX0FCT1JURUQnLCAgICAgICAgICAgLy8gPSAxXG4gICdNRURJQV9FUlJfTkVUV09SSycsICAgICAgICAgICAvLyA9IDJcbiAgJ01FRElBX0VSUl9ERUNPREUnLCAgICAgICAgICAgIC8vID0gM1xuICAnTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEJywgLy8gPSA0XG4gICdNRURJQV9FUlJfRU5DUllQVEVEJyAgICAgICAgICAvLyA9IDVcbl07XG5cbk1lZGlhRXJyb3IuZGVmYXVsdE1lc3NhZ2VzID0ge1xuICAxOiAnWW91IGFib3J0ZWQgdGhlIHZpZGVvIHBsYXliYWNrJyxcbiAgMjogJ0EgbmV0d29yayBlcnJvciBjYXVzZWQgdGhlIHZpZGVvIGRvd25sb2FkIHRvIGZhaWwgcGFydC13YXkuJyxcbiAgMzogJ1RoZSB2aWRlbyBwbGF5YmFjayB3YXMgYWJvcnRlZCBkdWUgdG8gYSBjb3JydXB0aW9uIHByb2JsZW0gb3IgYmVjYXVzZSB0aGUgdmlkZW8gdXNlZCBmZWF0dXJlcyB5b3VyIGJyb3dzZXIgZGlkIG5vdCBzdXBwb3J0LicsXG4gIDQ6ICdUaGUgdmlkZW8gY291bGQgbm90IGJlIGxvYWRlZCwgZWl0aGVyIGJlY2F1c2UgdGhlIHNlcnZlciBvciBuZXR3b3JrIGZhaWxlZCBvciBiZWNhdXNlIHRoZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC4nLFxuICA1OiAnVGhlIHZpZGVvIGlzIGVuY3J5cHRlZCBhbmQgd2UgZG8gbm90IGhhdmUgdGhlIGtleXMgdG8gZGVjcnlwdCBpdC4nXG59O1xuXG4vLyBBZGQgdHlwZXMgYXMgcHJvcGVydGllcyBvbiBNZWRpYUVycm9yXG4vLyBlLmcuIE1lZGlhRXJyb3IuTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEID0gNDtcbmZvciAodmFyIGVyck51bSA9IDA7IGVyck51bSA8IE1lZGlhRXJyb3IuZXJyb3JUeXBlcy5sZW5ndGg7IGVyck51bSsrKSB7XG4gIE1lZGlhRXJyb3JbTWVkaWFFcnJvci5lcnJvclR5cGVzW2Vyck51bV1dID0gZXJyTnVtO1xuICAvLyB2YWx1ZXMgc2hvdWxkIGJlIGFjY2Vzc2libGUgb24gYm90aCB0aGUgY2xhc3MgYW5kIGluc3RhbmNlXG4gIE1lZGlhRXJyb3IucHJvdG90eXBlW01lZGlhRXJyb3IuZXJyb3JUeXBlc1tlcnJOdW1dXSA9IGVyck51bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFFcnJvcjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uLmpzJztcbmltcG9ydCBNZW51IGZyb20gJy4vbWVudS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcblxuLyoqXG4gKiBBIGJ1dHRvbiBjbGFzcyB3aXRoIGEgcG9wdXAgbWVudVxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIE1lbnVCdXR0b24gZXh0ZW5kcyBCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB0aGlzLm9uKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlQcmVzcyk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWhhc3BvcHVwJywgdHJ1ZSk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGxldCBtZW51ID0gdGhpcy5jcmVhdGVNZW51KCk7XG5cbiAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMubWVudSk7XG4gICAgfVxuXG4gICAgdGhpcy5tZW51ID0gbWVudTtcbiAgICB0aGlzLmFkZENoaWxkKG1lbnUpO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2sgdGhlIHN0YXRlIG9mIHRoZSBtZW51IGJ1dHRvblxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5idXR0b25QcmVzc2VkXyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU1lbnUoKSB7XG4gICAgdmFyIG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcl8pO1xuXG4gICAgLy8gQWRkIGEgdGl0bGUgbGlzdCBpdGVtIHRvIHRoZSB0b3BcbiAgICBpZiAodGhpcy5vcHRpb25zKCkudGl0bGUpIHtcbiAgICAgIG1lbnUuY29udGVudEVsKCkuYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCdsaScsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtdGl0bGUnLFxuICAgICAgICBpbm5lckhUTUw6IExpYi5jYXBpdGFsaXplKHRoaXMub3B0aW9ucygpLnRpdGxlKSxcbiAgICAgICAgdGFiaW5kZXg6IC0xXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5pdGVtcyA9IHRoaXNbJ2NyZWF0ZUl0ZW1zJ10oKTtcblxuICAgIGlmICh0aGlzLml0ZW1zKSB7XG4gICAgICAvLyBBZGQgbWVudSBpdGVtcyB0byB0aGUgbWVudVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1lbnUuYWRkSXRlbSh0aGlzLml0ZW1zW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGxpc3Qgb2YgbWVudSBpdGVtcy4gU3BlY2lmaWMgdG8gZWFjaCBzdWJjbGFzcy5cbiAgICovXG4gIGNyZWF0ZUl0ZW1zKCl7fVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmNsYXNzTmFtZX0gdmpzLW1lbnUtYnV0dG9uICR7c3VwZXIuYnVpbGRDU1NDbGFzcygpfWA7XG4gIH1cblxuICAvLyBGb2N1cyAtIEFkZCBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgbmVlZGVkIGFueW1vcmUuIEluc3RlYWQsIHRoZSBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IGlzIGhhbmRsZWQgYnlcbiAgLy8gdHJlYXRpbmcgdGhlIGJ1dHRvbiBhcyB0cmlnZ2VyaW5nIGEgc3VibWVudS4gV2hlbiB0aGUgYnV0dG9uIGlzIHByZXNzZWQsIHRoZSBzdWJtZW51XG4gIC8vIGFwcGVhcnMuIFByZXNzaW5nIHRoZSBidXR0b24gYWdhaW4gbWFrZXMgdGhlIHN1Ym1lbnUgZGlzYXBwZWFyLlxuICBoYW5kbGVGb2N1cygpIHt9XG5cbiAgLy8gQ2FuJ3QgdHVybiBvZmYgbGlzdCBkaXNwbGF5IHRoYXQgd2UgdHVybmVkIG9uIHdpdGggZm9jdXMsIGJlY2F1c2UgbGlzdCB3b3VsZCBnbyBhd2F5LlxuICBoYW5kbGVCbHVyKCkge31cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICAvLyBXaGVuIHlvdSBjbGljayB0aGUgYnV0dG9uIGl0IGFkZHMgZm9jdXMsIHdoaWNoIHdpbGwgc2hvdyB0aGUgbWVudSBpbmRlZmluaXRlbHkuXG4gICAgLy8gU28gd2UnbGwgcmVtb3ZlIGZvY3VzIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyB0aGUgYnV0dG9uLlxuICAgIC8vIEZvY3VzIGlzIG5lZWRlZCBmb3IgdGFiIG5hdmlnYXRpb24uXG4gICAgdGhpcy5vbmUoJ21vdXNlb3V0JywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMubWVudS51bmxvY2tTaG93aW5nKCk7XG4gICAgICB0aGlzLmVsXy5ibHVyKCk7XG4gICAgfSkpO1xuICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKXtcbiAgICAgIHRoaXMudW5wcmVzc0J1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXNzQnV0dG9uKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlS2V5UHJlc3MoZXZlbnQpIHtcblxuICAgIC8vIENoZWNrIGZvciBzcGFjZSBiYXIgKDMyKSBvciBlbnRlciAoMTMpIGtleXNcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDMyIHx8IGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgaWYgKHRoaXMuYnV0dG9uUHJlc3NlZF8pe1xuICAgICAgICB0aGlzLnVucHJlc3NCdXR0b24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJlc3NCdXR0b24oKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gQ2hlY2sgZm9yIGVzY2FwZSAoMjcpIGtleVxuICAgIH0gZWxzZSBpZiAoZXZlbnQud2hpY2ggPT09IDI3KXtcbiAgICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKXtcbiAgICAgICAgdGhpcy51bnByZXNzQnV0dG9uKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHByZXNzQnV0dG9uKCkge1xuICAgIHRoaXMuYnV0dG9uUHJlc3NlZF8gPSB0cnVlO1xuICAgIHRoaXMubWVudS5sb2NrU2hvd2luZygpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLml0ZW1zWzBdLmVsKCkuZm9jdXMoKTsgLy8gc2V0IHRoZSBmb2N1cyB0byB0aGUgdGl0bGUgb2YgdGhlIHN1Ym1lbnVcbiAgICB9XG4gIH1cblxuICB1bnByZXNzQnV0dG9uKCkge1xuICAgIHRoaXMuYnV0dG9uUHJlc3NlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm1lbnUudW5sb2NrU2hvd2luZygpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgZmFsc2UpO1xuICB9XG59XG5cbkJ1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnTWVudUJ1dHRvbicsIE1lbnVCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgTWVudUJ1dHRvbjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGEgbWVudSBpdGVtLiBgPGxpPmBcbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNZW51SXRlbSBleHRlbmRzIEJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLnNlbGVjdGVkKG9wdGlvbnNbJ3NlbGVjdGVkJ10pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIGNyZWF0ZUVsKHR5cGUsIHByb3BzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdsaScsIExpYi5vYmoubWVyZ2Uoe1xuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtaXRlbScsXG4gICAgICBpbm5lckhUTUw6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zX1snbGFiZWwnXSlcbiAgICB9LCBwcm9wcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGNsaWNrIG9uIHRoZSBtZW51IGl0ZW0sIGFuZCBzZXQgaXQgdG8gc2VsZWN0ZWRcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoaXMgbWVudSBpdGVtIGFzIHNlbGVjdGVkIG9yIG5vdFxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBzZWxlY3RlZFxuICAgKi9cbiAgc2VsZWN0ZWQoc2VsZWN0ZWQpIHtcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zZWxlY3RlZCcpO1xuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJyx0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNlbGVjdGVkJyk7XG4gICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLGZhbHNlKTtcbiAgICB9XG4gIH1cblxufVxuXG5CdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ01lbnVJdGVtJywgTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuLi9ldmVudHMuanMnO1xuXG4vKiBNZW51XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBUaGUgTWVudSBjb21wb25lbnQgaXMgdXNlZCB0byBidWlsZCBwb3AgdXAgbWVudXMsIGluY2x1ZGluZyBzdWJ0aXRsZSBhbmRcbiAqIGNhcHRpb25zIHNlbGVjdGlvbiBtZW51cy5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNZW51IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogQWRkIGEgbWVudSBpdGVtIHRvIHRoZSBtZW51XG4gICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gY29tcG9uZW50IENvbXBvbmVudCBvciBjb21wb25lbnQgdHlwZSB0byBhZGRcbiAgICovXG4gIGFkZEl0ZW0oY29tcG9uZW50KSB7XG4gICAgdGhpcy5hZGRDaGlsZChjb21wb25lbnQpO1xuICAgIGNvbXBvbmVudC5vbignY2xpY2snLCBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpe1xuICAgICAgdGhpcy51bmxvY2tTaG93aW5nKCk7XG4gICAgfSkpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGNvbnRlbnRFbFR5cGUgPSB0aGlzLm9wdGlvbnMoKS5jb250ZW50RWxUeXBlIHx8ICd1bCc7XG4gICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKGNvbnRlbnRFbFR5cGUsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1tZW51LWNvbnRlbnQnXG4gICAgfSk7XG4gICAgdmFyIGVsID0gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGFwcGVuZDogdGhpcy5jb250ZW50RWxfLFxuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUnXG4gICAgfSk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcblxuICAgIC8vIFByZXZlbnQgY2xpY2tzIGZyb20gYnViYmxpbmcgdXAuIE5lZWRlZCBmb3IgTWVudSBCdXR0b25zLFxuICAgIC8vIHdoZXJlIGEgY2xpY2sgb24gdGhlIHBhcmVudCBpcyBzaWduaWZpY2FudFxuICAgIEV2ZW50cy5vbihlbCwgJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9XG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVudScsIE1lbnUpO1xuZXhwb3J0IGRlZmF1bHQgTWVudTtcbiIsImltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbmxldCBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yO1xuXG4vKipcbiAqIEdsb2JhbCBQbGF5ZXIgaW5zdGFuY2Ugb3B0aW9ucywgc3VyZmFjZWQgZnJvbSBQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfXG4gKiBvcHRpb25zID0gUGxheWVyLnByb3RvdHlwZS5vcHRpb25zX1xuICogQWxsIG9wdGlvbnMgc2hvdWxkIHVzZSBzdHJpbmcga2V5cyBzbyB0aGV5IGF2b2lkXG4gKiByZW5hbWluZyBieSBjbG9zdXJlIGNvbXBpbGVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8vIERlZmF1bHQgb3JkZXIgb2YgZmFsbGJhY2sgdGVjaG5vbG9neVxuICAndGVjaE9yZGVyJzogWydodG1sNScsJ2ZsYXNoJ10sXG4gIC8vIHRlY2hPcmRlcjogWydmbGFzaCcsJ2h0bWw1J10sXG5cbiAgJ2h0bWw1Jzoge30sXG4gICdmbGFzaCc6IHt9LFxuXG4gIC8vIERlZmF1bHQgb2Ygd2ViIGJyb3dzZXIgaXMgMzAweDE1MC4gU2hvdWxkIHJlbHkgb24gc291cmNlIHdpZHRoL2hlaWdodC5cbiAgJ3dpZHRoJzogMzAwLFxuICAnaGVpZ2h0JzogMTUwLFxuICAvLyBkZWZhdWx0Vm9sdW1lOiAwLjg1LFxuICAnZGVmYXVsdFZvbHVtZSc6IDAuMDAsIC8vIFRoZSBmcmVha2luIHNlYWd1bHMgYXJlIGRyaXZpbmcgbWUgY3JhenkhXG5cbiAgLy8gZGVmYXVsdCBpbmFjdGl2aXR5IHRpbWVvdXRcbiAgJ2luYWN0aXZpdHlUaW1lb3V0JzogMjAwMCxcblxuICAvLyBkZWZhdWx0IHBsYXliYWNrIHJhdGVzXG4gICdwbGF5YmFja1JhdGVzJzogW10sXG4gIC8vIEFkZCBwbGF5YmFjayByYXRlIHNlbGVjdGlvbiBieSBhZGRpbmcgcmF0ZXNcbiAgLy8gJ3BsYXliYWNrUmF0ZXMnOiBbMC41LCAxLCAxLjUsIDJdLFxuXG4gIC8vIEluY2x1ZGVkIGNvbnRyb2wgc2V0c1xuICAnY2hpbGRyZW4nOiB7XG4gICAgJ21lZGlhTG9hZGVyJzoge30sXG4gICAgJ3Bvc3RlckltYWdlJzoge30sXG4gICAgJ3RleHRUcmFja0Rpc3BsYXknOiB7fSxcbiAgICAnbG9hZGluZ1NwaW5uZXInOiB7fSxcbiAgICAnYmlnUGxheUJ1dHRvbic6IHt9LFxuICAgICdjb250cm9sQmFyJzoge30sXG4gICAgJ2Vycm9yRGlzcGxheSc6IHt9LFxuICAgICd0ZXh0VHJhY2tTZXR0aW5ncyc6IHt9XG4gIH0sXG5cbiAgJ2xhbmd1YWdlJzogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKSB8fCBuYXZpZ2F0b3IubGFuZ3VhZ2VzICYmIG5hdmlnYXRvci5sYW5ndWFnZXNbMF0gfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSB8fCBuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgJ2VuJyxcblxuICAvLyBsb2NhbGVzIGFuZCB0aGVpciBsYW5ndWFnZSB0cmFuc2xhdGlvbnNcbiAgJ2xhbmd1YWdlcyc6IHt9LFxuXG4gIC8vIERlZmF1bHQgbWVzc2FnZSB0byBzaG93IHdoZW4gYSB2aWRlbyBjYW5ub3QgYmUgcGxheWVkLlxuICAnbm90U3VwcG9ydGVkTWVzc2FnZSc6ICdObyBjb21wYXRpYmxlIHNvdXJjZSB3YXMgZm91bmQgZm9yIHRoaXMgdmlkZW8uJ1xufTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliLmpzJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgRnVsbHNjcmVlbkFwaSBmcm9tICcuL2Z1bGxzY3JlZW4tYXBpLmpzJztcbmltcG9ydCBNZWRpYUVycm9yIGZyb20gJy4vbWVkaWEtZXJyb3IuanMnO1xuaW1wb3J0IE9wdGlvbnMgZnJvbSAnLi9vcHRpb25zLmpzJztcbmltcG9ydCBzYWZlUGFyc2VUdXBsZSBmcm9tICdzYWZlLWpzb24tcGFyc2UvdHVwbGUnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vLyBJbmNsdWRlIHJlcXVpcmVkIGNoaWxkIGNvbXBvbmVudHNcbmltcG9ydCBNZWRpYUxvYWRlciBmcm9tICcuL3RlY2gvbG9hZGVyLmpzJztcbmltcG9ydCBQb3N0ZXIgZnJvbSAnLi9wb3N0ZXItaW1hZ2UuanMnO1xuaW1wb3J0IFRleHRUcmFja0Rpc3BsYXkgZnJvbSAnLi90cmFja3MvdGV4dC10cmFjay1kaXNwbGF5LmpzJztcbmltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tICcuL2xvYWRpbmctc3Bpbm5lci5qcyc7XG5pbXBvcnQgQmlnUGxheUJ1dHRvbiBmcm9tICcuL2JpZy1wbGF5LWJ1dHRvbi5qcyc7XG5pbXBvcnQgY29udHJvbEJhciBmcm9tICcuL2NvbnRyb2wtYmFyL2NvbnRyb2wtYmFyLmpzJztcbmltcG9ydCBFcnJvckRpc3BsYXkgZnJvbSAnLi9lcnJvci1kaXNwbGF5LmpzJztcbmltcG9ydCBUZXh0VHJhY2tTZXR0aW5ncyBmcm9tICcuL3RyYWNrcy90ZXh0LXRyYWNrLXNldHRpbmdzLmpzJztcbi8vIFJlcXVpcmUgaHRtbDUgZm9yIGRpc3Bvc2luZyB0aGUgb3JpZ2luYWwgdmlkZW8gdGFnXG5pbXBvcnQgSHRtbDUgZnJvbSAnLi90ZWNoL2h0bWw1LmpzJztcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgYFBsYXllcmAgY2xhc3MgaXMgY3JlYXRlZCB3aGVuIGFueSBvZiB0aGUgVmlkZW8uanMgc2V0dXAgbWV0aG9kcyBhcmUgdXNlZCB0byBpbml0aWFsaXplIGEgdmlkZW8uXG4gKlxuICogYGBganNcbiAqIHZhciBteVBsYXllciA9IHZpZGVvanMoJ2V4YW1wbGVfdmlkZW9fMScpO1xuICogYGBgXG4gKlxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCB0aGUgYGRhdGEtc2V0dXBgIGF0dHJpYnV0ZSB0ZWxscyB0aGUgVmlkZW8uanMgbGlicmFyeSB0byBjcmVhdGUgYSBwbGF5ZXIgaW5zdGFuY2Ugd2hlbiB0aGUgbGlicmFyeSBpcyByZWFkeS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8dmlkZW8gaWQ9XCJleGFtcGxlX3ZpZGVvXzFcIiBkYXRhLXNldHVwPSd7fScgY29udHJvbHM+XG4gKiAgIDxzb3VyY2Ugc3JjPVwibXktc291cmNlLm1wNFwiIHR5cGU9XCJ2aWRlby9tcDRcIj5cbiAqIDwvdmlkZW8+XG4gKiBgYGBcbiAqXG4gKiBBZnRlciBhbiBpbnN0YW5jZSBoYXMgYmVlbiBjcmVhdGVkIGl0IGNhbiBiZSBhY2Nlc3NlZCBnbG9iYWxseSB1c2luZyBgVmlkZW8oJ2V4YW1wbGVfdmlkZW9fMScpYC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5jbGFzcyBQbGF5ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIC8qKlxuICAgKiBwbGF5ZXIncyBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICAgKlxuICAgKiBAY29uc3RydWN0c1xuICAgKiBAbWV0aG9kIGluaXRcbiAgICogQHBhcmFtIHtFbGVtZW50fSB0YWcgICAgICAgIFRoZSBvcmlnaW5hbCB2aWRlbyB0YWcgdXNlZCBmb3IgY29uZmlndXJpbmcgb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgICAgUGxheWVyIG9wdGlvbnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHJlYWR5ICAgIFJlYWR5IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YWcsIG9wdGlvbnMsIHJlYWR5KXtcbiAgICAvLyBNYWtlIHN1cmUgdGFnIElEIGV4aXN0c1xuICAgIHRhZy5pZCA9IHRhZy5pZCB8fCBgdmpzX3ZpZGVvXyR7TGliLmd1aWQrK31gO1xuXG4gICAgLy8gU2V0IE9wdGlvbnNcbiAgICAvLyBUaGUgb3B0aW9ucyBhcmd1bWVudCBvdmVycmlkZXMgb3B0aW9ucyBzZXQgaW4gdGhlIHZpZGVvIHRhZ1xuICAgIC8vIHdoaWNoIG92ZXJyaWRlcyBnbG9iYWxseSBzZXQgb3B0aW9ucy5cbiAgICAvLyBUaGlzIGxhdHRlciBwYXJ0IGNvaW5jaWRlcyB3aXRoIHRoZSBsb2FkIG9yZGVyXG4gICAgLy8gKHRhZyBtdXN0IGV4aXN0IGJlZm9yZSBQbGF5ZXIpXG4gICAgb3B0aW9ucyA9IExpYi5vYmoubWVyZ2UoUGxheWVyLmdldFRhZ1NldHRpbmdzKHRhZyksIG9wdGlvbnMpO1xuXG4gICAgLy8gRGVsYXkgdGhlIGluaXRpYWxpemF0aW9uIG9mIGNoaWxkcmVuIGJlY2F1c2Ugd2UgbmVlZCB0byBzZXQgdXBcbiAgICAvLyBwbGF5ZXIgcHJvcGVydGllcyBmaXJzdCwgYW5kIGNhbid0IHVzZSBgdGhpc2AgYmVmb3JlIGBzdXBlcigpYFxuICAgIG9wdGlvbnMuaW5pdENoaWxkcmVuID0gZmFsc2U7XG5cbiAgICAvLyBTYW1lIHdpdGggY3JlYXRpbmcgdGhlIGVsZW1lbnRcbiAgICBvcHRpb25zLmNyZWF0ZUVsID0gZmFsc2U7XG5cbiAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSBwbGF5ZXIgdG8gcmVwb3J0IHRvdWNoIGFjdGl2aXR5IG9uIGl0c2VsZlxuICAgIC8vIHNlZSBlbmFibGVUb3VjaEFjdGl2aXR5IGluIENvbXBvbmVudFxuICAgIG9wdGlvbnMucmVwb3J0VG91Y2hBY3Rpdml0eSA9IGZhbHNlO1xuXG4gICAgLy8gUnVuIGJhc2UgY29tcG9uZW50IGluaXRpYWxpemluZyB3aXRoIG5ldyBvcHRpb25zXG4gICAgc3VwZXIobnVsbCwgb3B0aW9ucywgcmVhZHkpO1xuXG5cbiAgICAvLyBpZiB0aGUgZ2xvYmFsIG9wdGlvbiBvYmplY3Qgd2FzIGFjY2lkZW50YWxseSBibG93biBhd2F5IGJ5XG4gICAgLy8gc29tZW9uZSwgYmFpbCBlYXJseSB3aXRoIGFuIGluZm9ybWF0aXZlIGVycm9yXG4gICAgaWYgKCF0aGlzLm9wdGlvbnNfIHx8XG4gICAgICAgICF0aGlzLm9wdGlvbnNfLnRlY2hPcmRlciB8fFxuICAgICAgICAhdGhpcy5vcHRpb25zXy50ZWNoT3JkZXIubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRlY2hPcmRlciBzcGVjaWZpZWQuIERpZCB5b3Ugb3ZlcndyaXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICd2aWRlb2pzLm9wdGlvbnMgaW5zdGVhZCBvZiBqdXN0IGNoYW5naW5nIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydGllcyB5b3Ugd2FudCB0byBvdmVycmlkZT8nKTtcbiAgICB9XG5cbiAgICB0aGlzLnRhZyA9IHRhZzsgLy8gU3RvcmUgdGhlIG9yaWdpbmFsIHRhZyB1c2VkIHRvIHNldCBvcHRpb25zXG5cbiAgICAvLyBTdG9yZSB0aGUgdGFnIGF0dHJpYnV0ZXMgdXNlZCB0byByZXN0b3JlIGh0bWw1IGVsZW1lbnRcbiAgICB0aGlzLnRhZ0F0dHJpYnV0ZXMgPSB0YWcgJiYgTGliLmdldEVsZW1lbnRBdHRyaWJ1dGVzKHRhZyk7XG5cbiAgICAvLyBVcGRhdGUgQ3VycmVudCBMYW5ndWFnZVxuICAgIHRoaXMubGFuZ3VhZ2VfID0gb3B0aW9uc1snbGFuZ3VhZ2UnXSB8fCBPcHRpb25zWydsYW5ndWFnZSddO1xuXG4gICAgLy8gVXBkYXRlIFN1cHBvcnRlZCBMYW5ndWFnZXNcbiAgICB0aGlzLmxhbmd1YWdlc18gPSBvcHRpb25zWydsYW5ndWFnZXMnXSB8fCBPcHRpb25zWydsYW5ndWFnZXMnXTtcblxuICAgIC8vIENhY2hlIGZvciB2aWRlbyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgdGhpcy5jYWNoZV8gPSB7fTtcblxuICAgIC8vIFNldCBwb3N0ZXJcbiAgICB0aGlzLnBvc3Rlcl8gPSBvcHRpb25zWydwb3N0ZXInXSB8fCAnJztcblxuICAgIC8vIFNldCBjb250cm9sc1xuICAgIHRoaXMuY29udHJvbHNfID0gISFvcHRpb25zWydjb250cm9scyddO1xuICAgIC8vIE9yaWdpbmFsIHRhZyBzZXR0aW5ncyBzdG9yZWQgaW4gb3B0aW9uc1xuICAgIC8vIG5vdyByZW1vdmUgaW1tZWRpYXRlbHkgc28gbmF0aXZlIGNvbnRyb2xzIGRvbid0IGZsYXNoLlxuICAgIC8vIE1heSBiZSB0dXJuZWQgYmFjayBvbiBieSBIVE1MNSB0ZWNoIGlmIG5hdGl2ZUNvbnRyb2xzRm9yVG91Y2ggaXMgdHJ1ZVxuICAgIHRhZy5jb250cm9scyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgKiBTdG9yZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2Ygc2NydWJiaW5nXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdXNlciBpcyBzY3J1YmJpbmdcbiAgICAqL1xuICAgIHRoaXMuc2NydWJiaW5nXyA9IGZhbHNlO1xuXG4gICAgdGhpcy5lbF8gPSB0aGlzLmNyZWF0ZUVsKCk7XG5cbiAgICAvLyBMb2FkIHBsdWdpbnNcbiAgICBpZiAob3B0aW9uc1sncGx1Z2lucyddKSB7XG4gICAgICBMaWIub2JqLmVhY2gob3B0aW9uc1sncGx1Z2lucyddLCBmdW5jdGlvbihrZXksIHZhbCl7XG4gICAgICAgIHRoaXNba2V5XSh2YWwpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0Q2hpbGRyZW4oKTtcblxuICAgIC8vIFNldCBpc0F1ZGlvIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGFuIGF1ZGlvIHRhZyB3YXMgdXNlZFxuICAgIHRoaXMuaXNBdWRpbyh0YWcubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F1ZGlvJyk7XG5cbiAgICAvLyBVcGRhdGUgY29udHJvbHMgY2xhc3NOYW1lLiBDYW4ndCBkbyB0aGlzIHdoZW4gdGhlIGNvbnRyb2xzIGFyZSBpbml0aWFsbHlcbiAgICAvLyBzZXQgYmVjYXVzZSB0aGUgZWxlbWVudCBkb2Vzbid0IGV4aXN0IHlldC5cbiAgICBpZiAodGhpcy5jb250cm9scygpKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZW5hYmxlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZGlzYWJsZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0F1ZGlvKCkpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1hdWRpbycpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZsZXhOb3RTdXBwb3J0ZWRfKCkpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1uby1mbGV4Jyk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogTWFrZSB0aGlzIHNtYXJ0ZXIuIFRvZ2dsZSB1c2VyIHN0YXRlIGJldHdlZW4gdG91Y2hpbmcvbW91c2luZ1xuICAgIC8vIHVzaW5nIGV2ZW50cywgc2luY2UgZGV2aWNlcyBjYW4gaGF2ZSBib3RoIHRvdWNoIGFuZCBtb3VzZSBldmVudHMuXG4gICAgLy8gaWYgKExpYi5UT1VDSF9FTkFCTEVEKSB7XG4gICAgLy8gICB0aGlzLmFkZENsYXNzKCd2anMtdG91Y2gtZW5hYmxlZCcpO1xuICAgIC8vIH1cblxuICAgIC8vIE1ha2UgcGxheWVyIGVhc2lseSBmaW5kYWJsZSBieSBJRFxuICAgIFBsYXllci5wbGF5ZXJzW3RoaXMuaWRfXSA9IHRoaXM7XG5cbiAgICAvLyBXaGVuIHRoZSBwbGF5ZXIgaXMgZmlyc3QgaW5pdGlhbGl6ZWQsIHRyaWdnZXIgYWN0aXZpdHkgc28gY29tcG9uZW50c1xuICAgIC8vIGxpa2UgdGhlIGNvbnRyb2wgYmFyIHNob3cgdGhlbXNlbHZlcyBpZiBuZWVkZWRcbiAgICB0aGlzLnVzZXJBY3RpdmVfID0gdHJ1ZTtcbiAgICB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuICAgIHRoaXMubGlzdGVuRm9yVXNlckFjdGl2aXR5KCk7XG5cbiAgICB0aGlzLm9uKCdmdWxsc2NyZWVuY2hhbmdlJywgdGhpcy5oYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICB0aGlzLm9uKCdzdGFnZWNsaWNrJywgdGhpcy5oYW5kbGVTdGFnZUNsaWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgdmlkZW8gcGxheWVyIGFuZCBkb2VzIGFueSBuZWNlc3NhcnkgY2xlYW51cFxuICAgKlxuICAgKiAgICAgbXlQbGF5ZXIuZGlzcG9zZSgpO1xuICAgKlxuICAgKiBUaGlzIGlzIGVzcGVjaWFsbHkgaGVscGZ1bCBpZiB5b3UgYXJlIGR5bmFtaWNhbGx5IGFkZGluZyBhbmQgcmVtb3ZpbmcgdmlkZW9zXG4gICAqIHRvL2Zyb20gdGhlIERPTS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdkaXNwb3NlJyk7XG4gICAgLy8gcHJldmVudCBkaXNwb3NlIGZyb20gYmVpbmcgY2FsbGVkIHR3aWNlXG4gICAgdGhpcy5vZmYoJ2Rpc3Bvc2UnKTtcblxuICAgIC8vIEtpbGwgcmVmZXJlbmNlIHRvIHRoaXMgcGxheWVyXG4gICAgUGxheWVyLnBsYXllcnNbdGhpcy5pZF9dID0gbnVsbDtcbiAgICBpZiAodGhpcy50YWcgJiYgdGhpcy50YWdbJ3BsYXllciddKSB7IHRoaXMudGFnWydwbGF5ZXInXSA9IG51bGw7IH1cbiAgICBpZiAodGhpcy5lbF8gJiYgdGhpcy5lbF9bJ3BsYXllciddKSB7IHRoaXMuZWxfWydwbGF5ZXInXSA9IG51bGw7IH1cblxuICAgIGlmICh0aGlzLnRlY2gpIHsgdGhpcy50ZWNoLmRpc3Bvc2UoKTsgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGVsID0gdGhpcy5lbF8gPSBzdXBlci5jcmVhdGVFbCgnZGl2Jyk7XG4gICAgbGV0IHRhZyA9IHRoaXMudGFnO1xuXG4gICAgLy8gUmVtb3ZlIHdpZHRoL2hlaWdodCBhdHRycyBmcm9tIHRhZyBzbyBDU1MgY2FuIG1ha2UgaXQgMTAwJSB3aWR0aC9oZWlnaHRcbiAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCd3aWR0aCcpO1xuICAgIHRhZy5yZW1vdmVBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuXG4gICAgLy8gQ29weSBvdmVyIGFsbCB0aGUgYXR0cmlidXRlcyBmcm9tIHRoZSB0YWcsIGluY2x1ZGluZyBJRCBhbmQgY2xhc3NcbiAgICAvLyBJRCB3aWxsIG5vdyByZWZlcmVuY2UgcGxheWVyIGJveCwgbm90IHRoZSB2aWRlbyB0YWdcbiAgICBjb25zdCBhdHRycyA9IExpYi5nZXRFbGVtZW50QXR0cmlidXRlcyh0YWcpO1xuICAgIExpYi5vYmouZWFjaChhdHRycywgZnVuY3Rpb24oYXR0cikge1xuICAgICAgLy8gd29ya2Fyb3VuZCBzbyB3ZSBkb24ndCB0b3RhbGx5IGJyZWFrIElFN1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjUzNDQ0L2Nzcy1zdHlsZXMtbm90LWFwcGxpZWQtb24tZHluYW1pYy1lbGVtZW50cy1pbi1pbnRlcm5ldC1leHBsb3Jlci03XG4gICAgICBpZiAoYXR0ciA9PT0gJ2NsYXNzJykge1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBhdHRyc1thdHRyXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGFnIGlkL2NsYXNzIGZvciB1c2UgYXMgSFRNTDUgcGxheWJhY2sgdGVjaFxuICAgIC8vIE1pZ2h0IHRoaW5rIHdlIHNob3VsZCBkbyB0aGlzIGFmdGVyIGVtYmVkZGluZyBpbiBjb250YWluZXIgc28gLnZqcy10ZWNoIGNsYXNzXG4gICAgLy8gZG9lc24ndCBmbGFzaCAxMDAlIHdpZHRoL2hlaWdodCwgYnV0IGNsYXNzIG9ubHkgYXBwbGllcyB3aXRoIC52aWRlby1qcyBwYXJlbnRcbiAgICB0YWcuaWQgKz0gJ19odG1sNV9hcGknO1xuICAgIHRhZy5jbGFzc05hbWUgPSAndmpzLXRlY2gnO1xuXG4gICAgLy8gTWFrZSBwbGF5ZXIgZmluZGFibGUgb24gZWxlbWVudHNcbiAgICB0YWdbJ3BsYXllciddID0gZWxbJ3BsYXllciddID0gdGhpcztcbiAgICAvLyBEZWZhdWx0IHN0YXRlIG9mIHZpZGVvIGlzIHBhdXNlZFxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcblxuICAgIC8vIE1ha2UgYm94IHVzZSB3aWR0aC9oZWlnaHQgb2YgdGFnLCBvciByZWx5IG9uIGRlZmF1bHQgaW1wbGVtZW50YXRpb25cbiAgICAvLyBFbmZvcmNlIHdpdGggQ1NTIHNpbmNlIHdpZHRoL2hlaWdodCBhdHRycyBkb24ndCB3b3JrIG9uIGRpdnNcbiAgICB0aGlzLndpZHRoKHRoaXMub3B0aW9uc19bJ3dpZHRoJ10sIHRydWUpOyAvLyAodHJ1ZSkgU2tpcCByZXNpemUgbGlzdGVuZXIgb24gbG9hZFxuICAgIHRoaXMuaGVpZ2h0KHRoaXMub3B0aW9uc19bJ2hlaWdodCddLCB0cnVlKTtcblxuICAgIC8vIExpYi5pbnNlcnRGaXJzdCBzZWVtcyB0byBjYXVzZSB0aGUgbmV0d29ya1N0YXRlIHRvIGZsaWNrZXIgZnJvbSAzIHRvIDIsIHNvXG4gICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgZm9yIGxhdGVyIHNvIHdlIGNhbiBrbm93IGlmIHRoZSBzb3VyY2Ugb3JpZ2luYWxseSBmYWlsZWRcbiAgICB0YWcuaW5pdE5ldHdvcmtTdGF0ZV8gPSB0YWcubmV0d29ya1N0YXRlO1xuXG4gICAgLy8gV3JhcCB2aWRlbyB0YWcgaW4gZGl2IChlbC9ib3gpIGNvbnRhaW5lclxuICAgIGlmICh0YWcucGFyZW50Tm9kZSkge1xuICAgICAgdGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCB0YWcpO1xuICAgIH1cbiAgICBMaWIuaW5zZXJ0Rmlyc3QodGFnLCBlbCk7IC8vIEJyZWFrcyBpUGhvbmUsIGZpeGVkIGluIEhUTUw1IHNldHVwLlxuXG4gICAgdGhpcy5lbF8gPSBlbDtcblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHRoZSBNZWRpYSBQbGF5YmFjayBUZWNobm9sb2d5ICh0ZWNoKVxuICAgKiBMb2FkL0NyZWF0ZSBhbiBpbnN0YW5jZSBvZiBwbGF5YmFjayB0ZWNobm9sb2d5IGluY2x1ZGluZyBlbGVtZW50IGFuZCBBUEkgbWV0aG9kc1xuICAgKiBBbmQgYXBwZW5kIHBsYXliYWNrIGVsZW1lbnQgaW4gcGxheWVyIGRpdi5cbiAgICovXG4gIGxvYWRUZWNoKHRlY2hOYW1lLCBzb3VyY2UpIHtcblxuICAgIC8vIFBhdXNlIGFuZCByZW1vdmUgY3VycmVudCBwbGF5YmFjayB0ZWNobm9sb2d5XG4gICAgaWYgKHRoaXMudGVjaCkge1xuICAgICAgdGhpcy51bmxvYWRUZWNoKCk7XG4gICAgfVxuXG4gICAgLy8gZ2V0IHJpZCBvZiB0aGUgSFRNTDUgdmlkZW8gdGFnIGFzIHNvb24gYXMgd2UgYXJlIHVzaW5nIGFub3RoZXIgdGVjaFxuICAgIGlmICh0ZWNoTmFtZSAhPT0gJ0h0bWw1JyAmJiB0aGlzLnRhZykge1xuICAgICAgQ29tcG9uZW50LmdldENvbXBvbmVudCgnSHRtbDUnKS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMudGFnKTtcbiAgICAgIHRoaXMudGFnLnBsYXllciA9IG51bGw7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy50ZWNoTmFtZSA9IHRlY2hOYW1lO1xuXG4gICAgLy8gVHVybiBvZmYgQVBJIGFjY2VzcyBiZWNhdXNlIHdlJ3JlIGxvYWRpbmcgYSBuZXcgdGVjaCB0aGF0IG1pZ2h0IGxvYWQgYXN5bmNocm9ub3VzbHlcbiAgICB0aGlzLmlzUmVhZHlfID0gZmFsc2U7XG5cbiAgICB2YXIgdGVjaFJlYWR5ID0gTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRyaWdnZXJSZWFkeSgpO1xuICAgIH0pO1xuXG4gICAgLy8gR3JhYiB0ZWNoLXNwZWNpZmljIG9wdGlvbnMgZnJvbSBwbGF5ZXIgb3B0aW9ucyBhbmQgYWRkIHNvdXJjZSBhbmQgcGFyZW50IGVsZW1lbnQgdG8gdXNlLlxuICAgIHZhciB0ZWNoT3B0aW9ucyA9IExpYi5vYmoubWVyZ2Uoe1xuICAgICAgJ3NvdXJjZSc6IHNvdXJjZSxcbiAgICAgICdwbGF5ZXJJZCc6IHRoaXMuaWQoKSxcbiAgICAgICd0ZXh0VHJhY2tzJzogdGhpcy50ZXh0VHJhY2tzX1xuICAgIH0sIHRoaXMub3B0aW9uc19bdGVjaE5hbWUudG9Mb3dlckNhc2UoKV0pO1xuXG4gICAgaWYgKHRoaXMudGFnKSB7XG4gICAgICB0ZWNoT3B0aW9ucy50YWcgPSB0aGlzLnRhZztcbiAgICB9XG5cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRUeXBlXyA9IHNvdXJjZS50eXBlO1xuICAgICAgaWYgKHNvdXJjZS5zcmMgPT09IHRoaXMuY2FjaGVfLnNyYyAmJiB0aGlzLmNhY2hlXy5jdXJyZW50VGltZSA+IDApIHtcbiAgICAgICAgdGVjaE9wdGlvbnNbJ3N0YXJ0VGltZSddID0gdGhpcy5jYWNoZV8uY3VycmVudFRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FjaGVfLnNyYyA9IHNvdXJjZS5zcmM7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB0ZWNoIGluc3RhbmNlXG4gICAgbGV0IHRlY2hDb21wb25lbnQgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KHRlY2hOYW1lKTtcbiAgICB0aGlzLnRlY2ggPSBuZXcgdGVjaENvbXBvbmVudCh0ZWNoT3B0aW9ucyk7XG5cbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3JlYWR5JywgdGhpcy5oYW5kbGVUZWNoUmVhZHkpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAndXNlbmF0aXZlY29udHJvbHMnLCB0aGlzLmhhbmRsZVRlY2hVc2VOYXRpdmVDb250cm9scyk7XG5cbiAgICAvLyBMaXN0ZW4gdG8gZXZlcnkgSFRNTDUgZXZlbnRzIGFuZCB0cmlnZ2VyIHRoZW0gYmFjayBvbiB0aGUgcGxheWVyIGZvciB0aGUgcGx1Z2luc1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnbG9hZHN0YXJ0JywgdGhpcy5oYW5kbGVUZWNoTG9hZFN0YXJ0KTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3dhaXRpbmcnLCB0aGlzLmhhbmRsZVRlY2hXYWl0aW5nKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2NhbnBsYXknLCB0aGlzLmhhbmRsZVRlY2hDYW5QbGF5KTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2NhbnBsYXl0aHJvdWdoJywgdGhpcy5oYW5kbGVUZWNoQ2FuUGxheVRocm91Z2gpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAncGxheWluZycsIHRoaXMuaGFuZGxlVGVjaFBsYXlpbmcpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnZW5kZWQnLCB0aGlzLmhhbmRsZVRlY2hFbmRlZCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdzZWVraW5nJywgdGhpcy5oYW5kbGVUZWNoU2Vla2luZyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdzZWVrZWQnLCB0aGlzLmhhbmRsZVRlY2hTZWVrZWQpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAncGxheScsIHRoaXMuaGFuZGxlVGVjaFBsYXkpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnZmlyc3RwbGF5JywgdGhpcy5oYW5kbGVUZWNoRmlyc3RQbGF5KTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3BhdXNlJywgdGhpcy5oYW5kbGVUZWNoUGF1c2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAncHJvZ3Jlc3MnLCB0aGlzLmhhbmRsZVRlY2hQcm9ncmVzcyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdkdXJhdGlvbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB0aGlzLmhhbmRsZVRlY2hGdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2Vycm9yJywgdGhpcy5oYW5kbGVUZWNoRXJyb3IpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnc3VzcGVuZCcsIHRoaXMuaGFuZGxlVGVjaFN1c3BlbmQpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnYWJvcnQnLCB0aGlzLmhhbmRsZVRlY2hBYm9ydCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdlbXB0aWVkJywgdGhpcy5oYW5kbGVUZWNoRW1wdGllZCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdzdGFsbGVkJywgdGhpcy5oYW5kbGVUZWNoU3RhbGxlZCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdsb2FkZWRtZXRhZGF0YScsIHRoaXMuaGFuZGxlVGVjaExvYWRlZE1ldGFEYXRhKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ21ldGFkYXRhdXBkYXRlJywgdGhpcy5oYW5kbGVNZXRhRGF0YVVwZGF0ZSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdsb2FkZWRkYXRhJywgdGhpcy5oYW5kbGVUZWNoTG9hZGVkRGF0YSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICd0aW1ldXBkYXRlJywgdGhpcy5oYW5kbGVUZWNoVGltZVVwZGF0ZSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdyYXRlY2hhbmdlJywgdGhpcy5oYW5kbGVUZWNoUmF0ZUNoYW5nZSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICd2b2x1bWVjaGFuZ2UnLCB0aGlzLmhhbmRsZVRlY2hWb2x1bWVDaGFuZ2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAndGV4dHRyYWNrY2hhbmdlJywgdGhpcy5vblRleHRUcmFja0NoYW5nZSk7XG5cbiAgICBpZiAodGhpcy5jb250cm9scygpICYmICF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgdGhpcy5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIHRlY2ggZWxlbWVudCBpbiB0aGUgRE9NIGlmIGl0IHdhcyBub3QgYWxyZWFkeSB0aGVyZVxuICAgIC8vIE1ha2Ugc3VyZSB0byBub3QgaW5zZXJ0IHRoZSBvcmlnaW5hbCB2aWRlbyBlbGVtZW50IGlmIHVzaW5nIEh0bWw1XG4gICAgaWYgKHRoaXMudGVjaC5lbCgpLnBhcmVudE5vZGUgIT09IHRoaXMuZWwoKSAmJiAodGVjaE5hbWUgIT09ICdIdG1sNScgfHwgIXRoaXMudGFnKSkge1xuICAgICAgTGliLmluc2VydEZpcnN0KHRoaXMudGVjaC5lbCgpLCB0aGlzLmVsKCkpO1xuICAgIH1cblxuICAgIC8vIEdldCByaWQgb2YgdGhlIG9yaWdpbmFsIHZpZGVvIHRhZyByZWZlcmVuY2UgYWZ0ZXIgdGhlIGZpcnN0IHRlY2ggaXMgbG9hZGVkXG4gICAgaWYgKHRoaXMudGFnKSB7XG4gICAgICB0aGlzLnRhZy5wbGF5ZXIgPSBudWxsO1xuICAgICAgdGhpcy50YWcgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMudGVjaC5yZWFkeSh0ZWNoUmVhZHkpO1xuICB9XG5cbiAgdW5sb2FkVGVjaCgpIHtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHRleHQgdHJhY2tzIHNvIHRoYXQgd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRleHQgdHJhY2tzIHdpdGggdGhlIG5leHQgdGVjaFxuICAgIHRoaXMudGV4dFRyYWNrc18gPSB0aGlzLnRleHRUcmFja3MoKTtcblxuICAgIHRoaXMuaXNSZWFkeV8gPSBmYWxzZTtcblxuICAgIHRoaXMudGVjaC5kaXNwb3NlKCk7XG5cbiAgICB0aGlzLnRlY2ggPSBmYWxzZTtcbiAgfVxuXG4gIGFkZFRlY2hDb250cm9sc0xpc3RlbmVycygpIHtcbiAgICAvLyBTb21lIGJyb3dzZXJzIChDaHJvbWUgJiBJRSkgZG9uJ3QgdHJpZ2dlciBhIGNsaWNrIG9uIGEgZmxhc2ggc3dmLCBidXQgZG9cbiAgICAvLyB0cmlnZ2VyIG1vdXNlZG93bi91cC5cbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0NDQ1NjIvamF2YXNjcmlwdC1vbmNsaWNrLWV2ZW50LW92ZXItZmxhc2gtb2JqZWN0XG4gICAgLy8gQW55IHRvdWNoIGV2ZW50cyBhcmUgc2V0IHRvIGJsb2NrIHRoZSBtb3VzZWRvd24gZXZlbnQgZnJvbSBoYXBwZW5pbmdcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlVGVjaENsaWNrKTtcblxuICAgIC8vIElmIHRoZSBjb250cm9scyB3ZXJlIGhpZGRlbiB3ZSBkb24ndCB3YW50IHRoYXQgdG8gY2hhbmdlIHdpdGhvdXQgYSB0YXAgZXZlbnRcbiAgICAvLyBzbyB3ZSdsbCBjaGVjayBpZiB0aGUgY29udHJvbHMgd2VyZSBhbHJlYWR5IHNob3dpbmcgYmVmb3JlIHJlcG9ydGluZyB1c2VyXG4gICAgLy8gYWN0aXZpdHlcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaFN0YXJ0KTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlVGVjaFRvdWNoTW92ZSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlVGVjaFRvdWNoRW5kKTtcblxuICAgIC8vIFR1cm4gb24gY29tcG9uZW50IHRhcCBldmVudHNcbiAgICB0aGlzLnRlY2guZW1pdFRhcEV2ZW50cygpO1xuXG4gICAgLy8gVGhlIHRhcCBsaXN0ZW5lciBuZWVkcyB0byBjb21lIGFmdGVyIHRoZSB0b3VjaGVuZCBsaXN0ZW5lciBiZWNhdXNlIHRoZSB0YXBcbiAgICAvLyBsaXN0ZW5lciBjYW5jZWxzIG91dCBhbnkgcmVwb3J0ZWRVc2VyQWN0aXZpdHkgd2hlbiBzZXR0aW5nIHVzZXJBY3RpdmUoZmFsc2UpXG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICd0YXAnLCB0aGlzLmhhbmRsZVRlY2hUYXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIHVzZWQgZm9yIGNsaWNrIGFuZCB0YXAgY29udHJvbHMuIFRoaXMgaXMgbmVlZGVkIGZvclxuICAgKiB0b2dnbGluZyB0byBjb250cm9scyBkaXNhYmxlZCwgd2hlcmUgYSB0YXAvdG91Y2ggc2hvdWxkIGRvIG5vdGhpbmcuXG4gICAqL1xuICByZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnMoKSB7XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBqdXN0IHVzZSBgdGhpcy5vZmYoKWAgYmVjYXVzZSB0aGVyZSBtaWdodCBiZSBvdGhlciBuZWVkZWRcbiAgICAvLyBsaXN0ZW5lcnMgYWRkZWQgYnkgdGVjaHMgdGhhdCBleHRlbmQgdGhpcy5cbiAgICB0aGlzLm9mZih0aGlzLnRlY2gsICd0YXAnLCB0aGlzLmhhbmRsZVRlY2hUYXApO1xuICAgIHRoaXMub2ZmKHRoaXMudGVjaCwgJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaFN0YXJ0KTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2gsICd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaE1vdmUpO1xuICAgIHRoaXMub2ZmKHRoaXMudGVjaCwgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmQpO1xuICAgIHRoaXMub2ZmKHRoaXMudGVjaCwgJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlVGVjaENsaWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGF5ZXIgd2FpdHMgZm9yIHRoZSB0ZWNoIHRvIGJlIHJlYWR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVUZWNoUmVhZHkoKSB7XG4gICAgdGhpcy50cmlnZ2VyUmVhZHkoKTtcblxuICAgIC8vIENocm9tZSBhbmQgU2FmYXJpIGJvdGggaGF2ZSBpc3N1ZXMgd2l0aCBhdXRvcGxheS5cbiAgICAvLyBJbiBTYWZhcmkgKDUuMS4xKSwgd2hlbiB3ZSBtb3ZlIHRoZSB2aWRlbyBlbGVtZW50IGludG8gdGhlIGNvbnRhaW5lciBkaXYsIGF1dG9wbGF5IGRvZXNuJ3Qgd29yay5cbiAgICAvLyBJbiBDaHJvbWUgKDE1KSwgaWYgeW91IGhhdmUgYXV0b3BsYXkgKyBhIHBvc3RlciArIG5vIGNvbnRyb2xzLCB0aGUgdmlkZW8gZ2V0cyBoaWRkZW4gKGJ1dCBhdWRpbyBwbGF5cylcbiAgICAvLyBUaGlzIGZpeGVzIGJvdGggaXNzdWVzLiBOZWVkIHRvIHdhaXQgZm9yIEFQSSwgc28gaXQgdXBkYXRlcyBkaXNwbGF5cyBjb3JyZWN0bHlcbiAgICBpZiAodGhpcy50YWcgJiYgdGhpcy5vcHRpb25zXy5hdXRvcGxheSAmJiB0aGlzLnBhdXNlZCgpKSB7XG4gICAgICBkZWxldGUgdGhpcy50YWcucG9zdGVyOyAvLyBDaHJvbWUgRml4LiBGaXhlZCBpbiBDaHJvbWUgdjE2LlxuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIG5hdGl2ZSBjb250cm9scyBhcmUgdXNlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlVGVjaFVzZU5hdGl2ZUNvbnRyb2xzKCkge1xuICAgIHRoaXMudXNpbmdOYXRpdmVDb250cm9scyh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGFnZW50IGJlZ2lucyBsb29raW5nIGZvciBtZWRpYSBkYXRhXG4gICAqIEBldmVudCBsb2Fkc3RhcnRcbiAgICovXG4gIGhhbmRsZVRlY2hMb2FkU3RhcnQoKSB7XG4gICAgLy8gVE9ETzogVXBkYXRlIHRvIHVzZSBgZW1wdGllZGAgZXZlbnQgaW5zdGVhZC4gU2VlICMxMjc3LlxuXG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVuZGVkJyk7XG5cbiAgICAvLyByZXNldCB0aGUgZXJyb3Igc3RhdGVcbiAgICB0aGlzLmVycm9yKG51bGwpO1xuXG4gICAgLy8gSWYgaXQncyBhbHJlYWR5IHBsYXlpbmcgd2Ugd2FudCB0byB0cmlnZ2VyIGEgZmlyc3RwbGF5IGV2ZW50IG5vdy5cbiAgICAvLyBUaGUgZmlyc3RwbGF5IGV2ZW50IHJlbGllcyBvbiBib3RoIHRoZSBwbGF5IGFuZCBsb2Fkc3RhcnQgZXZlbnRzXG4gICAgLy8gd2hpY2ggY2FuIGhhcHBlbiBpbiBhbnkgb3JkZXIgZm9yIGEgbmV3IHNvdXJjZVxuICAgIGlmICghdGhpcy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2Fkc3RhcnQnKTtcbiAgICAgIHRoaXMudHJpZ2dlcignZmlyc3RwbGF5Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlc2V0IHRoZSBoYXNTdGFydGVkIHN0YXRlXG4gICAgICB0aGlzLmhhc1N0YXJ0ZWQoZmFsc2UpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2Fkc3RhcnQnKTtcbiAgICB9XG4gIH1cblxuICBoYXNTdGFydGVkKGhhc1N0YXJ0ZWQpIHtcbiAgICBpZiAoaGFzU3RhcnRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBvbmx5IHVwZGF0ZSBpZiB0aGlzIGlzIGEgbmV3IHZhbHVlXG4gICAgICBpZiAodGhpcy5oYXNTdGFydGVkXyAhPT0gaGFzU3RhcnRlZCkge1xuICAgICAgICB0aGlzLmhhc1N0YXJ0ZWRfID0gaGFzU3RhcnRlZDtcbiAgICAgICAgaWYgKGhhc1N0YXJ0ZWQpIHtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICAgICAgICAvLyB0cmlnZ2VyIHRoZSBmaXJzdHBsYXkgZXZlbnQgaWYgdGhpcyBuZXdseSBoYXMgcGxheWVkXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdmaXJzdHBsYXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiAhIXRoaXMuaGFzU3RhcnRlZF87XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1lZGlhIGJlZ2lucyBvciByZXN1bWVzIHBsYXliYWNrXG4gICAqIEBldmVudCBwbGF5XG4gICAqL1xuICBoYW5kbGVUZWNoUGxheSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGF1c2VkJyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXBsYXlpbmcnKTtcblxuICAgIC8vIGhpZGUgdGhlIHBvc3RlciB3aGVuIHRoZSB1c2VyIGhpdHMgcGxheVxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tbWVkaWEtcGxheVxuICAgIHRoaXMuaGFzU3RhcnRlZCh0cnVlKTtcblxuICAgIHRoaXMudHJpZ2dlcigncGxheScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBtZWRpYSBiZWdpbnMgd2FpdGluZ1xuICAgKiBAZXZlbnQgd2FpdGluZ1xuICAgKi9cbiAgaGFuZGxlVGVjaFdhaXRpbmcoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3dhaXRpbmcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgZm9yIGV2ZW50cyB0aGF0IHNpZ25hbCB0aGF0IHdhaXRpbmcgaGFzIGVuZGVkXG4gICAqIHdoaWNoIGlzIG5vdCBjb25zaXN0ZW50IGJldHdlZW4gYnJvd3NlcnMuIFNlZSAjMTM1MVxuICAgKiBAZXZlbnQgY2FucGxheVxuICAgKi9cbiAgaGFuZGxlVGVjaENhblBsYXkoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2NhbnBsYXknKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgZm9yIGV2ZW50cyB0aGF0IHNpZ25hbCB0aGF0IHdhaXRpbmcgaGFzIGVuZGVkXG4gICAqIHdoaWNoIGlzIG5vdCBjb25zaXN0ZW50IGJldHdlZW4gYnJvd3NlcnMuIFNlZSAjMTM1MVxuICAgKiBAZXZlbnQgY2FucGxheXRocm91Z2hcbiAgICovXG4gIGhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaCgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIHRoaXMudHJpZ2dlcignY2FucGxheXRocm91Z2gnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgZm9yIGV2ZW50cyB0aGF0IHNpZ25hbCB0aGF0IHdhaXRpbmcgaGFzIGVuZGVkXG4gICAqIHdoaWNoIGlzIG5vdCBjb25zaXN0ZW50IGJldHdlZW4gYnJvd3NlcnMuIFNlZSAjMTM1MVxuICAgKiBAZXZlbnQgcGxheWluZ1xuICAgKi9cbiAgaGFuZGxlVGVjaFBsYXlpbmcoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3BsYXlpbmcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuZXZlciB0aGUgcGxheWVyIGlzIGp1bXBpbmcgdG8gYSBuZXcgdGltZVxuICAgKiBAZXZlbnQgc2Vla2luZ1xuICAgKi9cbiAgaGFuZGxlVGVjaFNlZWtpbmcoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXNlZWtpbmcnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3NlZWtpbmcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBwbGF5ZXIgaGFzIGZpbmlzaGVkIGp1bXBpbmcgdG8gYSBuZXcgdGltZVxuICAgKiBAZXZlbnQgc2Vla2VkXG4gICAqL1xuICBoYW5kbGVUZWNoU2Vla2VkKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zZWVraW5nJyk7XG4gICAgdGhpcy50cmlnZ2VyKCdzZWVrZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB0aGUgZmlyc3QgdGltZSBhIHZpZGVvIGlzIHBsYXllZFxuICAgKlxuICAgKiBOb3QgcGFydCBvZiB0aGUgSExTIHNwZWMsIGFuZCB3ZSdyZSBub3Qgc3VyZSBpZiB0aGlzIGlzIHRoZSBiZXN0XG4gICAqIGltcGxlbWVudGF0aW9uIHlldCwgc28gdXNlIHNwYXJpbmdseS4gSWYgeW91IGRvbid0IGhhdmUgYSByZWFzb24gdG9cbiAgICogcHJldmVudCBwbGF5YmFjaywgdXNlIGBteVBsYXllci5vbmUoJ3BsYXknKTtgIGluc3RlYWQuXG4gICAqXG4gICAqIEBldmVudCBmaXJzdHBsYXlcbiAgICovXG4gIGhhbmRsZVRlY2hGaXJzdFBsYXkoKSB7XG4gICAgLy9JZiB0aGUgZmlyc3Qgc3RhcnR0aW1lIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWRcbiAgICAvL3RoZW4gd2Ugd2lsbCBzdGFydCBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGluIHNlY29uZHNcbiAgICBpZih0aGlzLm9wdGlvbnNfWydzdGFydHRpbWUnXSl7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lKHRoaXMub3B0aW9uc19bJ3N0YXJ0dGltZSddKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBtZWRpYSBoYXMgYmVlbiBwYXVzZWRcbiAgICogQGV2ZW50IHBhdXNlXG4gICAqL1xuICBoYW5kbGVUZWNoUGF1c2UoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBsYXlpbmcnKTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtcGF1c2VkJyk7XG4gICAgdGhpcy50cmlnZ2VyKCdwYXVzZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoaWxlIHRoZSB1c2VyIGFnZW50IGlzIGRvd25sb2FkaW5nIG1lZGlhIGRhdGFcbiAgICogQGV2ZW50IHByb2dyZXNzXG4gICAqL1xuICBoYW5kbGVUZWNoUHJvZ3Jlc3MoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdwcm9ncmVzcycpO1xuXG4gICAgLy8gQWRkIGN1c3RvbSBldmVudCBmb3Igd2hlbiBzb3VyY2UgaXMgZmluaXNoZWQgZG93bmxvYWRpbmcuXG4gICAgaWYgKHRoaXMuYnVmZmVyZWRQZXJjZW50KCkgPT09IDEpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignbG9hZGVkYWxsZGF0YScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBlbmQgb2YgdGhlIG1lZGlhIHJlc291cmNlIGlzIHJlYWNoZWQgKGN1cnJlbnRUaW1lID09IGR1cmF0aW9uKVxuICAgKiBAZXZlbnQgZW5kZWRcbiAgICovXG4gIGhhbmRsZVRlY2hFbmRlZCgpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtZW5kZWQnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zX1snbG9vcCddKSB7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lKDApO1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignZW5kZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBkdXJhdGlvbiBvZiB0aGUgbWVkaWEgcmVzb3VyY2UgaXMgZmlyc3Qga25vd24gb3IgY2hhbmdlZFxuICAgKiBAZXZlbnQgZHVyYXRpb25jaGFuZ2VcbiAgICovXG4gIGhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZSgpIHtcbiAgICB0aGlzLnVwZGF0ZUR1cmF0aW9uKCk7XG4gICAgdGhpcy50cmlnZ2VyKCdkdXJhdGlvbmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGNsaWNrIG9uIHRoZSBtZWRpYSBlbGVtZW50IHRvIHBsYXkvcGF1c2VcbiAgICovXG4gIGhhbmRsZVRlY2hDbGljayhldmVudCkge1xuICAgIC8vIFdlJ3JlIHVzaW5nIG1vdXNlZG93biB0byBkZXRlY3QgY2xpY2tzIHRoYW5rcyB0byBGbGFzaCwgYnV0IG1vdXNlZG93blxuICAgIC8vIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgd2l0aCByaWdodC1jbGlja3MsIHNvIHdlIG5lZWQgdG8gcHJldmVudCB0aGF0XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgLy8gV2hlbiBjb250cm9scyBhcmUgZGlzYWJsZWQgYSBjbGljayBzaG91bGQgbm90IHRvZ2dsZSBwbGF5YmFjayBiZWNhdXNlXG4gICAgLy8gdGhlIGNsaWNrIGlzIGNvbnNpZGVyZWQgYSBjb250cm9sXG4gICAgaWYgKHRoaXMuY29udHJvbHMoKSkge1xuICAgICAgaWYgKHRoaXMucGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhIHRhcCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gSXQgd2lsbCB0b2dnbGUgdGhlIHVzZXJcbiAgICogYWN0aXZpdHkgc3RhdGUsIHdoaWNoIGhpZGVzIGFuZCBzaG93cyB0aGUgY29udHJvbHMuXG4gICAqL1xuICBoYW5kbGVUZWNoVGFwKCkge1xuICAgIHRoaXMudXNlckFjdGl2ZSghdGhpcy51c2VyQWN0aXZlKCkpO1xuICB9XG5cbiAgaGFuZGxlVGVjaFRvdWNoU3RhcnQoKSB7XG4gICAgdGhpcy51c2VyV2FzQWN0aXZlID0gdGhpcy51c2VyQWN0aXZlKCk7XG4gIH1cblxuICBoYW5kbGVUZWNoVG91Y2hNb3ZlKCkge1xuICAgIGlmICh0aGlzLnVzZXJXYXNBY3RpdmUpe1xuICAgICAgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVUZWNoVG91Y2hFbmQoZXZlbnQpIHtcbiAgICAvLyBTdG9wIHRoZSBtb3VzZSBldmVudHMgZnJvbSBhbHNvIGhhcHBlbmluZ1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBkdXJhdGlvbiBvZiB0aGUgcGxheWVyIHVzaW5nIHRoZSB0ZWNoXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1cGRhdGVEdXJhdGlvbigpIHtcbiAgICAvLyBBbGxvd3MgZm9yIGNhY2hpbmcgdmFsdWUgaW5zdGVhZCBvZiBhc2tpbmcgcGxheWVyIGVhY2ggdGltZS5cbiAgICAvLyBXZSBuZWVkIHRvIGdldCB0aGUgdGVjaEdldCByZXNwb25zZSBhbmQgY2hlY2sgZm9yIGEgdmFsdWUgc28gd2UgZG9uJ3RcbiAgICAvLyBhY2NpZGVudGFsbHkgY2F1c2UgdGhlIHN0YWNrIHRvIGJsb3cgdXAuXG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy50ZWNoR2V0KCdkdXJhdGlvbicpO1xuICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgaWYgKGR1cmF0aW9uIDwgMCkge1xuICAgICAgICBkdXJhdGlvbiA9IEluZmluaXR5O1xuICAgICAgfVxuICAgICAgdGhpcy5kdXJhdGlvbihkdXJhdGlvbik7XG4gICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIHN0cmVhbSBpcyBsaXZlIGFuZCBwcm9wYWdhdGUgc3R5bGVzIGRvd24gdG8gVUkuXG4gICAgICBpZiAoZHVyYXRpb24gPT09IEluZmluaXR5KSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1saXZlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtbGl2ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBwbGF5ZXIgc3dpdGNoZXMgaW4gb3Igb3V0IG9mIGZ1bGxzY3JlZW4gbW9kZVxuICAgKiBAZXZlbnQgZnVsbHNjcmVlbmNoYW5nZVxuICAgKi9cbiAgaGFuZGxlRnVsbHNjcmVlbkNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSkge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWZ1bGxzY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWZ1bGxzY3JlZW4nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogbmF0aXZlIGNsaWNrIGV2ZW50cyBvbiB0aGUgU1dGIGFyZW4ndCB0cmlnZ2VyZWQgb24gSUUxMSwgV2luOC4xUlRcbiAgICogdXNlIHN0YWdlY2xpY2sgZXZlbnRzIHRyaWdnZXJlZCBmcm9tIGluc2lkZSB0aGUgU1dGIGluc3RlYWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZVN0YWdlQ2xpY2soKSB7XG4gICAgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKTtcbiAgfVxuXG4gIGhhbmRsZVRlY2hGdWxsc2NyZWVuQ2hhbmdlKCkge1xuICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBsb2FkaW5nIG9mIGFuIGF1ZGlvL3ZpZGVvXG4gICAqIEBldmVudCBlcnJvclxuICAgKi9cbiAgaGFuZGxlVGVjaEVycm9yKCkge1xuICAgIHRoaXMuZXJyb3IodGhpcy50ZWNoLmVycm9yKCkuY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBpcyBpbnRlbnRpb25hbGx5IG5vdCBnZXR0aW5nIG1lZGlhIGRhdGFcbiAgICogQGV2ZW50IHN1c3BlbmRcbiAgICovXG4gIGhhbmRsZVRlY2hTdXNwZW5kKCkge1xuICAgIHRoaXMudHJpZ2dlcignc3VzcGVuZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIGxvYWRpbmcgb2YgYW4gYXVkaW8vdmlkZW8gaXMgYWJvcnRlZFxuICAgKiBAZXZlbnQgYWJvcnRcbiAgICovXG4gIGhhbmRsZVRlY2hBYm9ydCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2Fib3J0Jyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgY3VycmVudCBwbGF5bGlzdCBpcyBlbXB0eVxuICAgKiBAZXZlbnQgZW1wdGllZFxuICAgKi9cbiAgaGFuZGxlVGVjaEVtcHRpZWQoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdlbXB0aWVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBpcyB0cnlpbmcgdG8gZ2V0IG1lZGlhIGRhdGEsIGJ1dCBkYXRhIGlzIG5vdCBhdmFpbGFibGVcbiAgICogQGV2ZW50IHN0YWxsZWRcbiAgICovXG4gIGhhbmRsZVRlY2hTdGFsbGVkKCkge1xuICAgIHRoaXMudHJpZ2dlcignc3RhbGxlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIGJyb3dzZXIgaGFzIGxvYWRlZCBtZXRhIGRhdGEgZm9yIHRoZSBhdWRpby92aWRlb1xuICAgKiBAZXZlbnQgbG9hZGVkbWV0YWRhdGFcbiAgICovXG4gIGhhbmRsZVRlY2hMb2FkZWRNZXRhRGF0YSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZG1ldGFkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgc3dmIGlzc3VlcyBhIG1ldGFkYXRhdXBkYXRlIGV2ZW50LCBhbiBldmVudCBzcGVjaWZpYyB0byBvdXJcbiAgICogQWJhY2FzdCBzdHJlYW0gdGhhdCB1c2VzIEZsYXNoJ3Mgb25NZXRhRGF0YSBldmVudCB0byBzdXJmYWNlIHN5bmNlZCBiYW5uZXJcbiAgICogYWRzIHRvIGxpc3RlbmVycy5cbiAgICogQGV2ZW50IG1ldGFkYXRhdXBkYXRlXG4gICAqIEB0b2RvIEhvdyB0byB3ZSBwYXNzIHRoZSBtZXRhZGF0YSBvYmplY3QgZnJvbSBGbGFzaCB0byBKYXZhU2NyaXB0P1xuICAgKi9cbiAgaGFuZGxlTWV0YURhdGFVcGRhdGUoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdtZXRhZGF0YXVwZGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIGJyb3dzZXIgaGFzIGxvYWRlZCB0aGUgY3VycmVudCBmcmFtZSBvZiB0aGUgYXVkaW8vdmlkZW9cbiAgICogQGV2ZW50IGxvYWRkYXRhXG4gICAqL1xuICBoYW5kbGVUZWNoTG9hZGVkRGF0YSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZGRhdGEnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGhhcyBjaGFuZ2VkXG4gICAqIEBldmVudCB0aW1ldXBkYXRlXG4gICAqL1xuICBoYW5kbGVUZWNoVGltZVVwZGF0ZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3RpbWV1cGRhdGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBwbGF5aW5nIHNwZWVkIG9mIHRoZSBhdWRpby92aWRlbyBpcyBjaGFuZ2VkXG4gICAqIEBldmVudCByYXRlY2hhbmdlXG4gICAqL1xuICBoYW5kbGVUZWNoUmF0ZUNoYW5nZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3JhdGVjaGFuZ2UnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSB2b2x1bWUgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAZXZlbnQgdm9sdW1lY2hhbmdlXG4gICAqL1xuICBoYW5kbGVUZWNoVm9sdW1lQ2hhbmdlKCkge1xuICAgIHRoaXMudHJpZ2dlcigndm9sdW1lY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgdGV4dCB0cmFjayBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIEBldmVudCB0ZXh0dHJhY2tjaGFuZ2VcbiAgICovXG4gIG9uVGV4dFRyYWNrQ2hhbmdlKCkge1xuICAgIHRoaXMudHJpZ2dlcigndGV4dHRyYWNrY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogT2JqZWN0IGZvciBjYWNoZWQgdmFsdWVzLlxuICAgKi9cbiAgZ2V0Q2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVfO1xuICB9XG5cbiAgLy8gUGFzcyB2YWx1ZXMgdG8gdGhlIHBsYXliYWNrIHRlY2hcbiAgdGVjaENhbGwobWV0aG9kLCBhcmcpIHtcbiAgICAvLyBJZiBpdCdzIG5vdCByZWFkeSB5ZXQsIGNhbGwgbWV0aG9kIHdoZW4gaXQgaXNcbiAgICBpZiAodGhpcy50ZWNoICYmICF0aGlzLnRlY2guaXNSZWFkeV8pIHtcbiAgICAgIHRoaXMudGVjaC5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgICB0aGlzW21ldGhvZF0oYXJnKTtcbiAgICAgIH0pO1xuXG4gICAgLy8gT3RoZXJ3aXNlIGNhbGwgbWV0aG9kIG5vd1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnRlY2hbbWV0aG9kXShhcmcpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIExpYi5sb2coZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGNhbGxzIGNhbid0IHdhaXQgZm9yIHRoZSB0ZWNoLCBhbmQgc29tZXRpbWVzIGRvbid0IG5lZWQgdG8uXG4gIHRlY2hHZXQobWV0aG9kKSB7XG4gICAgaWYgKHRoaXMudGVjaCAmJiB0aGlzLnRlY2guaXNSZWFkeV8pIHtcblxuICAgICAgLy8gRmxhc2ggbGlrZXMgdG8gZGllIGFuZCByZWxvYWQgd2hlbiB5b3UgaGlkZSBvciByZXBvc2l0aW9uIGl0LlxuICAgICAgLy8gSW4gdGhlc2UgY2FzZXMgdGhlIG9iamVjdCBtZXRob2RzIGdvIGF3YXkgYW5kIHdlIGdldCBlcnJvcnMuXG4gICAgICAvLyBXaGVuIHRoYXQgaGFwcGVucyB3ZSdsbCBjYXRjaCB0aGUgZXJyb3JzIGFuZCBpbmZvcm0gdGVjaCB0aGF0IGl0J3Mgbm90IHJlYWR5IGFueSBtb3JlLlxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVjaFttZXRob2RdKCk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgLy8gV2hlbiBidWlsZGluZyBhZGRpdGlvbmFsIHRlY2ggbGlicywgYW4gZXhwZWN0ZWQgbWV0aG9kIG1heSBub3QgYmUgZGVmaW5lZCB5ZXRcbiAgICAgICAgaWYgKHRoaXMudGVjaFttZXRob2RdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBMaWIubG9nKGBWaWRlby5qczogJHttZXRob2R9IG1ldGhvZCBub3QgZGVmaW5lZCBmb3IgJHt0aGlzLnRlY2hOYW1lfSBwbGF5YmFjayB0ZWNobm9sb2d5LmAsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdoZW4gYSBtZXRob2QgaXNuJ3QgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QgaXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgICAgIExpYi5sb2coYFZpZGVvLmpzOiAke21ldGhvZH0gdW5hdmFpbGFibGUgb24gJHt0aGlzLnRlY2hOYW1lfSBwbGF5YmFjayB0ZWNobm9sb2d5IGVsZW1lbnQuYCwgZSk7XG4gICAgICAgICAgICB0aGlzLnRlY2guaXNSZWFkeV8gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTGliLmxvZyhlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc3RhcnQgbWVkaWEgcGxheWJhY2tcbiAgICpcbiAgICogICAgIG15UGxheWVyLnBsYXkoKTtcbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfSBzZWxmXG4gICAqL1xuICBwbGF5KCkge1xuICAgIHRoaXMudGVjaENhbGwoJ3BsYXknKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXVzZSB0aGUgdmlkZW8gcGxheWJhY2tcbiAgICpcbiAgICogICAgIG15UGxheWVyLnBhdXNlKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZlxuICAgKi9cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy50ZWNoQ2FsbCgncGF1c2UnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcGxheWVyIGlzIHBhdXNlZFxuICAgKlxuICAgKiAgICAgdmFyIGlzUGF1c2VkID0gbXlQbGF5ZXIucGF1c2VkKCk7XG4gICAqICAgICB2YXIgaXNQbGF5aW5nID0gIW15UGxheWVyLnBhdXNlZCgpO1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBmYWxzZSBpZiB0aGUgbWVkaWEgaXMgY3VycmVudGx5IHBsYXlpbmcsIG9yIHRydWUgb3RoZXJ3aXNlXG4gICAqL1xuICBwYXVzZWQoKSB7XG4gICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgb2YgcGF1c2VkIHNob3VsZCBiZSB0cnVlIChpbiBTYWZhcmkgaXQncyBhY3R1YWxseSBmYWxzZSlcbiAgICByZXR1cm4gKHRoaXMudGVjaEdldCgncGF1c2VkJykgPT09IGZhbHNlKSA/IGZhbHNlIDogdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHVzZXIgaXMgXCJzY3J1YmJpbmdcIi4gU2NydWJiaW5nIGlzIHdoZW4gdGhlIHVzZXJcbiAgKiBoYXMgY2xpY2tlZCB0aGUgcHJvZ3Jlc3MgYmFyIGhhbmRsZSBhbmQgaXMgZHJhZ2dpbmcgaXQgYWxvbmcgdGhlIHByb2dyZXNzIGJhci5cbiAgKiBAcGFyYW0gIHtCb29sZWFufSBpc1NjcnViYmluZyAgIFRydWUvZmFsc2UgdGhlIHVzZXIgaXMgc2NydWJiaW5nXG4gICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICAgICBUaGUgc2NydWJiaW5nIHN0YXR1cyB3aGVuIGdldHRpbmdcbiAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgIFRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICovXG4gIHNjcnViYmluZyhpc1NjcnViYmluZykge1xuICAgIGlmIChpc1NjcnViYmluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNjcnViYmluZ18gPSAhIWlzU2NydWJiaW5nO1xuXG4gICAgICBpZiAoaXNTY3J1YmJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXNjcnViYmluZycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNjcnViYmluZycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zY3J1YmJpbmdfO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgdGltZSAoaW4gc2Vjb25kcylcbiAgICpcbiAgICogICAgIC8vIGdldFxuICAgKiAgICAgdmFyIHdoZXJlWW91QXQgPSBteVBsYXllci5jdXJyZW50VGltZSgpO1xuICAgKlxuICAgKiAgICAgLy8gc2V0XG4gICAqICAgICBteVBsYXllci5jdXJyZW50VGltZSgxMjApOyAvLyAyIG1pbnV0ZXMgaW50byB0aGUgdmlkZW9cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZz19IHNlY29uZHMgVGhlIHRpbWUgdG8gc2VlayB0b1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBUaGUgdGltZSBpbiBzZWNvbmRzLCB3aGVuIG5vdCBzZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gICAgc2VsZiwgd2hlbiB0aGUgY3VycmVudCB0aW1lIGlzIHNldFxuICAgKi9cbiAgY3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgIGlmIChzZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gY2FjaGUgbGFzdCBjdXJyZW50VGltZSBhbmQgcmV0dXJuLiBkZWZhdWx0IHRvIDAgc2Vjb25kc1xuICAgIC8vXG4gICAgLy8gQ2FjaGluZyB0aGUgY3VycmVudFRpbWUgaXMgbWVhbnQgdG8gcHJldmVudCBhIG1hc3NpdmUgYW1vdW50IG9mIHJlYWRzIG9uIHRoZSB0ZWNoJ3NcbiAgICAvLyBjdXJyZW50VGltZSB3aGVuIHNjcnViYmluZywgYnV0IG1heSBub3QgcHJvdmlkZSBtdWNoIHBlcmZvcm1hbmNlIGJlbmVmaXQgYWZ0ZXJhbGwuXG4gICAgLy8gU2hvdWxkIGJlIHRlc3RlZC4gQWxzbyBzb21ldGhpbmcgaGFzIHRvIHJlYWQgdGhlIGFjdHVhbCBjdXJyZW50IHRpbWUgb3IgdGhlIGNhY2hlIHdpbGxcbiAgICAvLyBuZXZlciBnZXQgdXBkYXRlZC5cbiAgICByZXR1cm4gdGhpcy5jYWNoZV8uY3VycmVudFRpbWUgPSAodGhpcy50ZWNoR2V0KCdjdXJyZW50VGltZScpIHx8IDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbGVuZ3RoIGluIHRpbWUgb2YgdGhlIHZpZGVvIGluIHNlY29uZHNcbiAgICpcbiAgICogICAgIHZhciBsZW5ndGhPZlZpZGVvID0gbXlQbGF5ZXIuZHVyYXRpb24oKTtcbiAgICpcbiAgICogKipOT1RFKio6IFRoZSB2aWRlbyBtdXN0IGhhdmUgc3RhcnRlZCBsb2FkaW5nIGJlZm9yZSB0aGUgZHVyYXRpb24gY2FuIGJlXG4gICAqIGtub3duLCBhbmQgaW4gdGhlIGNhc2Ugb2YgRmxhc2gsIG1heSBub3QgYmUga25vd24gdW50aWwgdGhlIHZpZGVvIHN0YXJ0c1xuICAgKiBwbGF5aW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBkdXJhdGlvbiBvZiB0aGUgdmlkZW8gaW4gc2Vjb25kc1xuICAgKi9cbiAgZHVyYXRpb24oc2Vjb25kcykge1xuICAgIGlmIChzZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgLy8gY2FjaGUgdGhlIGxhc3Qgc2V0IHZhbHVlIGZvciBvcHRpbWl6ZWQgc2NydWJiaW5nIChlc3AuIEZsYXNoKVxuICAgICAgdGhpcy5jYWNoZV8uZHVyYXRpb24gPSBwYXJzZUZsb2F0KHNlY29uZHMpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYWNoZV8uZHVyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy51cGRhdGVEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlXy5kdXJhdGlvbiB8fCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgaG93IG11Y2ggdGltZSBpcyBsZWZ0LlxuICAgKlxuICAgKiAgICAgdmFyIHRpbWVMZWZ0ID0gbXlQbGF5ZXIucmVtYWluaW5nVGltZSgpO1xuICAgKlxuICAgKiBOb3QgYSBuYXRpdmUgdmlkZW8gZWxlbWVudCBmdW5jdGlvbiwgYnV0IHVzZWZ1bFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSB0aW1lIHJlbWFpbmluZyBpbiBzZWNvbmRzXG4gICAqL1xuICByZW1haW5pbmdUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLmR1cmF0aW9uKCkgLSB0aGlzLmN1cnJlbnRUaW1lKCk7XG4gIH1cblxuICAvLyBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL3ZpZGVvLmh0bWwjZG9tLW1lZGlhLWJ1ZmZlcmVkXG4gIC8vIEJ1ZmZlcmVkIHJldHVybnMgYSB0aW1lcmFuZ2Ugb2JqZWN0LlxuICAvLyBLaW5kIG9mIGxpa2UgYW4gYXJyYXkgb2YgcG9ydGlvbnMgb2YgdGhlIHZpZGVvIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuXG5cbiAgLyoqXG4gICAqIEdldCBhIFRpbWVSYW5nZSBvYmplY3Qgd2l0aCB0aGUgdGltZXMgb2YgdGhlIHZpZGVvIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWRcbiAgICpcbiAgICogSWYgeW91IGp1c3Qgd2FudCB0aGUgcGVyY2VudCBvZiB0aGUgdmlkZW8gdGhhdCdzIGJlZW4gZG93bmxvYWRlZCxcbiAgICogdXNlIGJ1ZmZlcmVkUGVyY2VudC5cbiAgICpcbiAgICogICAgIC8vIE51bWJlciBvZiBkaWZmZXJlbnQgcmFuZ2VzIG9mIHRpbWUgaGF2ZSBiZWVuIGJ1ZmZlcmVkLiBVc3VhbGx5IDEuXG4gICAqICAgICBudW1iZXJPZlJhbmdlcyA9IGJ1ZmZlcmVkVGltZVJhbmdlLmxlbmd0aCxcbiAgICpcbiAgICogICAgIC8vIFRpbWUgaW4gc2Vjb25kcyB3aGVuIHRoZSBmaXJzdCByYW5nZSBzdGFydHMuIFVzdWFsbHkgMC5cbiAgICogICAgIGZpcnN0UmFuZ2VTdGFydCA9IGJ1ZmZlcmVkVGltZVJhbmdlLnN0YXJ0KDApLFxuICAgKlxuICAgKiAgICAgLy8gVGltZSBpbiBzZWNvbmRzIHdoZW4gdGhlIGZpcnN0IHJhbmdlIGVuZHNcbiAgICogICAgIGZpcnN0UmFuZ2VFbmQgPSBidWZmZXJlZFRpbWVSYW5nZS5lbmQoMCksXG4gICAqXG4gICAqICAgICAvLyBMZW5ndGggaW4gc2Vjb25kcyBvZiB0aGUgZmlyc3QgdGltZSByYW5nZVxuICAgKiAgICAgZmlyc3RSYW5nZUxlbmd0aCA9IGZpcnN0UmFuZ2VFbmQgLSBmaXJzdFJhbmdlU3RhcnQ7XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gQSBtb2NrIFRpbWVSYW5nZSBvYmplY3QgKGZvbGxvd2luZyBIVE1MIHNwZWMpXG4gICAqL1xuICBidWZmZXJlZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hHZXQoJ2J1ZmZlcmVkJyk7XG5cbiAgICBpZiAoIWJ1ZmZlcmVkIHx8ICFidWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIGJ1ZmZlcmVkID0gTGliLmNyZWF0ZVRpbWVSYW5nZSgwLDApO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXJlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBlcmNlbnQgKGFzIGEgZGVjaW1hbCkgb2YgdGhlIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWRcbiAgICpcbiAgICogICAgIHZhciBob3dNdWNoSXNEb3dubG9hZGVkID0gbXlQbGF5ZXIuYnVmZmVyZWRQZXJjZW50KCk7XG4gICAqXG4gICAqIDAgbWVhbnMgbm9uZSwgMSBtZWFucyBhbGwuXG4gICAqIChUaGlzIG1ldGhvZCBpc24ndCBpbiB0aGUgSFRNTDUgc3BlYywgYnV0IGl0J3MgdmVyeSBjb252ZW5pZW50KVxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwZXJjZW50XG4gICAqL1xuICBidWZmZXJlZFBlcmNlbnQoKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpLFxuICAgICAgICBidWZmZXJlZCA9IHRoaXMuYnVmZmVyZWQoKSxcbiAgICAgICAgYnVmZmVyZWREdXJhdGlvbiA9IDAsXG4gICAgICAgIHN0YXJ0LCBlbmQ7XG5cbiAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpPTA7IGk8YnVmZmVyZWQubGVuZ3RoOyBpKyspe1xuICAgICAgc3RhcnQgPSBidWZmZXJlZC5zdGFydChpKTtcbiAgICAgIGVuZCAgID0gYnVmZmVyZWQuZW5kKGkpO1xuXG4gICAgICAvLyBidWZmZXJlZCBlbmQgY2FuIGJlIGJpZ2dlciB0aGFuIGR1cmF0aW9uIGJ5IGEgdmVyeSBzbWFsbCBmcmFjdGlvblxuICAgICAgaWYgKGVuZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgIGVuZCA9IGR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBidWZmZXJlZER1cmF0aW9uICs9IGVuZCAtIHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXJlZER1cmF0aW9uIC8gZHVyYXRpb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBlbmRpbmcgdGltZSBvZiB0aGUgbGFzdCBidWZmZXJlZCB0aW1lIHJhbmdlXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZCBpbiB0aGUgcHJvZ3Jlc3MgYmFyIHRvIGVuY2Fwc3VsYXRlIGFsbCB0aW1lIHJhbmdlcy5cbiAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgZW5kIG9mIHRoZSBsYXN0IGJ1ZmZlcmVkIHRpbWUgcmFuZ2VcbiAgICovXG4gIGJ1ZmZlcmVkRW5kKCkge1xuICAgIHZhciBidWZmZXJlZCA9IHRoaXMuYnVmZmVyZWQoKSxcbiAgICAgICAgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCksXG4gICAgICAgIGVuZCA9IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGgtMSk7XG5cbiAgICBpZiAoZW5kID4gZHVyYXRpb24pIHtcbiAgICAgIGVuZCA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgY3VycmVudCB2b2x1bWUgb2YgdGhlIG1lZGlhXG4gICAqXG4gICAqICAgICAvLyBnZXRcbiAgICogICAgIHZhciBob3dMb3VkSXNJdCA9IG15UGxheWVyLnZvbHVtZSgpO1xuICAgKlxuICAgKiAgICAgLy8gc2V0XG4gICAqICAgICBteVBsYXllci52b2x1bWUoMC41KTsgLy8gU2V0IHZvbHVtZSB0byBoYWxmXG4gICAqXG4gICAqIDAgaXMgb2ZmIChtdXRlZCksIDEuMCBpcyBhbGwgdGhlIHdheSB1cCwgMC41IGlzIGhhbGYgd2F5LlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHBlcmNlbnRBc0RlY2ltYWwgVGhlIG5ldyB2b2x1bWUgYXMgYSBkZWNpbWFsIHBlcmNlbnRcbiAgICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgIFRoZSBjdXJyZW50IHZvbHVtZSwgd2hlbiBnZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gICAgICAgICAgICAgIHNlbGYsIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgdm9sdW1lKHBlcmNlbnRBc0RlY2ltYWwpIHtcbiAgICBsZXQgdm9sO1xuXG4gICAgaWYgKHBlcmNlbnRBc0RlY2ltYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdm9sID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcGFyc2VGbG9hdChwZXJjZW50QXNEZWNpbWFsKSkpOyAvLyBGb3JjZSB2YWx1ZSB0byBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgIHRoaXMuY2FjaGVfLnZvbHVtZSA9IHZvbDtcbiAgICAgIHRoaXMudGVjaENhbGwoJ3NldFZvbHVtZScsIHZvbCk7XG4gICAgICBMaWIuc2V0TG9jYWxTdG9yYWdlKCd2b2x1bWUnLCB2b2wpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byAxIHdoZW4gcmV0dXJuaW5nIGN1cnJlbnQgdm9sdW1lLlxuICAgIHZvbCA9IHBhcnNlRmxvYXQodGhpcy50ZWNoR2V0KCd2b2x1bWUnKSk7XG4gICAgcmV0dXJuIChpc05hTih2b2wpKSA/IDEgOiB2b2w7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbXV0ZWQgc3RhdGUsIG9yIHR1cm4gbXV0ZSBvbiBvciBvZmZcbiAgICpcbiAgICogICAgIC8vIGdldFxuICAgKiAgICAgdmFyIGlzVm9sdW1lTXV0ZWQgPSBteVBsYXllci5tdXRlZCgpO1xuICAgKlxuICAgKiAgICAgLy8gc2V0XG4gICAqICAgICBteVBsYXllci5tdXRlZCh0cnVlKTsgLy8gbXV0ZSB0aGUgdm9sdW1lXG4gICAqXG4gICAqIEBwYXJhbSAge0Jvb2xlYW49fSBtdXRlZCBUcnVlIHRvIG11dGUsIGZhbHNlIHRvIHVubXV0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIG11dGUgaXMgb24sIGZhbHNlIGlmIG5vdCwgd2hlbiBnZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZiwgd2hlbiBzZXR0aW5nIG11dGVcbiAgICovXG4gIG11dGVkKG11dGVkKSB7XG4gICAgaWYgKG11dGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGVjaENhbGwoJ3NldE11dGVkJywgbXV0ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ211dGVkJykgfHwgZmFsc2U7IC8vIERlZmF1bHQgdG8gZmFsc2VcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGN1cnJlbnQgdGVjaCBjYW4gc3VwcG9ydCBuYXRpdmUgZnVsbHNjcmVlblxuICAvLyAoZS5nLiB3aXRoIGJ1aWx0IGluIGNvbnRyb2xzIGxpa2UgaU9TLCBzbyBub3Qgb3VyIGZsYXNoIHN3ZilcbiAgc3VwcG9ydHNGdWxsU2NyZWVuKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ3N1cHBvcnRzRnVsbFNjcmVlbicpIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBwbGF5ZXIgaXMgaW4gZnVsbHNjcmVlbiBtb2RlXG4gICAqXG4gICAqICAgICAvLyBnZXRcbiAgICogICAgIHZhciBmdWxsc2NyZWVuT3JOb3QgPSBteVBsYXllci5pc0Z1bGxzY3JlZW4oKTtcbiAgICpcbiAgICogICAgIC8vIHNldFxuICAgKiAgICAgbXlQbGF5ZXIuaXNGdWxsc2NyZWVuKHRydWUpOyAvLyB0ZWxsIHRoZSBwbGF5ZXIgaXQncyBpbiBmdWxsc2NyZWVuXG4gICAqXG4gICAqIE5PVEU6IEFzIG9mIHRoZSBsYXRlc3QgSFRNTDUgc3BlYywgaXNGdWxsc2NyZWVuIGlzIG5vIGxvbmdlciBhbiBvZmZpY2lhbFxuICAgKiBwcm9wZXJ0eSBhbmQgaW5zdGVhZCBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCBpcyB1c2VkLiBCdXQgaXNGdWxsc2NyZWVuIGlzXG4gICAqIHN0aWxsIGEgdmFsdWFibGUgcHJvcGVydHkgZm9yIGludGVybmFsIHBsYXllciB3b3JraW5ncy5cbiAgICpcbiAgICogQHBhcmFtICB7Qm9vbGVhbj19IGlzRlMgVXBkYXRlIHRoZSBwbGF5ZXIncyBmdWxsc2NyZWVuIHN0YXRlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgZnVsbHNjcmVlbiwgZmFsc2UgaWYgbm90XG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZiwgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBpc0Z1bGxzY3JlZW4oaXNGUykge1xuICAgIGlmIChpc0ZTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNGdWxsc2NyZWVuXyA9ICEhaXNGUztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gISF0aGlzLmlzRnVsbHNjcmVlbl87XG4gIH1cblxuICAvKipcbiAgICogT2xkIG5hbWluZyBmb3IgaXNGdWxsc2NyZWVuKClcbiAgICogQGRlcHJlY2F0ZWQgZm9yIGxvd2VyY2FzZSAncycgdmVyc2lvblxuICAgKi9cbiAgaXNGdWxsU2NyZWVuKGlzRlMpIHtcbiAgICBMaWIubG9nLndhcm4oJ3BsYXllci5pc0Z1bGxTY3JlZW4oKSBoYXMgYmVlbiBkZXByZWNhdGVkLCB1c2UgcGxheWVyLmlzRnVsbHNjcmVlbigpIHdpdGggYSBsb3dlcmNhc2UgXCJzXCIpJyk7XG4gICAgcmV0dXJuIHRoaXMuaXNGdWxsc2NyZWVuKGlzRlMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlIHRoZSBzaXplIG9mIHRoZSB2aWRlbyB0byBmdWxsIHNjcmVlblxuICAgKlxuICAgKiAgICAgbXlQbGF5ZXIucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICpcbiAgICogSW4gc29tZSBicm93c2VycywgZnVsbCBzY3JlZW4gaXMgbm90IHN1cHBvcnRlZCBuYXRpdmVseSwgc28gaXQgZW50ZXJzXG4gICAqIFwiZnVsbCB3aW5kb3cgbW9kZVwiLCB3aGVyZSB0aGUgdmlkZW8gZmlsbHMgdGhlIGJyb3dzZXIgd2luZG93LlxuICAgKiBJbiBicm93c2VycyBhbmQgZGV2aWNlcyB0aGF0IHN1cHBvcnQgbmF0aXZlIGZ1bGwgc2NyZWVuLCBzb21ldGltZXMgdGhlXG4gICAqIGJyb3dzZXIncyBkZWZhdWx0IGNvbnRyb2xzIHdpbGwgYmUgc2hvd24sIGFuZCBub3QgdGhlIFZpZGVvLmpzIGN1c3RvbSBza2luLlxuICAgKiBUaGlzIGluY2x1ZGVzIG1vc3QgbW9iaWxlIGRldmljZXMgKGlPUywgQW5kcm9pZCkgYW5kIG9sZGVyIHZlcnNpb25zIG9mXG4gICAqIFNhZmFyaS5cbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfSBzZWxmXG4gICAqL1xuICByZXF1ZXN0RnVsbHNjcmVlbigpIHtcbiAgICB2YXIgZnNBcGkgPSBGdWxsc2NyZWVuQXBpO1xuXG4gICAgdGhpcy5pc0Z1bGxzY3JlZW4odHJ1ZSk7XG5cbiAgICBpZiAoZnNBcGkpIHtcbiAgICAgIC8vIHRoZSBicm93c2VyIHN1cHBvcnRzIGdvaW5nIGZ1bGxzY3JlZW4gYXQgdGhlIGVsZW1lbnQgbGV2ZWwgc28gd2UgY2FuXG4gICAgICAvLyB0YWtlIHRoZSBjb250cm9scyBmdWxsc2NyZWVuIGFzIHdlbGwgYXMgdGhlIHZpZGVvXG5cbiAgICAgIC8vIFRyaWdnZXIgZnVsbHNjcmVlbmNoYW5nZSBldmVudCBhZnRlciBjaGFuZ2VcbiAgICAgIC8vIFdlIGhhdmUgdG8gc3BlY2lmaWNhbGx5IGFkZCB0aGlzIGVhY2ggdGltZSwgYW5kIHJlbW92ZVxuICAgICAgLy8gd2hlbiBjYW5jZWxpbmcgZnVsbHNjcmVlbi4gT3RoZXJ3aXNlIGlmIHRoZXJlJ3MgbXVsdGlwbGVcbiAgICAgIC8vIHBsYXllcnMgb24gYSBwYWdlLCB0aGV5IHdvdWxkIGFsbCBiZSByZWFjdGluZyB0byB0aGUgc2FtZSBmdWxsc2NyZWVuXG4gICAgICAvLyBldmVudHNcbiAgICAgIEV2ZW50cy5vbihkb2N1bWVudCwgZnNBcGlbJ2Z1bGxzY3JlZW5jaGFuZ2UnXSwgTGliLmJpbmQodGhpcywgZnVuY3Rpb24gZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlKGUpe1xuICAgICAgICB0aGlzLmlzRnVsbHNjcmVlbihkb2N1bWVudFtmc0FwaS5mdWxsc2NyZWVuRWxlbWVudF0pO1xuXG4gICAgICAgIC8vIElmIGNhbmNlbGxpbmcgZnVsbHNjcmVlbiwgcmVtb3ZlIGV2ZW50IGxpc3RlbmVyLlxuICAgICAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBFdmVudHMub2ZmKGRvY3VtZW50LCBmc0FwaVsnZnVsbHNjcmVlbmNoYW5nZSddLCBkb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuY2hhbmdlJyk7XG4gICAgICB9KSk7XG5cbiAgICAgIHRoaXMuZWxfW2ZzQXBpLnJlcXVlc3RGdWxsc2NyZWVuXSgpO1xuXG4gICAgfSBlbHNlIGlmICh0aGlzLnRlY2guc3VwcG9ydHNGdWxsU2NyZWVuKCkpIHtcbiAgICAgIC8vIHdlIGNhbid0IHRha2UgdGhlIHZpZGVvLmpzIGNvbnRyb2xzIGZ1bGxzY3JlZW4gYnV0IHdlIGNhbiBnbyBmdWxsc2NyZWVuXG4gICAgICAvLyB3aXRoIG5hdGl2ZSBjb250cm9sc1xuICAgICAgdGhpcy50ZWNoQ2FsbCgnZW50ZXJGdWxsU2NyZWVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZ1bGxzY3JlZW4gaXNuJ3Qgc3VwcG9ydGVkIHNvIHdlJ2xsIGp1c3Qgc3RyZXRjaCB0aGUgdmlkZW8gZWxlbWVudCB0b1xuICAgICAgLy8gZmlsbCB0aGUgdmlld3BvcnRcbiAgICAgIHRoaXMuZW50ZXJGdWxsV2luZG93KCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPbGQgbmFtaW5nIGZvciByZXF1ZXN0RnVsbHNjcmVlblxuICAgKiBAZGVwcmVjYXRlZCBmb3IgbG93ZXIgY2FzZSAncycgdmVyc2lvblxuICAgKi9cbiAgcmVxdWVzdEZ1bGxTY3JlZW4oKSB7XG4gICAgTGliLmxvZy53YXJuKCdwbGF5ZXIucmVxdWVzdEZ1bGxTY3JlZW4oKSBoYXMgYmVlbiBkZXByZWNhdGVkLCB1c2UgcGxheWVyLnJlcXVlc3RGdWxsc2NyZWVuKCkgd2l0aCBhIGxvd2VyY2FzZSBcInNcIiknKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmlkZW8gdG8gaXRzIG5vcm1hbCBzaXplIGFmdGVyIGhhdmluZyBiZWVuIGluIGZ1bGwgc2NyZWVuIG1vZGVcbiAgICpcbiAgICogICAgIG15UGxheWVyLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZlxuICAgKi9cbiAgZXhpdEZ1bGxzY3JlZW4oKSB7XG4gICAgdmFyIGZzQXBpID0gRnVsbHNjcmVlbkFwaTtcbiAgICB0aGlzLmlzRnVsbHNjcmVlbihmYWxzZSk7XG5cbiAgICAvLyBDaGVjayBmb3IgYnJvd3NlciBlbGVtZW50IGZ1bGxzY3JlZW4gc3VwcG9ydFxuICAgIGlmIChmc0FwaSkge1xuICAgICAgZG9jdW1lbnRbZnNBcGkuZXhpdEZ1bGxzY3JlZW5dKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRlY2guc3VwcG9ydHNGdWxsU2NyZWVuKCkpIHtcbiAgICAgdGhpcy50ZWNoQ2FsbCgnZXhpdEZ1bGxTY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICB0aGlzLmV4aXRGdWxsV2luZG93KCk7XG4gICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9sZCBuYW1pbmcgZm9yIGV4aXRGdWxsc2NyZWVuXG4gICAqIEBkZXByZWNhdGVkIGZvciBleGl0RnVsbHNjcmVlblxuICAgKi9cbiAgY2FuY2VsRnVsbFNjcmVlbigpIHtcbiAgICBMaWIubG9nLndhcm4oJ3BsYXllci5jYW5jZWxGdWxsU2NyZWVuKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCwgdXNlIHBsYXllci5leGl0RnVsbHNjcmVlbigpJyk7XG4gICAgcmV0dXJuIHRoaXMuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgfVxuXG4gIC8vIFdoZW4gZnVsbHNjcmVlbiBpc24ndCBzdXBwb3J0ZWQgd2UgY2FuIHN0cmV0Y2ggdGhlIHZpZGVvIGNvbnRhaW5lciB0byBhcyB3aWRlIGFzIHRoZSBicm93c2VyIHdpbGwgbGV0IHVzLlxuICBlbnRlckZ1bGxXaW5kb3coKSB7XG4gICAgdGhpcy5pc0Z1bGxXaW5kb3cgPSB0cnVlO1xuXG4gICAgLy8gU3RvcmluZyBvcmlnaW5hbCBkb2Mgb3ZlcmZsb3cgdmFsdWUgdG8gcmV0dXJuIHRvIHdoZW4gZnVsbHNjcmVlbiBpcyBvZmZcbiAgICB0aGlzLmRvY09yaWdPdmVyZmxvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdztcblxuICAgIC8vIEFkZCBsaXN0ZW5lciBmb3IgZXNjIGtleSB0byBleGl0IGZ1bGxzY3JlZW5cbiAgICBFdmVudHMub24oZG9jdW1lbnQsICdrZXlkb3duJywgTGliLmJpbmQodGhpcywgdGhpcy5mdWxsV2luZG93T25Fc2NLZXkpKTtcblxuICAgIC8vIEhpZGUgYW55IHNjcm9sbCBiYXJzXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cbiAgICAvLyBBcHBseSBmdWxsc2NyZWVuIHN0eWxlc1xuICAgIExpYi5hZGRDbGFzcyhkb2N1bWVudC5ib2R5LCAndmpzLWZ1bGwtd2luZG93Jyk7XG5cbiAgICB0aGlzLnRyaWdnZXIoJ2VudGVyRnVsbFdpbmRvdycpO1xuICB9XG5cbiAgZnVsbFdpbmRvd09uRXNjS2V5KGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV4aXRGdWxsV2luZG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZXhpdEZ1bGxXaW5kb3coKSB7XG4gICAgdGhpcy5pc0Z1bGxXaW5kb3cgPSBmYWxzZTtcbiAgICBFdmVudHMub2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuZnVsbFdpbmRvd09uRXNjS2V5KTtcblxuICAgIC8vIFVuaGlkZSBzY3JvbGwgYmFycy5cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSB0aGlzLmRvY09yaWdPdmVyZmxvdztcblxuICAgIC8vIFJlbW92ZSBmdWxsc2NyZWVuIHN0eWxlc1xuICAgIExpYi5yZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCAndmpzLWZ1bGwtd2luZG93Jyk7XG5cbiAgICAvLyBSZXNpemUgdGhlIGJveCwgY29udHJvbGxlciwgYW5kIHBvc3RlciB0byBvcmlnaW5hbCBzaXplc1xuICAgIC8vIHRoaXMucG9zaXRpb25BbGwoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2V4aXRGdWxsV2luZG93Jyk7XG4gIH1cblxuICBzZWxlY3RTb3VyY2Uoc291cmNlcykge1xuICAgIC8vIExvb3AgdGhyb3VnaCBlYWNoIHBsYXliYWNrIHRlY2hub2xvZ3kgaW4gdGhlIG9wdGlvbnMgb3JkZXJcbiAgICBmb3IgKHZhciBpPTAsaj10aGlzLm9wdGlvbnNfWyd0ZWNoT3JkZXInXTtpPGoubGVuZ3RoO2krKykge1xuICAgICAgbGV0IHRlY2hOYW1lID0gTGliLmNhcGl0YWxpemUoaltpXSk7XG4gICAgICBsZXQgdGVjaCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQodGVjaE5hbWUpO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCB0ZWNoIGlzIGRlZmluZWQgYmVmb3JlIGNvbnRpbnVpbmdcbiAgICAgIGlmICghdGVjaCkge1xuICAgICAgICBMaWIubG9nLmVycm9yKGBUaGUgXCIke3RlY2hOYW1lfVwiIHRlY2ggaXMgdW5kZWZpbmVkLiBTa2lwcGVkIGJyb3dzZXIgc3VwcG9ydCBjaGVjayBmb3IgdGhhdCB0ZWNoLmApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyB0ZWNobm9sb2d5XG4gICAgICBpZiAodGVjaC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBlYWNoIHNvdXJjZSBvYmplY3RcbiAgICAgICAgZm9yICh2YXIgYT0wLGI9c291cmNlczthPGIubGVuZ3RoO2ErKykge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBiW2FdO1xuXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgc291cmNlIGNhbiBiZSBwbGF5ZWQgd2l0aCB0aGlzIHRlY2hub2xvZ3lcbiAgICAgICAgICBpZiAodGVjaFsnY2FuUGxheVNvdXJjZSddKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHNvdXJjZTogc291cmNlLCB0ZWNoOiB0ZWNoTmFtZSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc291cmNlIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIHZpZGVvIHNvdXJjZVxuICAgKlxuICAgKiBUaGVyZSBhcmUgdGhyZWUgdHlwZXMgb2YgdmFyaWFibGVzIHlvdSBjYW4gcGFzcyBhcyB0aGUgYXJndW1lbnQuXG4gICAqXG4gICAqICoqVVJMIFN0cmluZyoqOiBBIFVSTCB0byB0aGUgdGhlIHZpZGVvIGZpbGUuIFVzZSB0aGlzIG1ldGhvZCBpZiB5b3UgYXJlIHN1cmVcbiAgICogdGhlIGN1cnJlbnQgcGxheWJhY2sgdGVjaG5vbG9neSAoSFRNTDUvRmxhc2gpIGNhbiBzdXBwb3J0IHRoZSBzb3VyY2UgeW91XG4gICAqIHByb3ZpZGUuIEN1cnJlbnRseSBvbmx5IE1QNCBmaWxlcyBjYW4gYmUgdXNlZCBpbiBib3RoIEhUTUw1IGFuZCBGbGFzaC5cbiAgICpcbiAgICogICAgIG15UGxheWVyLnNyYyhcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vcGF0aC90by92aWRlby5tcDRcIik7XG4gICAqXG4gICAqICoqU291cmNlIE9iamVjdCAob3IgZWxlbWVudCk6KiogQSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uXG4gICAqIGFib3V0IHRoZSBzb3VyY2UgZmlsZS4gVXNlIHRoaXMgbWV0aG9kIGlmIHlvdSB3YW50IHRoZSBwbGF5ZXIgdG8gZGV0ZXJtaW5lIGlmXG4gICAqIGl0IGNhbiBzdXBwb3J0IHRoZSBmaWxlIHVzaW5nIHRoZSB0eXBlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiAgICAgbXlQbGF5ZXIuc3JjKHsgdHlwZTogXCJ2aWRlby9tcDRcIiwgc3JjOiBcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vcGF0aC90by92aWRlby5tcDRcIiB9KTtcbiAgICpcbiAgICogKipBcnJheSBvZiBTb3VyY2UgT2JqZWN0czoqKiBUbyBwcm92aWRlIG11bHRpcGxlIHZlcnNpb25zIG9mIHRoZSBzb3VyY2Ugc29cbiAgICogdGhhdCBpdCBjYW4gYmUgcGxheWVkIHVzaW5nIEhUTUw1IGFjcm9zcyBicm93c2VycyB5b3UgY2FuIHVzZSBhbiBhcnJheSBvZlxuICAgKiBzb3VyY2Ugb2JqZWN0cy4gVmlkZW8uanMgd2lsbCBkZXRlY3Qgd2hpY2ggdmVyc2lvbiBpcyBzdXBwb3J0ZWQgYW5kIGxvYWQgdGhhdFxuICAgKiBmaWxlLlxuICAgKlxuICAgKiAgICAgbXlQbGF5ZXIuc3JjKFtcbiAgICogICAgICAgeyB0eXBlOiBcInZpZGVvL21wNFwiLCBzcmM6IFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbS9wYXRoL3RvL3ZpZGVvLm1wNFwiIH0sXG4gICAqICAgICAgIHsgdHlwZTogXCJ2aWRlby93ZWJtXCIsIHNyYzogXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL3BhdGgvdG8vdmlkZW8ud2VibVwiIH0sXG4gICAqICAgICAgIHsgdHlwZTogXCJ2aWRlby9vZ2dcIiwgc3JjOiBcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vcGF0aC90by92aWRlby5vZ3ZcIiB9XG4gICAqICAgICBdKTtcbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfE9iamVjdHxBcnJheT19IHNvdXJjZSBUaGUgc291cmNlIFVSTCwgb2JqZWN0LCBvciBhcnJheSBvZiBzb3VyY2VzXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGN1cnJlbnQgdmlkZW8gc291cmNlIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBzcmMoc291cmNlPXRoaXMudGVjaEdldCgnc3JjJykpIHtcbiAgICBsZXQgY3VycmVudFRlY2ggPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KHRoaXMudGVjaE5hbWUpO1xuXG4gICAgLy8gY2FzZTogQXJyYXkgb2Ygc291cmNlIG9iamVjdHMgdG8gY2hvb3NlIGZyb20gYW5kIHBpY2sgdGhlIGJlc3QgdG8gcGxheVxuICAgIGlmIChMaWIub2JqLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgdGhpcy5zb3VyY2VMaXN0Xyhzb3VyY2UpO1xuXG4gICAgLy8gY2FzZTogVVJMIFN0cmluZyAoaHR0cDovL215dmlkZW8uLi4pXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gY3JlYXRlIGEgc291cmNlIG9iamVjdCBmcm9tIHRoZSBzdHJpbmdcbiAgICAgIHRoaXMuc3JjKHsgc3JjOiBzb3VyY2UgfSk7XG5cbiAgICAvLyBjYXNlOiBTb3VyY2Ugb2JqZWN0IHsgc3JjOiAnJywgdHlwZTogJycgLi4uIH1cbiAgICB9IGVsc2UgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgLy8gY2hlY2sgaWYgdGhlIHNvdXJjZSBoYXMgYSB0eXBlIGFuZCB0aGUgbG9hZGVkIHRlY2ggY2Fubm90IHBsYXkgdGhlIHNvdXJjZVxuICAgICAgLy8gaWYgdGhlcmUncyBubyB0eXBlIHdlJ2xsIGp1c3QgdHJ5IHRoZSBjdXJyZW50IHRlY2hcbiAgICAgIGlmIChzb3VyY2UudHlwZSAmJiAhY3VycmVudFRlY2hbJ2NhblBsYXlTb3VyY2UnXShzb3VyY2UpKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIHNvdXJjZSBsaXN0IHdpdGggdGhlIGN1cnJlbnQgc291cmNlIGFuZCBzZW5kIHRocm91Z2hcbiAgICAgICAgLy8gdGhlIHRlY2ggbG9vcCB0byBjaGVjayBmb3IgYSBjb21wYXRpYmxlIHRlY2hub2xvZ3lcbiAgICAgICAgdGhpcy5zb3VyY2VMaXN0Xyhbc291cmNlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhY2hlXy5zcmMgPSBzb3VyY2Uuc3JjO1xuICAgICAgICB0aGlzLmN1cnJlbnRUeXBlXyA9IHNvdXJjZS50eXBlIHx8ICcnO1xuXG4gICAgICAgIC8vIHdhaXQgdW50aWwgdGhlIHRlY2ggaXMgcmVhZHkgdG8gc2V0IHRoZSBzb3VyY2VcbiAgICAgICAgdGhpcy5yZWFkeShmdW5jdGlvbigpe1xuXG4gICAgICAgICAgLy8gVGhlIHNldFNvdXJjZSB0ZWNoIG1ldGhvZCB3YXMgYWRkZWQgd2l0aCBzb3VyY2UgaGFuZGxlcnNcbiAgICAgICAgICAvLyBzbyBvbGRlciB0ZWNocyB3b24ndCBzdXBwb3J0IGl0XG4gICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayB0aGUgZGlyZWN0IHByb3RvdHlwZSBmb3IgdGhlIGNhc2Ugd2hlcmUgc3ViY2xhc3Nlc1xuICAgICAgICAgIC8vIG9mIHRoZSB0ZWNoIGRvIG5vdCBzdXBwb3J0IHNvdXJjZSBoYW5kbGVyc1xuICAgICAgICAgIGlmIChjdXJyZW50VGVjaC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ3NldFNvdXJjZScpKSB7XG4gICAgICAgICAgICB0aGlzLnRlY2hDYWxsKCdzZXRTb3VyY2UnLCBzb3VyY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRlY2hDYWxsKCdzcmMnLCBzb3VyY2Uuc3JjKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zX1sncHJlbG9hZCddID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNfWydhdXRvcGxheSddKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhbiBhcnJheSBvZiBzb3VyY2Ugb2JqZWN0c1xuICAgKiBAcGFyYW0gIHtbdHlwZV19IHNvdXJjZXMgQXJyYXkgb2Ygc291cmNlIG9iamVjdHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNvdXJjZUxpc3RfKHNvdXJjZXMpIHtcbiAgICB2YXIgc291cmNlVGVjaCA9IHRoaXMuc2VsZWN0U291cmNlKHNvdXJjZXMpO1xuXG4gICAgaWYgKHNvdXJjZVRlY2gpIHtcbiAgICAgIGlmIChzb3VyY2VUZWNoLnRlY2ggPT09IHRoaXMudGVjaE5hbWUpIHtcbiAgICAgICAgLy8gaWYgdGhpcyB0ZWNobm9sb2d5IGlzIGFscmVhZHkgbG9hZGVkLCBzZXQgdGhlIHNvdXJjZVxuICAgICAgICB0aGlzLnNyYyhzb3VyY2VUZWNoLnNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBsb2FkIHRoaXMgdGVjaG5vbG9neSB3aXRoIHRoZSBjaG9zZW4gc291cmNlXG4gICAgICAgIHRoaXMubG9hZFRlY2goc291cmNlVGVjaC50ZWNoLCBzb3VyY2VUZWNoLnNvdXJjZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gd3JhcCB0aGlzIGluIGEgdGltZW91dCB0byBnaXZlIGZvbGtzIGEgY2hhbmNlIHRvIGFkZCBlcnJvciBldmVudCBoYW5kbGVyc1xuICAgICAgdGhpcy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lcnJvcih7IGNvZGU6IDQsIG1lc3NhZ2U6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zKClbJ25vdFN1cHBvcnRlZE1lc3NhZ2UnXSkgfSk7XG4gICAgICB9LCAwKTtcblxuICAgICAgLy8gd2UgY291bGQgbm90IGZpbmQgYW4gYXBwcm9wcmlhdGUgdGVjaCwgYnV0IGxldCdzIHN0aWxsIG5vdGlmeSB0aGUgZGVsZWdhdGUgdGhhdCB0aGlzIGlzIGl0XG4gICAgICAvLyB0aGlzIG5lZWRzIGEgYmV0dGVyIGNvbW1lbnQgYWJvdXQgd2h5IHRoaXMgaXMgbmVlZGVkXG4gICAgICB0aGlzLnRyaWdnZXJSZWFkeSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCZWdpbiBsb2FkaW5nIHRoZSBzcmMgZGF0YS5cbiAgICogQHJldHVybiB7UGxheWVyfSBSZXR1cm5zIHRoZSBwbGF5ZXJcbiAgICovXG4gIGxvYWQoKSB7XG4gICAgdGhpcy50ZWNoQ2FsbCgnbG9hZCcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZ1bGx5IHF1YWxpZmllZCBVUkwgb2YgdGhlIGN1cnJlbnQgc291cmNlIHZhbHVlIGUuZy4gaHR0cDovL215c2l0ZS5jb20vdmlkZW8ubXA0XG4gICAqIENhbiBiZSB1c2VkIGluIGNvbmp1Y3Rpb24gd2l0aCBgY3VycmVudFR5cGVgIHRvIGFzc2lzdCBpbiByZWJ1aWxkaW5nIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3QuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGN1cnJlbnQgc291cmNlXG4gICAqL1xuICBjdXJyZW50U3JjKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ2N1cnJlbnRTcmMnKSB8fCB0aGlzLmNhY2hlXy5zcmMgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHNvdXJjZSB0eXBlIGUuZy4gdmlkZW8vbXA0XG4gICAqIFRoaXMgY2FuIGFsbG93IHlvdSByZWJ1aWxkIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3Qgc28gdGhhdCB5b3UgY291bGQgbG9hZCB0aGUgc2FtZVxuICAgKiBzb3VyY2UgYW5kIHRlY2ggbGF0ZXJcbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgc291cmNlIE1JTUUgdHlwZVxuICAgKi9cbiAgY3VycmVudFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VHlwZV8gfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgcHJlbG9hZCBhdHRyaWJ1dGUuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHByZWxvYWQgYXR0cmlidXRlIHZhbHVlIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IFJldHVybnMgdGhlIHBsYXllciB3aGVuIHNldHRpbmdcbiAgICovXG4gIHByZWxvYWQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0UHJlbG9hZCcsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW9uc19bJ3ByZWxvYWQnXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ3ByZWxvYWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBhdXRvcGxheSBhdHRyaWJ1dGUuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGF1dG9wbGF5IGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSBSZXR1cm5zIHRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBhdXRvcGxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsKCdzZXRBdXRvcGxheScsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW9uc19bJ2F1dG9wbGF5J10gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdhdXRvcGxheScsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBsb29wIGF0dHJpYnV0ZSBvbiB0aGUgdmlkZW8gZWxlbWVudC5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgbG9vcCBhdHRyaWJ1dGUgdmFsdWUgd2hlbiBnZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gUmV0dXJucyB0aGUgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgbG9vcCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsKCdzZXRMb29wJywgdmFsdWUpO1xuICAgICAgdGhpcy5vcHRpb25zX1snbG9vcCddID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGVjaEdldCgnbG9vcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBvciBzZXQgdGhlIHBvc3RlciBpbWFnZSBzb3VyY2UgdXJsXG4gICAqXG4gICAqICMjIyMjIEVYQU1QTEU6XG4gICAqXG4gICAqICAgICAvLyBnZXR0aW5nXG4gICAqICAgICB2YXIgY3VycmVudFBvc3RlciA9IG15UGxheWVyLnBvc3RlcigpO1xuICAgKlxuICAgKiAgICAgLy8gc2V0dGluZ1xuICAgKiAgICAgbXlQbGF5ZXIucG9zdGVyKCdodHRwOi8vZXhhbXBsZS5jb20vbXlJbWFnZS5qcGcnKTtcbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nPX0gW3NyY10gUG9zdGVyIGltYWdlIHNvdXJjZSBVUkxcbiAgICogQHJldHVybiB7U3RyaW5nfSBwb3N0ZXIgVVJMIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IHNlbGYgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBwb3N0ZXIoc3JjKSB7XG4gICAgaWYgKHNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3N0ZXJfO1xuICAgIH1cblxuICAgIC8vIFRoZSBjb3JyZWN0IHdheSB0byByZW1vdmUgYSBwb3N0ZXIgaXMgdG8gc2V0IGFzIGFuIGVtcHR5IHN0cmluZ1xuICAgIC8vIG90aGVyIGZhbHNleSB2YWx1ZXMgd2lsbCB0aHJvdyBlcnJvcnNcbiAgICBpZiAoIXNyYykge1xuICAgICAgc3JjID0gJyc7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBpbnRlcm5hbCBwb3N0ZXIgdmFyaWFibGVcbiAgICB0aGlzLnBvc3Rlcl8gPSBzcmM7XG5cbiAgICAvLyB1cGRhdGUgdGhlIHRlY2gncyBwb3N0ZXJcbiAgICB0aGlzLnRlY2hDYWxsKCdzZXRQb3N0ZXInLCBzcmMpO1xuXG4gICAgLy8gYWxlcnQgY29tcG9uZW50cyB0aGF0IHRoZSBwb3N0ZXIgaGFzIGJlZW4gc2V0XG4gICAgdGhpcy50cmlnZ2VyKCdwb3N0ZXJjaGFuZ2UnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgd2hldGhlciBvciBub3QgdGhlIGNvbnRyb2xzIGFyZSBzaG93aW5nLlxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBjb250cm9scyBTZXQgY29udHJvbHMgdG8gc2hvd2luZyBvciBub3RcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgQ29udHJvbHMgYXJlIHNob3dpbmdcbiAgICovXG4gIGNvbnRyb2xzKGJvb2wpIHtcbiAgICBpZiAoYm9vbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBib29sID0gISFib29sOyAvLyBmb3JjZSBib29sZWFuXG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIGEgY2hhbmdlIGV2ZW50IHVubGVzcyBpdCBhY3R1YWxseSBjaGFuZ2VkXG4gICAgICBpZiAodGhpcy5jb250cm9sc18gIT09IGJvb2wpIHtcbiAgICAgICAgdGhpcy5jb250cm9sc18gPSBib29sO1xuXG4gICAgICAgIGlmICh0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgICAgIHRoaXMudGVjaENhbGwoJ3NldENvbnRyb2xzJywgYm9vbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1jb250cm9scy1kaXNhYmxlZCcpO1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdjb250cm9sc2VuYWJsZWQnKTtcblxuICAgICAgICAgIGlmICghdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWNvbnRyb2xzLWRpc2FibGVkJyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdjb250cm9sc2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMudXNpbmdOYXRpdmVDb250cm9scygpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVycygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiAhIXRoaXMuY29udHJvbHNfO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBuYXRpdmUgY29udHJvbHMgb24vb2ZmLiBOYXRpdmUgY29udHJvbHMgYXJlIHRoZSBjb250cm9scyBidWlsdCBpbnRvXG4gICAqIGRldmljZXMgKGUuZy4gZGVmYXVsdCBpUGhvbmUgY29udHJvbHMpLCBGbGFzaCwgb3Igb3RoZXIgdGVjaHNcbiAgICogKGUuZy4gVmltZW8gQ29udHJvbHMpXG4gICAqXG4gICAqICoqVGhpcyBzaG91bGQgb25seSBiZSBzZXQgYnkgdGhlIGN1cnJlbnQgdGVjaCwgYmVjYXVzZSBvbmx5IHRoZSB0ZWNoIGtub3dzXG4gICAqIGlmIGl0IGNhbiBzdXBwb3J0IG5hdGl2ZSBjb250cm9scyoqXG4gICAqXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGJvb2wgICAgVHJ1ZSBzaWduYWxzIHRoYXQgbmF0aXZlIGNvbnRyb2xzIGFyZSBvblxuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9ICAgICAgUmV0dXJucyB0aGUgcGxheWVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1c2luZ05hdGl2ZUNvbnRyb2xzKGJvb2wpIHtcbiAgICBpZiAoYm9vbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBib29sID0gISFib29sOyAvLyBmb3JjZSBib29sZWFuXG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIGEgY2hhbmdlIGV2ZW50IHVubGVzcyBpdCBhY3R1YWxseSBjaGFuZ2VkXG4gICAgICBpZiAodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXyAhPT0gYm9vbCkge1xuICAgICAgICB0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfID0gYm9vbDtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtdXNpbmctbmF0aXZlLWNvbnRyb2xzJyk7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBwbGF5ZXIgaXMgdXNpbmcgdGhlIG5hdGl2ZSBkZXZpY2UgY29udHJvbHNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBldmVudCB1c2luZ25hdGl2ZWNvbnRyb2xzXG4gICAgICAgICAgICogQG1lbWJlcm9mIFBsYXllclxuICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd1c2luZ25hdGl2ZWNvbnRyb2xzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXVzaW5nLW5hdGl2ZS1jb250cm9scycpO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogcGxheWVyIGlzIHVzaW5nIHRoZSBjdXN0b20gSFRNTCBjb250cm9sc1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGV2ZW50IHVzaW5nY3VzdG9tY29udHJvbHNcbiAgICAgICAgICAgKiBAbWVtYmVyb2YgUGxheWVyXG4gICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3VzaW5nY3VzdG9tY29udHJvbHMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiAhIXRoaXMudXNpbmdOYXRpdmVDb250cm9sc187XG4gIH1cblxuICAvKipcbiAgICogU2V0IG9yIGdldCB0aGUgY3VycmVudCBNZWRpYUVycm9yXG4gICAqIEBwYXJhbSAgeyp9IGVyciBBIE1lZGlhRXJyb3Igb3IgYSBTdHJpbmcvTnVtYmVyIHRvIGJlIHR1cm5lZCBpbnRvIGEgTWVkaWFFcnJvclxuICAgKiBAcmV0dXJuIHtNZWRpYUVycm9yfG51bGx9ICAgICB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSAgICAgICAgICAgICAgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBlcnJvcihlcnIpIHtcbiAgICBpZiAoZXJyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVycm9yXyB8fCBudWxsO1xuICAgIH1cblxuICAgIC8vIHJlc3RvcmluZyB0byBkZWZhdWx0XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5lcnJvcl8gPSBlcnI7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZXJyb3InKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGVycm9yIGluc3RhbmNlXG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIE1lZGlhRXJyb3IpIHtcbiAgICAgIHRoaXMuZXJyb3JfID0gZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9yXyA9IG5ldyBNZWRpYUVycm9yKGVycik7XG4gICAgfVxuXG4gICAgLy8gZmlyZSBhbiBlcnJvciBldmVudCBvbiB0aGUgcGxheWVyXG4gICAgdGhpcy50cmlnZ2VyKCdlcnJvcicpO1xuXG4gICAgLy8gYWRkIHRoZSB2anMtZXJyb3IgY2xhc3NuYW1lIHRvIHRoZSBwbGF5ZXJcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtZXJyb3InKTtcblxuICAgIC8vIGxvZyB0aGUgbmFtZSBvZiB0aGUgZXJyb3IgdHlwZSBhbmQgYW55IG1lc3NhZ2VcbiAgICAvLyBpZTgganVzdCBsb2dzIFwiW29iamVjdCBvYmplY3RdXCIgaWYgeW91IGp1c3QgbG9nIHRoZSBlcnJvciBvYmplY3RcbiAgICBMaWIubG9nLmVycm9yKGAoQ09ERToke3RoaXMuZXJyb3JfLmNvZGV9ICR7TWVkaWFFcnJvci5lcnJvclR5cGVzW3RoaXMuZXJyb3JfLmNvZGVdfSlgLCB0aGlzLmVycm9yXy5tZXNzYWdlLCB0aGlzLmVycm9yXyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgaW4gdGhlIFwiZW5kZWRcIiBzdGF0ZS5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGxheWVyIGlzIGluIHRoZSBlbmRlZCBzdGF0ZSwgZmFsc2UgaWYgbm90LlxuICAgKi9cbiAgZW5kZWQoKSB7IHJldHVybiB0aGlzLnRlY2hHZXQoJ2VuZGVkJyk7IH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIGluIHRoZSBcInNlZWtpbmdcIiBzdGF0ZS5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGxheWVyIGlzIGluIHRoZSBzZWVraW5nIHN0YXRlLCBmYWxzZSBpZiBub3QuXG4gICAqL1xuICBzZWVraW5nKCkgeyByZXR1cm4gdGhpcy50ZWNoR2V0KCdzZWVraW5nJyk7IH1cblxuICByZXBvcnRVc2VyQWN0aXZpdHkoZXZlbnQpIHtcbiAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSB0cnVlO1xuICB9XG5cbiAgdXNlckFjdGl2ZShib29sKSB7XG4gICAgaWYgKGJvb2wgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYm9vbCA9ICEhYm9vbDtcbiAgICAgIGlmIChib29sICE9PSB0aGlzLnVzZXJBY3RpdmVfKSB7XG4gICAgICAgIHRoaXMudXNlckFjdGl2ZV8gPSBib29sO1xuICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgIC8vIElmIHRoZSB1c2VyIHdhcyBpbmFjdGl2ZSBhbmQgaXMgbm93IGFjdGl2ZSB3ZSB3YW50IHRvIHJlc2V0IHRoZVxuICAgICAgICAgIC8vIGluYWN0aXZpdHkgdGltZXJcbiAgICAgICAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSB0cnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy11c2VyLWluYWN0aXZlJyk7XG4gICAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXVzZXItYWN0aXZlJyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd1c2VyYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gV2UncmUgc3dpdGNoaW5nIHRoZSBzdGF0ZSB0byBpbmFjdGl2ZSBtYW51YWxseSwgc28gZXJhc2UgYW55IG90aGVyXG4gICAgICAgICAgLy8gYWN0aXZpdHlcbiAgICAgICAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSBmYWxzZTtcblxuICAgICAgICAgIC8vIENocm9tZS9TYWZhcmkvSUUgaGF2ZSBidWdzIHdoZXJlIHdoZW4geW91IGNoYW5nZSB0aGUgY3Vyc29yIGl0IGNhblxuICAgICAgICAgIC8vIHRyaWdnZXIgYSBtb3VzZW1vdmUgZXZlbnQuIFRoaXMgY2F1c2VzIGFuIGlzc3VlIHdoZW4geW91J3JlIGhpZGluZ1xuICAgICAgICAgIC8vIHRoZSBjdXJzb3Igd2hlbiB0aGUgdXNlciBpcyBpbmFjdGl2ZSwgYW5kIGEgbW91c2Vtb3ZlIHNpZ25hbHMgdXNlclxuICAgICAgICAgIC8vIGFjdGl2aXR5LiBNYWtpbmcgaXQgaW1wb3NzaWJsZSB0byBnbyBpbnRvIGluYWN0aXZlIG1vZGUuIFNwZWNpZmljYWxseVxuICAgICAgICAgIC8vIHRoaXMgaGFwcGVucyBpbiBmdWxsc2NyZWVuIHdoZW4gd2UgcmVhbGx5IG5lZWQgdG8gaGlkZSB0aGUgY3Vyc29yLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gV2hlbiB0aGlzIGdldHMgcmVzb2x2ZWQgaW4gQUxMIGJyb3dzZXJzIGl0IGNhbiBiZSByZW1vdmVkXG4gICAgICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwMzA0MVxuICAgICAgICAgIGlmKHRoaXMudGVjaCkge1xuICAgICAgICAgICAgdGhpcy50ZWNoLm9uZSgnbW91c2Vtb3ZlJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy11c2VyLWFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy11c2VyLWluYWN0aXZlJyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd1c2VyaW5hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVzZXJBY3RpdmVfO1xuICB9XG5cbiAgbGlzdGVuRm9yVXNlckFjdGl2aXR5KCkge1xuICAgIGxldCBtb3VzZUluUHJvZ3Jlc3MsIGxhc3RNb3ZlWCwgbGFzdE1vdmVZO1xuXG4gICAgbGV0IGhhbmRsZUFjdGl2aXR5ID0gTGliLmJpbmQodGhpcywgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkpO1xuXG4gICAgbGV0IGhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vICMxMDY4IC0gUHJldmVudCBtb3VzZW1vdmUgc3BhbW1pbmdcbiAgICAgIC8vIENocm9tZSBCdWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNjY5NzBcbiAgICAgIGlmKGUuc2NyZWVuWCAhPT0gbGFzdE1vdmVYIHx8IGUuc2NyZWVuWSAhPT0gbGFzdE1vdmVZKSB7XG4gICAgICAgIGxhc3RNb3ZlWCA9IGUuc2NyZWVuWDtcbiAgICAgICAgbGFzdE1vdmVZID0gZS5zY3JlZW5ZO1xuICAgICAgICBoYW5kbGVBY3Rpdml0eSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVBY3Rpdml0eSgpO1xuICAgICAgLy8gRm9yIGFzIGxvbmcgYXMgdGhlIHRoZXkgYXJlIHRvdWNoaW5nIHRoZSBkZXZpY2Ugb3IgaGF2ZSB0aGVpciBtb3VzZSBkb3duLFxuICAgICAgLy8gd2UgY29uc2lkZXIgdGhlbSBhY3RpdmUgZXZlbiBpZiB0aGV5J3JlIG5vdCBtb3ZpbmcgdGhlaXIgZmluZ2VyIG9yIG1vdXNlLlxuICAgICAgLy8gU28gd2Ugd2FudCB0byBjb250aW51ZSB0byB1cGRhdGUgdGhhdCB0aGV5IGFyZSBhY3RpdmVcbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbChtb3VzZUluUHJvZ3Jlc3MpO1xuICAgICAgLy8gU2V0dGluZyB1c2VyQWN0aXZpdHk9dHJ1ZSBub3cgYW5kIHNldHRpbmcgdGhlIGludGVydmFsIHRvIHRoZSBzYW1lIHRpbWVcbiAgICAgIC8vIGFzIHRoZSBhY3Rpdml0eUNoZWNrIGludGVydmFsICgyNTApIHNob3VsZCBlbnN1cmUgd2UgbmV2ZXIgbWlzcyB0aGVcbiAgICAgIC8vIG5leHQgYWN0aXZpdHlDaGVja1xuICAgICAgbW91c2VJblByb2dyZXNzID0gdGhpcy5zZXRJbnRlcnZhbChoYW5kbGVBY3Rpdml0eSwgMjUwKTtcbiAgICB9O1xuXG4gICAgbGV0IGhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgaGFuZGxlQWN0aXZpdHkoKTtcbiAgICAgIC8vIFN0b3AgdGhlIGludGVydmFsIHRoYXQgbWFpbnRhaW5zIGFjdGl2aXR5IGlmIHRoZSBtb3VzZS90b3VjaCBpcyBkb3duXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwobW91c2VJblByb2dyZXNzKTtcbiAgICB9O1xuXG4gICAgLy8gQW55IG1vdXNlIG1vdmVtZW50IHdpbGwgYmUgY29uc2lkZXJlZCB1c2VyIGFjdGl2aXR5XG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgaGFuZGxlTW91c2VEb3duKTtcbiAgICB0aGlzLm9uKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKTtcblxuICAgIC8vIExpc3RlbiBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvblxuICAgIC8vIFNob3VsZG4ndCBuZWVkIHRvIHVzZSBpblByb2dyZXNzIGludGVydmFsIGJlY2F1c2Ugb2Yga2V5IHJlcGVhdFxuICAgIHRoaXMub24oJ2tleWRvd24nLCBoYW5kbGVBY3Rpdml0eSk7XG4gICAgdGhpcy5vbigna2V5dXAnLCBoYW5kbGVBY3Rpdml0eSk7XG5cbiAgICAvLyBSdW4gYW4gaW50ZXJ2YWwgZXZlcnkgMjUwIG1pbGxpc2Vjb25kcyBpbnN0ZWFkIG9mIHN0dWZmaW5nIGV2ZXJ5dGhpbmcgaW50b1xuICAgIC8vIHRoZSBtb3VzZW1vdmUvdG91Y2htb3ZlIGZ1bmN0aW9uIGl0c2VsZiwgdG8gcHJldmVudCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbi5cbiAgICAvLyBgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHlgIHNpbXBseSBzZXRzIHRoaXMudXNlckFjdGl2aXR5XyB0byB0cnVlLCB3aGljaFxuICAgIC8vIHRoZW4gZ2V0cyBwaWNrZWQgdXAgYnkgdGhpcyBsb29wXG4gICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL2xlYXJuaW5nLWZyb20tdHdpdHRlci9cbiAgICBsZXQgYWN0aXZpdHlDaGVjayA9IHRoaXMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgaW5hY3Rpdml0eVRpbWVvdXQ7XG5cbiAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiBtb3VzZS90b3VjaCBhY3Rpdml0eSBoYXMgaGFwcGVuZWRcbiAgICAgIGlmICh0aGlzLnVzZXJBY3Rpdml0eV8pIHtcbiAgICAgICAgLy8gUmVzZXQgdGhlIGFjdGl2aXR5IHRyYWNrZXJcbiAgICAgICAgdGhpcy51c2VyQWN0aXZpdHlfID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgc3RhdGUgd2FzIGluYWN0aXZlLCBzZXQgdGhlIHN0YXRlIHRvIGFjdGl2ZVxuICAgICAgICB0aGlzLnVzZXJBY3RpdmUodHJ1ZSk7XG5cbiAgICAgICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluYWN0aXZpdHkgdGltZW91dCB0byBzdGFydCB0aGUgdGltZXIgb3ZlclxuICAgICAgICB0aGlzLmNsZWFyVGltZW91dChpbmFjdGl2aXR5VGltZW91dCk7XG5cbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLm9wdGlvbnMoKVsnaW5hY3Rpdml0eVRpbWVvdXQnXTtcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgLy8gSW4gPHRpbWVvdXQ+IG1pbGxpc2Vjb25kcywgaWYgbm8gbW9yZSBhY3Rpdml0eSBoYXMgb2NjdXJyZWQgdGhlXG4gICAgICAgICAgLy8gdXNlciB3aWxsIGJlIGNvbnNpZGVyZWQgaW5hY3RpdmVcbiAgICAgICAgICBpbmFjdGl2aXR5VGltZW91dCA9IHRoaXMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgdGhlIGNhc2Ugd2hlcmUgdGhlIGluYWN0aXZpdHlUaW1lb3V0IGNhbiB0cmlnZ2VyIGp1c3RcbiAgICAgICAgICAgIC8vIGJlZm9yZSB0aGUgbmV4dCB1c2VyIGFjdGl2aXR5IGlzIHBpY2tlZCB1cCBieSB0aGUgYWN0aXZpdHlDaGVjayBsb29wXG4gICAgICAgICAgICAvLyBjYXVzaW5nIGEgZmxpY2tlclxuICAgICAgICAgICAgaWYgKCF0aGlzLnVzZXJBY3Rpdml0eV8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMjUwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS4gIEEgcGxheWJhY2sgcmF0ZSBvZlxuICAgKiAxLjAgcmVwcmVzZW50cyBub3JtYWwgc3BlZWQgYW5kIDAuNSB3b3VsZCBpbmRpY2F0ZSBoYWxmLXNwZWVkXG4gICAqIHBsYXliYWNrLCBmb3IgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0gcmF0ZSAgICBOZXcgcGxheWJhY2sgcmF0ZSB0byBzZXQuXG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBSZXR1cm5zIHRoZSBuZXcgcGxheWJhY2sgcmF0ZSB3aGVuIHNldHRpbmdcbiAgICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIFJldHVybnMgdGhlIGN1cnJlbnQgcGxheWJhY2sgcmF0ZSB3aGVuIGdldHRpbmdcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjZG9tLW1lZGlhLXBsYXliYWNrcmF0ZVxuICAgKi9cbiAgcGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICBpZiAocmF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsKCdzZXRQbGF5YmFja1JhdGUnLCByYXRlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlY2ggJiYgdGhpcy50ZWNoWydmZWF0dXJlc1BsYXliYWNrUmF0ZSddKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdwbGF5YmFja1JhdGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDEuMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBhdWRpbyBmbGFnXG4gICAqXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGJvb2wgICAgVHJ1ZSBzaWduYWxzIHRoYXQgdGhpcyBpcyBhbiBhdWRpbyBwbGF5ZXIuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgUmV0dXJucyB0cnVlIGlmIHBsYXllciBpcyBhdWRpbywgZmFsc2UgaWYgbm90IHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9ICAgICAgUmV0dXJucyB0aGUgcGxheWVyIGlmIHNldHRpbmdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzQXVkaW8oYm9vbCkge1xuICAgIGlmIChib29sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNBdWRpb18gPSAhIWJvb2w7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gISF0aGlzLmlzQXVkaW9fO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgbmV0d29yayBhY3Rpdml0eSBmb3IgdGhlIGVsZW1lbnQsIGZyb21cbiAgICogdGhlIGNvZGVzIGluIHRoZSBsaXN0IGJlbG93LlxuICAgKiAtIE5FVFdPUktfRU1QVFkgKG51bWVyaWMgdmFsdWUgMClcbiAgICogICBUaGUgZWxlbWVudCBoYXMgbm90IHlldCBiZWVuIGluaXRpYWxpc2VkLiBBbGwgYXR0cmlidXRlcyBhcmUgaW5cbiAgICogICB0aGVpciBpbml0aWFsIHN0YXRlcy5cbiAgICogLSBORVRXT1JLX0lETEUgKG51bWVyaWMgdmFsdWUgMSlcbiAgICogICBUaGUgZWxlbWVudCdzIHJlc291cmNlIHNlbGVjdGlvbiBhbGdvcml0aG0gaXMgYWN0aXZlIGFuZCBoYXNcbiAgICogICBzZWxlY3RlZCBhIHJlc291cmNlLCBidXQgaXQgaXMgbm90IGFjdHVhbGx5IHVzaW5nIHRoZSBuZXR3b3JrIGF0XG4gICAqICAgdGhpcyB0aW1lLlxuICAgKiAtIE5FVFdPUktfTE9BRElORyAobnVtZXJpYyB2YWx1ZSAyKVxuICAgKiAgIFRoZSB1c2VyIGFnZW50IGlzIGFjdGl2ZWx5IHRyeWluZyB0byBkb3dubG9hZCBkYXRhLlxuICAgKiAtIE5FVFdPUktfTk9fU09VUkNFIChudW1lcmljIHZhbHVlIDMpXG4gICAqICAgVGhlIGVsZW1lbnQncyByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIGlzIGFjdGl2ZSwgYnV0IGl0IGhhc1xuICAgKiAgIG5vdCB5ZXQgZm91bmQgYSByZXNvdXJjZSB0byB1c2UuXG4gICAqIEByZXR1cm4ge051bWJlcn0gdGhlIGN1cnJlbnQgbmV0d29yayBhY3Rpdml0eSBzdGF0ZVxuICAgKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNuZXR3b3JrLXN0YXRlc1xuICAgKi9cbiAgbmV0d29ya1N0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ25ldHdvcmtTdGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWx1ZSB0aGF0IGV4cHJlc3NlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZWxlbWVudFxuICAgKiB3aXRoIHJlc3BlY3QgdG8gcmVuZGVyaW5nIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uLCBmcm9tIHRoZVxuICAgKiBjb2RlcyBpbiB0aGUgbGlzdCBiZWxvdy5cbiAgICogLSBIQVZFX05PVEhJTkcgKG51bWVyaWMgdmFsdWUgMClcbiAgICogICBObyBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIG1lZGlhIHJlc291cmNlIGlzIGF2YWlsYWJsZS5cbiAgICogLSBIQVZFX01FVEFEQVRBIChudW1lcmljIHZhbHVlIDEpXG4gICAqICAgRW5vdWdoIG9mIHRoZSByZXNvdXJjZSBoYXMgYmVlbiBvYnRhaW5lZCB0aGF0IHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAgICogICByZXNvdXJjZSBpcyBhdmFpbGFibGUuXG4gICAqIC0gSEFWRV9DVVJSRU5UX0RBVEEgKG51bWVyaWMgdmFsdWUgMilcbiAgICogICBEYXRhIGZvciB0aGUgaW1tZWRpYXRlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaXMgYXZhaWxhYmxlLlxuICAgKiAtIEhBVkVfRlVUVVJFX0RBVEEgKG51bWVyaWMgdmFsdWUgMylcbiAgICogICBEYXRhIGZvciB0aGUgaW1tZWRpYXRlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaXMgYXZhaWxhYmxlLCBhc1xuICAgKiAgIHdlbGwgYXMgZW5vdWdoIGRhdGEgZm9yIHRoZSB1c2VyIGFnZW50IHRvIGFkdmFuY2UgdGhlIGN1cnJlbnRcbiAgICogICBwbGF5YmFjayBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIG9mIHBsYXliYWNrLlxuICAgKiAtIEhBVkVfRU5PVUdIX0RBVEEgKG51bWVyaWMgdmFsdWUgNClcbiAgICogICBUaGUgdXNlciBhZ2VudCBlc3RpbWF0ZXMgdGhhdCBlbm91Z2ggZGF0YSBpcyBhdmFpbGFibGUgZm9yXG4gICAqICAgcGxheWJhY2sgdG8gcHJvY2VlZCB1bmludGVycnVwdGVkLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjdXJyZW50IHBsYXliYWNrIHJlbmRlcmluZyBzdGF0ZVxuICAgKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tbWVkaWEtcmVhZHlzdGF0ZVxuICAgKi9cbiAgcmVhZHlTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdyZWFkeVN0YXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogVGV4dCB0cmFja3MgYXJlIHRyYWNrcyBvZiB0aW1lZCB0ZXh0IGV2ZW50cy5cbiAgICogQ2FwdGlvbnMgLSB0ZXh0IGRpc3BsYXllZCBvdmVyIHRoZSB2aWRlbyBmb3IgdGhlIGhlYXJpbmcgaW1wYWlyZWRcbiAgICogU3VidGl0bGVzIC0gdGV4dCBkaXNwbGF5ZWQgb3ZlciB0aGUgdmlkZW8gZm9yIHRob3NlIHdobyBkb24ndCB1bmRlcnN0YW5kIGxhbmd1YWdlIGluIHRoZSB2aWRlb1xuICAgKiBDaGFwdGVycyAtIHRleHQgZGlzcGxheWVkIGluIGEgbWVudSBhbGxvd2luZyB0aGUgdXNlciB0byBqdW1wIHRvIHBhcnRpY3VsYXIgcG9pbnRzIChjaGFwdGVycykgaW4gdGhlIHZpZGVvXG4gICAqIERlc2NyaXB0aW9ucyAobm90IHN1cHBvcnRlZCB5ZXQpIC0gYXVkaW8gZGVzY3JpcHRpb25zIHRoYXQgYXJlIHJlYWQgYmFjayB0byB0aGUgdXNlciBieSBhIHNjcmVlbiByZWFkaW5nIGRldmljZVxuICAgKi9cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGFzc29jaWF0ZWQgdGV4dCB0cmFja3MuIGNhcHRpb25zLCBzdWJ0aXRsZXMsIGNoYXB0ZXJzLCBkZXNjcmlwdGlvbnNcbiAgICogaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXRleHR0cmFja3NcbiAgICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICBBcnJheSBvZiB0cmFjayBvYmplY3RzXG4gICAqL1xuICB0ZXh0VHJhY2tzKCkge1xuICAgIC8vIGNhbm5vdCB1c2UgdGVjaEdldCBkaXJlY3RseSBiZWNhdXNlIGl0IGNoZWNrcyB0byBzZWUgd2hldGhlciB0aGUgdGVjaCBpcyByZWFkeS5cbiAgICAvLyBGbGFzaCBpcyB1bmxpa2VseSB0byBiZSByZWFkeSBpbiB0aW1lIGJ1dCB0ZXh0VHJhY2tzIHNob3VsZCBzdGlsbCB3b3JrLlxuICAgIHJldHVybiB0aGlzLnRlY2ggJiYgdGhpcy50ZWNoWyd0ZXh0VHJhY2tzJ10oKTtcbiAgfVxuXG4gIHJlbW90ZVRleHRUcmFja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVjaCAmJiB0aGlzLnRlY2hbJ3JlbW90ZVRleHRUcmFja3MnXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHRleHQgdHJhY2tcbiAgICogSW4gYWRkaXRpb24gdG8gdGhlIFczQyBzZXR0aW5ncyB3ZSBhbGxvdyBhZGRpbmcgYWRkaXRpb25hbCBpbmZvIHRocm91Z2ggb3B0aW9ucy5cbiAgICogaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWFkZHRleHR0cmFja1xuICAgKiBAcGFyYW0ge1N0cmluZ30gIGtpbmQgICAgICAgIENhcHRpb25zLCBzdWJ0aXRsZXMsIGNoYXB0ZXJzLCBkZXNjcmlwdGlvbnMsIG9yIG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gbGFiZWwgICAgICAgT3B0aW9uYWwgbGFiZWxcbiAgICogQHBhcmFtIHtTdHJpbmc9fSBsYW5ndWFnZSAgICBPcHRpb25hbCBsYW5ndWFnZVxuICAgKi9cbiAgYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIHJldHVybiB0aGlzLnRlY2ggJiYgdGhpcy50ZWNoWydhZGRUZXh0VHJhY2snXShraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpO1xuICB9XG5cbiAgYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoICYmIHRoaXMudGVjaFsnYWRkUmVtb3RlVGV4dFRyYWNrJ10ob3B0aW9ucyk7XG4gIH1cblxuICByZW1vdmVSZW1vdGVUZXh0VHJhY2sodHJhY2spIHtcbiAgICB0aGlzLnRlY2ggJiYgdGhpcy50ZWNoWydyZW1vdmVSZW1vdGVUZXh0VHJhY2snXSh0cmFjayk7XG4gIH1cblxuICAvLyBNZXRob2RzIHRvIGFkZCBzdXBwb3J0IGZvclxuICAvLyBpbml0aWFsVGltZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ2luaXRpYWxUaW1lJyk7IH0sXG4gIC8vIHN0YXJ0T2Zmc2V0VGltZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ3N0YXJ0T2Zmc2V0VGltZScpOyB9LFxuICAvLyBwbGF5ZWQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCdwbGF5ZWQnKTsgfSxcbiAgLy8gc2Vla2FibGU6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCdzZWVrYWJsZScpOyB9LFxuICAvLyB2aWRlb1RyYWNrczogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ3ZpZGVvVHJhY2tzJyk7IH0sXG4gIC8vIGF1ZGlvVHJhY2tzOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnYXVkaW9UcmFja3MnKTsgfSxcbiAgLy8gdmlkZW9XaWR0aDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ3ZpZGVvV2lkdGgnKTsgfSxcbiAgLy8gdmlkZW9IZWlnaHQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCd2aWRlb0hlaWdodCcpOyB9LFxuICAvLyBkZWZhdWx0UGxheWJhY2tSYXRlOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnZGVmYXVsdFBsYXliYWNrUmF0ZScpOyB9LFxuICAvLyBtZWRpYUdyb3VwOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnbWVkaWFHcm91cCcpOyB9LFxuICAvLyBjb250cm9sbGVyOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnY29udHJvbGxlcicpOyB9LFxuICAvLyBkZWZhdWx0TXV0ZWQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCdkZWZhdWx0TXV0ZWQnKTsgfVxuXG4gIC8vIFRPRE9cbiAgLy8gY3VycmVudFNyY0xpc3Q6IHRoZSBhcnJheSBvZiBzb3VyY2VzIGluY2x1ZGluZyBvdGhlciBmb3JtYXRzIGFuZCBiaXRyYXRlc1xuICAvLyBwbGF5TGlzdDogYXJyYXkgb2Ygc291cmNlIGxpc3RzIGluIG9yZGVyIG9mIHBsYXliYWNrXG5cbiAgLyoqXG4gICAqIFRoZSBwbGF5ZXIncyBsYW5ndWFnZSBjb2RlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbGFuZ3VhZ2VDb2RlICBUaGUgbG9jYWxlIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgIFRoZSBsb2NhbGUgc3RyaW5nIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9ICAgICAgICAgc2VsZiwgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBsYW5ndWFnZShsYW5ndWFnZUNvZGUpIHtcbiAgICBpZiAobGFuZ3VhZ2VDb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlXztcbiAgICB9XG5cbiAgICB0aGlzLmxhbmd1YWdlXyA9IGxhbmd1YWdlQ29kZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBsYXllcidzIGxhbmd1YWdlIGRpY3Rpb25hcnlcbiAgICovXG4gIGxhbmd1YWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5sYW5ndWFnZXNfO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGxldCBvcHRpb25zID0gTGliLm9iai5kZWVwTWVyZ2Uoe30sIHRoaXMub3B0aW9ucygpKTtcbiAgICBsZXQgdHJhY2tzID0gb3B0aW9ucy50cmFja3M7XG5cbiAgICBvcHRpb25zLnRyYWNrcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcblxuICAgICAgLy8gZGVlcCBtZXJnZSB0cmFja3MgYW5kIG51bGwgb3V0IHBsYXllciBzbyBubyBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICB0cmFjayA9IExpYi5vYmouZGVlcE1lcmdlKHt9LCB0cmFjayk7XG4gICAgICB0cmFjay5wbGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICBvcHRpb25zLnRyYWNrc1tpXSA9IHRyYWNrO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgc3RhdGljIGdldFRhZ1NldHRpbmdzKHRhZykge1xuICAgIGxldCBiYXNlT3B0aW9ucyA9IHtcbiAgICAgICdzb3VyY2VzJzogW10sXG4gICAgICAndHJhY2tzJzogW11cbiAgICB9O1xuXG4gICAgY29uc3QgdGFnT3B0aW9ucyA9IExpYi5nZXRFbGVtZW50QXR0cmlidXRlcyh0YWcpO1xuICAgIGNvbnN0IGRhdGFTZXR1cCA9IHRhZ09wdGlvbnNbJ2RhdGEtc2V0dXAnXTtcblxuICAgIC8vIENoZWNrIGlmIGRhdGEtc2V0dXAgYXR0ciBleGlzdHMuXG4gICAgaWYgKGRhdGFTZXR1cCAhPT0gbnVsbCl7XG4gICAgICAvLyBQYXJzZSBvcHRpb25zIEpTT05cbiAgICAgIC8vIElmIGVtcHR5IHN0cmluZywgbWFrZSBpdCBhIHBhcnNhYmxlIGpzb24gb2JqZWN0LlxuICAgICAgY29uc3QgW2VyciwgZGF0YV0gPSBzYWZlUGFyc2VUdXBsZShkYXRhU2V0dXAgfHwgJ3t9Jyk7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIExpYi5sb2cuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIExpYi5vYmoubWVyZ2UodGFnT3B0aW9ucywgZGF0YSk7XG4gICAgfVxuXG4gICAgTGliLm9iai5tZXJnZShiYXNlT3B0aW9ucywgdGFnT3B0aW9ucyk7XG5cbiAgICAvLyBHZXQgdGFnIGNoaWxkcmVuIHNldHRpbmdzXG4gICAgaWYgKHRhZy5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGFnLmNoaWxkTm9kZXM7XG5cbiAgICAgIGZvciAobGV0IGk9MCwgaj1jaGlsZHJlbi5sZW5ndGg7IGk8ajsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIC8vIENoYW5nZSBjYXNlIG5lZWRlZDogaHR0cDovL2Vqb2huLm9yZy9ibG9nL25vZGVuYW1lLWNhc2Utc2Vuc2l0aXZpdHkvXG4gICAgICAgIGNvbnN0IGNoaWxkTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChjaGlsZE5hbWUgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgICAgYmFzZU9wdGlvbnNbJ3NvdXJjZXMnXS5wdXNoKExpYi5nZXRFbGVtZW50QXR0cmlidXRlcyhjaGlsZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTmFtZSA9PT0gJ3RyYWNrJykge1xuICAgICAgICAgIGJhc2VPcHRpb25zWyd0cmFja3MnXS5wdXNoKExpYi5nZXRFbGVtZW50QXR0cmlidXRlcyhjaGlsZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2VPcHRpb25zO1xuICB9XG5cbn1cblxuLyoqXG4gKiBHbG9iYWwgcGxheWVyIGxpc3RcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblBsYXllci5wbGF5ZXJzID0ge307XG5cbi8qKlxuICogUGxheWVyIGluc3RhbmNlIG9wdGlvbnMsIHN1cmZhY2VkIHVzaW5nIG9wdGlvbnNcbiAqIG9wdGlvbnMgPSBQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfXG4gKiBNYWtlIGNoYW5nZXMgaW4gb3B0aW9ucywgbm90IGhlcmUuXG4gKiBBbGwgb3B0aW9ucyBzaG91bGQgdXNlIHN0cmluZyBrZXlzIHNvIHRoZXkgYXZvaWRcbiAqIHJlbmFtaW5nIGJ5IGNsb3N1cmUgY29tcGlsZXJcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5QbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfID0gT3B0aW9ucztcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBwbGF5ZXIgaGFzIGluaXRpYWwgZHVyYXRpb24gYW5kIGRpbWVuc2lvbiBpbmZvcm1hdGlvblxuICogQGV2ZW50IGxvYWRlZG1ldGFkYXRhXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlTG9hZGVkTWV0YURhdGE7XG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBkb3dubG9hZGVkIGRhdGEgYXQgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb25cbiAqIEBldmVudCBsb2FkZWRkYXRhXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlTG9hZGVkRGF0YTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBwbGF5ZXIgaGFzIGZpbmlzaGVkIGRvd25sb2FkaW5nIHRoZSBzb3VyY2UgZGF0YVxuICogQGV2ZW50IGxvYWRlZGFsbGRhdGFcbiAqL1xuUGxheWVyLnByb3RvdHlwZS5oYW5kbGVMb2FkZWRBbGxEYXRhO1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgaXMgYWN0aXZlLCBlLmcuIG1vdmVzIHRoZSBtb3VzZSBvdmVyIHRoZSBwbGF5ZXJcbiAqIEBldmVudCB1c2VyYWN0aXZlXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlVXNlckFjdGl2ZTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGlzIGluYWN0aXZlLCBlLmcuIGEgc2hvcnQgZGVsYXkgYWZ0ZXIgdGhlIGxhc3QgbW91c2UgbW92ZSBvciBjb250cm9sIGludGVyYWN0aW9uXG4gKiBAZXZlbnQgdXNlcmluYWN0aXZlXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlVXNlckluYWN0aXZlO1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaGFzIGNoYW5nZWRcbiAqXG4gKiBEdXJpbmcgcGxheWJhY2sgdGhpcyBpcyBmaXJlZCBldmVyeSAxNS0yNTAgbWlsbGlzZWNvbmRzLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBwbGF5YmFjayB0ZWNobm9sb2d5IGluIHVzZS5cbiAqIEBldmVudCB0aW1ldXBkYXRlXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlVGltZVVwZGF0ZTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSB2b2x1bWUgY2hhbmdlc1xuICogQGV2ZW50IHZvbHVtZWNoYW5nZVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZVZvbHVtZUNoYW5nZTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIGFuIGVycm9yIG9jY3Vyc1xuICogQGV2ZW50IGVycm9yXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlRXJyb3I7XG5cblBsYXllci5wcm90b3R5cGUuZmxleE5vdFN1cHBvcnRlZF8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG5cbiAgcmV0dXJuICEoJ2ZsZXhCYXNpcycgaW4gZWxlbS5zdHlsZSB8fFxuICAgICAgICAgICd3ZWJraXRGbGV4QmFzaXMnIGluIGVsZW0uc3R5bGUgfHxcbiAgICAgICAgICAnbW96RmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlIHx8XG4gICAgICAgICAgJ21zRmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlKTtcbn07XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheWVyJywgUGxheWVyKTtcbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcbiIsImltcG9ydCBQbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xuXG4vKipcbiAqIHRoZSBtZXRob2QgZm9yIHJlZ2lzdGVyaW5nIGEgdmlkZW8uanMgcGx1Z2luXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBpbml0IFRoZSBmdW5jdGlvbiB0aGF0IGlzIHJ1biB3aGVuIHRoZSBwbGF5ZXIgaW5pdHNcbiAqL1xudmFyIHBsdWdpbiA9IGZ1bmN0aW9uKG5hbWUsIGluaXQpe1xuICBQbGF5ZXIucHJvdG90eXBlW25hbWVdID0gaW5pdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsdWdpbjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyogUG9zdGVyIEltYWdlXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBUaGUgY29tcG9uZW50IHRoYXQgaGFuZGxlcyBzaG93aW5nIHRoZSBwb3N0ZXIgaW1hZ2UuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFBvc3RlckltYWdlIGV4dGVuZHMgQnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHBsYXllci5vbigncG9zdGVyY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCB0aGUgcG9zdGVyIGltYWdlXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIHRoaXMucGxheWVyKCkub2ZmKCdwb3N0ZXJjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgcG9zdGVyIGltYWdlIGVsZW1lbnRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIGNyZWF0ZUVsKCkge1xuICAgIGxldCBlbCA9IExpYi5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBvc3RlcicsXG5cbiAgICAgIC8vIERvbid0IHdhbnQgcG9zdGVyIHRvIGJlIHRhYmJhYmxlLlxuICAgICAgdGFiSW5kZXg6IC0xXG4gICAgfSk7XG5cbiAgICAvLyBUbyBlbnN1cmUgdGhlIHBvc3RlciBpbWFnZSByZXNpemVzIHdoaWxlIG1haW50YWluaW5nIGl0cyBvcmlnaW5hbCBhc3BlY3RcbiAgICAvLyByYXRpbywgdXNlIGEgZGl2IHdpdGggYGJhY2tncm91bmQtc2l6ZWAgd2hlbiBhdmFpbGFibGUuIEZvciBicm93c2VycyB0aGF0XG4gICAgLy8gZG8gbm90IHN1cHBvcnQgYGJhY2tncm91bmQtc2l6ZWAgKGUuZy4gSUU4KSwgZmFsbCBiYWNrIG9uIHVzaW5nIGEgcmVndWxhclxuICAgIC8vIGltZyBlbGVtZW50LlxuICAgIGlmICghTGliLkJBQ0tHUk9VTkRfU0laRV9TVVBQT1JURUQpIHtcbiAgICAgIHRoaXMuZmFsbGJhY2tJbWdfID0gTGliLmNyZWF0ZUVsKCdpbWcnKTtcbiAgICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuZmFsbGJhY2tJbWdfKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgdXBkYXRlcyB0byB0aGUgcGxheWVyJ3MgcG9zdGVyIHNvdXJjZVxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIGxldCB1cmwgPSB0aGlzLnBsYXllcigpLnBvc3RlcigpO1xuXG4gICAgdGhpcy5zZXRTcmModXJsKTtcblxuICAgIC8vIElmIHRoZXJlJ3Mgbm8gcG9zdGVyIHNvdXJjZSB3ZSBzaG91bGQgZGlzcGxheTpub25lIG9uIHRoaXMgY29tcG9uZW50XG4gICAgLy8gc28gaXQncyBub3Qgc3RpbGwgY2xpY2thYmxlIG9yIHJpZ2h0LWNsaWNrYWJsZVxuICAgIGlmICh1cmwpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBwb3N0ZXIgc291cmNlIGRlcGVuZGluZyBvbiB0aGUgZGlzcGxheSBtZXRob2RcbiAgICovXG4gIHNldFNyYyh1cmwpIHtcbiAgICBpZiAodGhpcy5mYWxsYmFja0ltZ18pIHtcbiAgICAgIHRoaXMuZmFsbGJhY2tJbWdfLnNyYyA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJhY2tncm91bmRJbWFnZSA9ICcnO1xuICAgICAgLy8gQW55IGZhbHNleSB2YWx1ZXMgc2hvdWxkIHN0YXkgYXMgYW4gZW1wdHkgc3RyaW5nLCBvdGhlcndpc2VcbiAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBhbiBleHRyYSBlcnJvclxuICAgICAgaWYgKHVybCkge1xuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKFwiJHt1cmx9XCIpYDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbF8uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYmFja2dyb3VuZEltYWdlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjbGlja3Mgb24gdGhlIHBvc3RlciBpbWFnZVxuICAgKi9cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBhIGNsaWNrIHRvIHRyaWdnZXIgcGxheWJhY2sgd2hlbiBjb250cm9scyBhcmUgZGlzYWJsZWRcbiAgICAvLyBidXQgQ1NTIHNob3VsZCBiZSBoaWRpbmcgdGhlIHBvc3RlciB0byBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmdcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGF1c2UoKTtcbiAgICB9XG4gIH1cblxufVxuXG5CdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ1Bvc3RlckltYWdlJywgUG9zdGVySW1hZ2UpO1xuZXhwb3J0IGRlZmF1bHQgUG9zdGVySW1hZ2U7XG4iLCJpbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG5sZXQgX3dpbmRvd0xvYWRlZCA9IGZhbHNlO1xubGV0IHZpZGVvanM7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGdW5jdGlvbnMgZm9yIGF1dG9tYXRpY2FsbHkgc2V0dGluZyB1cCBhIHBsYXllclxuICogYmFzZWQgb24gdGhlIGRhdGEtc2V0dXAgYXR0cmlidXRlIG9mIHRoZSB2aWRlbyB0YWdcbiAqL1xuXG4vLyBBdXRvbWF0aWNhbGx5IHNldCB1cCBhbnkgdGFncyB0aGF0IGhhdmUgYSBkYXRhLXNldHVwIGF0dHJpYnV0ZVxudmFyIGF1dG9TZXR1cCA9IGZ1bmN0aW9uKCl7XG4gIC8vIE9uZSBkYXksIHdoZW4gd2Ugc3RvcCBzdXBwb3J0aW5nIElFOCwgZ28gYmFjayB0byB0aGlzLCBidXQgaW4gdGhlIG1lYW50aW1lLi4uKmhhY2sgaGFjayBoYWNrKlxuICAvLyB2YXIgdmlkcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlbycpKTtcbiAgLy8gdmFyIGF1ZGlvcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhdWRpbycpKTtcbiAgLy8gdmFyIG1lZGlhRWxzID0gdmlkcy5jb25jYXQoYXVkaW9zKTtcblxuICAvLyBCZWNhdXNlIElFOCBkb2Vzbid0IHN1cHBvcnQgY2FsbGluZyBzbGljZSBvbiBhIG5vZGUgbGlzdCwgd2UgbmVlZCB0byBsb29wIHRocm91Z2ggZWFjaCBsaXN0IG9mIGVsZW1lbnRzXG4gIC8vIHRvIGJ1aWxkIHVwIGEgbmV3LCBjb21iaW5lZCBsaXN0IG9mIGVsZW1lbnRzLlxuICB2YXIgdmlkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlbycpO1xuICB2YXIgYXVkaW9zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2F1ZGlvJyk7XG4gIHZhciBtZWRpYUVscyA9IFtdO1xuICBpZiAodmlkcyAmJiB2aWRzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IobGV0IGk9MCwgZT12aWRzLmxlbmd0aDsgaTxlOyBpKyspIHtcbiAgICAgIG1lZGlhRWxzLnB1c2godmlkc1tpXSk7XG4gICAgfVxuICB9XG4gIGlmIChhdWRpb3MgJiYgYXVkaW9zLmxlbmd0aCA+IDApIHtcbiAgICBmb3IobGV0IGk9MCwgZT1hdWRpb3MubGVuZ3RoOyBpPGU7IGkrKykge1xuICAgICAgbWVkaWFFbHMucHVzaChhdWRpb3NbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGlmIGFueSBtZWRpYSBlbGVtZW50cyBleGlzdFxuICBpZiAobWVkaWFFbHMgJiYgbWVkaWFFbHMubGVuZ3RoID4gMCkge1xuXG4gICAgZm9yIChsZXQgaT0wLCBlPW1lZGlhRWxzLmxlbmd0aDsgaTxlOyBpKyspIHtcbiAgICAgIGxldCBtZWRpYUVsID0gbWVkaWFFbHNbaV07XG5cbiAgICAgIC8vIENoZWNrIGlmIGVsZW1lbnQgZXhpc3RzLCBoYXMgZ2V0QXR0cmlidXRlIGZ1bmMuXG4gICAgICAvLyBJRSBzZWVtcyB0byBjb25zaWRlciB0eXBlb2YgZWwuZ2V0QXR0cmlidXRlID09ICdvYmplY3QnIGluc3RlYWQgb2YgJ2Z1bmN0aW9uJyBsaWtlIGV4cGVjdGVkLCBhdCBsZWFzdCB3aGVuIGxvYWRpbmcgdGhlIHBsYXllciBpbW1lZGlhdGVseS5cbiAgICAgIGlmIChtZWRpYUVsICYmIG1lZGlhRWwuZ2V0QXR0cmlidXRlKSB7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgcGxheWVyIGhhc24ndCBhbHJlYWR5IGJlZW4gc2V0IHVwLlxuICAgICAgICBpZiAobWVkaWFFbFsncGxheWVyJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxldCBvcHRpb25zID0gbWVkaWFFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2V0dXAnKTtcblxuICAgICAgICAgIC8vIENoZWNrIGlmIGRhdGEtc2V0dXAgYXR0ciBleGlzdHMuXG4gICAgICAgICAgLy8gV2Ugb25seSBhdXRvLXNldHVwIGlmIHRoZXkndmUgYWRkZWQgdGhlIGRhdGEtc2V0dXAgYXR0ci5cbiAgICAgICAgICBpZiAob3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyB2aWRlby5qcyBpbnN0YW5jZS5cbiAgICAgICAgICAgIGxldCBwbGF5ZXIgPSB2aWRlb2pzKG1lZGlhRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAvLyBJZiBnZXRBdHRyaWJ1dGUgaXNuJ3QgZGVmaW5lZCwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgRE9NLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXV0b1NldHVwVGltZW91dCgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gIC8vIE5vIHZpZGVvcyB3ZXJlIGZvdW5kLCBzbyBrZWVwIGxvb3BpbmcgdW5sZXNzIHBhZ2UgaXMgZmluaXNoZWQgbG9hZGluZy5cbiAgfSBlbHNlIGlmICghX3dpbmRvd0xvYWRlZCkge1xuICAgIGF1dG9TZXR1cFRpbWVvdXQoMSk7XG4gIH1cbn07XG5cbi8vIFBhdXNlIHRvIGxldCB0aGUgRE9NIGtlZXAgcHJvY2Vzc2luZ1xudmFyIGF1dG9TZXR1cFRpbWVvdXQgPSBmdW5jdGlvbih3YWl0LCB2anMpe1xuICB2aWRlb2pzID0gdmpzO1xuICBzZXRUaW1lb3V0KGF1dG9TZXR1cCwgd2FpdCk7XG59O1xuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICBfd2luZG93TG9hZGVkID0gdHJ1ZTtcbn0gZWxzZSB7XG4gIEV2ZW50cy5vbmUod2luZG93LCAnbG9hZCcsIGZ1bmN0aW9uKCl7XG4gICAgX3dpbmRvd0xvYWRlZCA9IHRydWU7XG4gIH0pO1xufVxuXG52YXIgaGFzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfd2luZG93TG9hZGVkO1xufTtcblxuZXhwb3J0IHsgYXV0b1NldHVwLCBhdXRvU2V0dXBUaW1lb3V0LCBoYXNMb2FkZWQgfTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuXG4vKipcbiAqIFNlZWtCYXIgQmVoYXZpb3IgaW5jbHVkZXMgcGxheSBwcm9ncmVzcyBiYXIsIGFuZCBzZWVrIGhhbmRsZVxuICogTmVlZGVkIHNvIGl0IGNhbiBkZXRlcm1pbmUgc2VlayBwb3NpdGlvbiBiYXNlZCBvbiBoYW5kbGUgcG9zaXRpb24vc2l6ZVxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFNsaWRlckhhbmRsZSBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIGNyZWF0ZUVsKHR5cGUsIHByb3BzKSB7XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICAvLyBBZGQgdGhlIHNsaWRlciBlbGVtZW50IGNsYXNzIHRvIGFsbCBzdWIgY2xhc3Nlc1xuICAgIHByb3BzLmNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArICcgdmpzLXNsaWRlci1oYW5kbGUnO1xuICAgIHByb3BzID0gTGliLm9iai5tZXJnZSh7XG4gICAgICBpbm5lckhUTUw6IGA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4ke3RoaXMuZGVmYXVsdFZhbHVlIHx8IDB9PC9zcGFuPmBcbiAgICB9LCBwcm9wcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHByb3BzKTtcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU2xpZGVySGFuZGxlJywgU2xpZGVySGFuZGxlKTtcbmV4cG9ydCBkZWZhdWx0IFNsaWRlckhhbmRsZTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qIFNsaWRlclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogVGhlIGJhc2UgZnVuY3Rpb25hbGl0eSBmb3Igc2xpZGVycyBsaWtlIHRoZSB2b2x1bWUgYmFyIGFuZCBzZWVrIGJhclxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICAvLyBTZXQgcHJvcGVydHkgbmFtZXMgdG8gYmFyIGFuZCBoYW5kbGUgdG8gbWF0Y2ggd2l0aCB0aGUgY2hpbGQgU2xpZGVyIGNsYXNzIGlzIGxvb2tpbmcgZm9yXG4gICAgdGhpcy5iYXIgPSB0aGlzLmdldENoaWxkKHRoaXMub3B0aW9uc19bJ2Jhck5hbWUnXSk7XG4gICAgdGhpcy5oYW5kbGUgPSB0aGlzLmdldENoaWxkKHRoaXMub3B0aW9uc19bJ2hhbmRsZU5hbWUnXSk7XG5cbiAgICAvLyBTZXQgYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIGNsYXNzIG9uIHRoZSBzbGlkZXIgZGVwZW5kaW5nIG9uIHRoZSBzbGlkZXIgdHlwZVxuICAgIHRoaXMudmVydGljYWwoISF0aGlzLm9wdGlvbnMoKVsndmVydGljYWwnXSk7XG5cbiAgICB0aGlzLm9uKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICB0aGlzLm9uKCdmb2N1cycsIHRoaXMuaGFuZGxlRm9jdXMpO1xuICAgIHRoaXMub24oJ2JsdXInLCB0aGlzLmhhbmRsZUJsdXIpO1xuICAgIHRoaXMub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ2NvbnRyb2xzdmlzaWJsZScsIHRoaXMudXBkYXRlKTtcbiAgICB0aGlzLm9uKHBsYXllciwgdGhpcy5wbGF5ZXJFdmVudCwgdGhpcy51cGRhdGUpO1xuICB9XG5cbiAgY3JlYXRlRWwodHlwZSwgcHJvcHM9e30pIHtcbiAgICAvLyBBZGQgdGhlIHNsaWRlciBlbGVtZW50IGNsYXNzIHRvIGFsbCBzdWIgY2xhc3Nlc1xuICAgIHByb3BzLmNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArICcgdmpzLXNsaWRlcic7XG4gICAgcHJvcHMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAgICdyb2xlJzogJ3NsaWRlcicsXG4gICAgICAnYXJpYS12YWx1ZW5vdyc6IDAsXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IDAsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IDEwMCxcbiAgICAgIHRhYkluZGV4OiAwXG4gICAgfSwgcHJvcHMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKHR5cGUsIHByb3BzKTtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgTGliLmJsb2NrVGV4dFNlbGVjdGlvbigpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zbGlkaW5nJyk7XG5cbiAgICB0aGlzLm9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLm9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG5cbiAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZShldmVudCk7XG4gIH1cblxuICAvLyBUbyBiZSBvdmVycmlkZGVuIGJ5IGEgc3ViY2xhc3NcbiAgaGFuZGxlTW91c2VNb3ZlKCkge31cblxuICBoYW5kbGVNb3VzZVVwKCkge1xuICAgIExpYi51bmJsb2NrVGV4dFNlbGVjdGlvbigpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkaW5nJyk7XG5cbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHRoaXMub2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBJbiBWb2x1bWVCYXIgaW5pdCB3ZSBoYXZlIGEgc2V0VGltZW91dCBmb3IgdXBkYXRlIHRoYXQgcG9wcyBhbmQgdXBkYXRlIHRvIHRoZSBlbmQgb2YgdGhlXG4gICAgLy8gZXhlY3V0aW9uIHN0YWNrLiBUaGUgcGxheWVyIGlzIGRlc3Ryb3llZCBiZWZvcmUgdGhlbiB1cGRhdGUgd2lsbCBjYXVzZSBhbiBlcnJvclxuICAgIGlmICghdGhpcy5lbF8pIHJldHVybjtcblxuICAgIC8vIElmIHNjcnViYmluZywgd2UgY291bGQgdXNlIGEgY2FjaGVkIHZhbHVlIHRvIG1ha2UgdGhlIGhhbmRsZSBrZWVwIHVwIHdpdGggdGhlIHVzZXIncyBtb3VzZS5cbiAgICAvLyBPbiBIVE1MNSBicm93c2VycyBzY3J1YmJpbmcgaXMgcmVhbGx5IHNtb290aCwgYnV0IHNvbWUgZmxhc2ggcGxheWVycyBhcmUgc2xvdywgc28gd2UgbWlnaHQgd2FudCB0byB1dGlsaXplIHRoaXMgbGF0ZXIuXG4gICAgLy8gdmFyIHByb2dyZXNzID0gICh0aGlzLnBsYXllcl8uc2NydWJiaW5nKSA/IHRoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lIC8gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuICAgIGxldCBwcm9ncmVzcyA9IHRoaXMuZ2V0UGVyY2VudCgpO1xuICAgIGxldCBiYXIgPSB0aGlzLmJhcjtcblxuICAgIC8vIElmIHRoZXJlJ3Mgbm8gYmFyLi4uXG4gICAgaWYgKCFiYXIpIHJldHVybjtcblxuICAgIC8vIFByb3RlY3QgYWdhaW5zdCBubyBkdXJhdGlvbiBhbmQgb3RoZXIgZGl2aXNpb24gaXNzdWVzXG4gICAgaWYgKHR5cGVvZiBwcm9ncmVzcyAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgcHJvZ3Jlc3MgIT09IHByb2dyZXNzIHx8XG4gICAgICAgIHByb2dyZXNzIDwgMCB8fFxuICAgICAgICBwcm9ncmVzcyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IDA7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSBoYW5kbGUsIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhlIGhhbmRsZSBpbiBvdXIgY2FsY3VsYXRpb24gZm9yIHByb2dyZXNzIGJhclxuICAgIC8vIHNvIHRoYXQgaXQgZG9lc24ndCBmYWxsIHNob3J0IG9mIG9yIGV4dGVuZCBwYXN0IHRoZSBoYW5kbGUuXG4gICAgbGV0IGJhclByb2dyZXNzID0gdGhpcy51cGRhdGVIYW5kbGVQb3NpdGlvbihwcm9ncmVzcyk7XG5cbiAgICAvLyBDb252ZXJ0IHRvIGEgcGVyY2VudGFnZSBmb3Igc2V0dGluZ1xuICAgIGxldCBwZXJjZW50YWdlID0gTGliLnJvdW5kKGJhclByb2dyZXNzICogMTAwLCAyKSArICclJztcblxuICAgIC8vIFNldCB0aGUgbmV3IGJhciB3aWR0aCBvciBoZWlnaHRcbiAgICBpZiAodGhpcy52ZXJ0aWNhbCgpKSB7XG4gICAgICBiYXIuZWwoKS5zdHlsZS5oZWlnaHQgPSBwZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXIuZWwoKS5zdHlsZS53aWR0aCA9IHBlcmNlbnRhZ2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlIHRoZSBoYW5kbGUgcG9zaXRpb24uXG4gICovXG4gIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKHByb2dyZXNzKSB7XG4gICAgbGV0IGhhbmRsZSA9IHRoaXMuaGFuZGxlO1xuICAgIGlmICghaGFuZGxlKSByZXR1cm47XG5cbiAgICBsZXQgdmVydGljYWwgPSB0aGlzLnZlcnRpY2FsKCk7XG4gICAgbGV0IGJveCA9IHRoaXMuZWxfO1xuXG4gICAgbGV0IGJveFNpemUsIGhhbmRsZVNpemU7XG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBib3hTaXplID0gYm94Lm9mZnNldEhlaWdodDtcbiAgICAgIGhhbmRsZVNpemUgPSBoYW5kbGUuZWwoKS5vZmZzZXRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJveFNpemUgPSBib3gub2Zmc2V0V2lkdGg7XG4gICAgICBoYW5kbGVTaXplID0gaGFuZGxlLmVsKCkub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgLy8gVGhlIHdpZHRoIG9mIHRoZSBoYW5kbGUgaW4gcGVyY2VudCBvZiB0aGUgY29udGFpbmluZyBib3hcbiAgICAvLyBJbiBJRSwgd2lkdGhzIG1heSBub3QgYmUgcmVhZHkgeWV0IGNhdXNpbmcgTmFOXG4gICAgbGV0IGhhbmRsZVBlcmNlbnQgPSAoaGFuZGxlU2l6ZSkgPyBoYW5kbGVTaXplIC8gYm94U2l6ZSA6IDA7XG5cbiAgICAvLyBHZXQgdGhlIGFkanVzdGVkIHNpemUgb2YgdGhlIGJveCwgY29uc2lkZXJpbmcgdGhhdCB0aGUgaGFuZGxlJ3MgY2VudGVyIG5ldmVyIHRvdWNoZXMgdGhlIGxlZnQgb3IgcmlnaHQgc2lkZS5cbiAgICAvLyBUaGVyZSBpcyBhIG1hcmdpbiBvZiBoYWxmIHRoZSBoYW5kbGUncyB3aWR0aCBvbiBib3RoIHNpZGVzLlxuICAgIGxldCBib3hBZGp1c3RlZFBlcmNlbnQgPSAxIC0gaGFuZGxlUGVyY2VudDtcblxuICAgIC8vIEFkanVzdCB0aGUgcHJvZ3Jlc3MgdGhhdCB3ZSdsbCB1c2UgdG8gc2V0IHdpZHRocyB0byB0aGUgbmV3IGFkanVzdGVkIGJveCB3aWR0aFxuICAgIGxldCBhZGp1c3RlZFByb2dyZXNzID0gcHJvZ3Jlc3MgKiBib3hBZGp1c3RlZFBlcmNlbnQ7XG5cbiAgICAvLyBUaGUgYmFyIGRvZXMgcmVhY2ggdGhlIGxlZnQgc2lkZSwgc28gd2UgbmVlZCB0byBhY2NvdW50IGZvciB0aGlzIGluIHRoZSBiYXIncyB3aWR0aFxuICAgIGxldCBiYXJQcm9ncmVzcyA9IGFkanVzdGVkUHJvZ3Jlc3MgKyAoaGFuZGxlUGVyY2VudCAvIDIpO1xuXG4gICAgbGV0IHBlcmNlbnRhZ2UgPSBMaWIucm91bmQoYWRqdXN0ZWRQcm9ncmVzcyAqIDEwMCwgMikgKyAnJSc7XG5cbiAgICBpZiAodmVydGljYWwpIHtcbiAgICAgIGhhbmRsZS5lbCgpLnN0eWxlLmJvdHRvbSA9IHBlcmNlbnRhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZS5lbCgpLnN0eWxlLmxlZnQgPSBwZXJjZW50YWdlO1xuICAgIH1cblxuICAgIHJldHVybiBiYXJQcm9ncmVzcztcbiAgfVxuXG4gIGNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KXtcbiAgICBsZXQgZWwgPSB0aGlzLmVsXztcbiAgICBsZXQgYm94ID0gTGliLmZpbmRQb3NpdGlvbihlbCk7XG4gICAgbGV0IGJveFcgPSBlbC5vZmZzZXRXaWR0aDtcbiAgICBsZXQgYm94SCA9IGVsLm9mZnNldEhlaWdodDtcbiAgICBsZXQgaGFuZGxlID0gdGhpcy5oYW5kbGU7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zKClbJ3ZlcnRpY2FsJ10pIHtcbiAgICAgIGxldCBib3hZID0gYm94LnRvcDtcblxuICAgICAgbGV0IHBhZ2VZO1xuICAgICAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHBhZ2VZID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdlWSA9IGV2ZW50LnBhZ2VZO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBoYW5kbGVIID0gaGFuZGxlLmVsKCkub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAvLyBBZGp1c3RlZCBYIGFuZCBXaWR0aCwgc28gaGFuZGxlIGRvZXNuJ3QgZ28gb3V0c2lkZSB0aGUgYmFyXG4gICAgICAgIGJveFkgPSBib3hZICsgKGhhbmRsZUggLyAyKTtcbiAgICAgICAgYm94SCA9IGJveEggLSBoYW5kbGVIO1xuICAgICAgfVxuXG4gICAgICAvLyBQZXJjZW50IHRoYXQgdGhlIGNsaWNrIGlzIHRocm91Z2ggdGhlIGFkanVzdGVkIGFyZWFcbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAoKGJveFkgLSBwYWdlWSkgKyBib3hIKSAvIGJveEgpKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYm94WCA9IGJveC5sZWZ0O1xuXG4gICAgICBsZXQgcGFnZVg7XG4gICAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgcGFnZVggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VYID0gZXZlbnQucGFnZVg7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGhhbmRsZVcgPSBoYW5kbGUuZWwoKS5vZmZzZXRXaWR0aDtcblxuICAgICAgICAvLyBBZGp1c3RlZCBYIGFuZCBXaWR0aCwgc28gaGFuZGxlIGRvZXNuJ3QgZ28gb3V0c2lkZSB0aGUgYmFyXG4gICAgICAgIGJveFggPSBib3hYICsgKGhhbmRsZVcgLyAyKTtcbiAgICAgICAgYm94VyA9IGJveFcgLSBoYW5kbGVXO1xuICAgICAgfVxuXG4gICAgICAvLyBQZXJjZW50IHRoYXQgdGhlIGNsaWNrIGlzIHRocm91Z2ggdGhlIGFkanVzdGVkIGFyZWFcbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAocGFnZVggLSBib3hYKSAvIGJveFcpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVGb2N1cygpIHtcbiAgICB0aGlzLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5UHJlc3MpO1xuICB9XG5cbiAgaGFuZGxlS2V5UHJlc3MoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDM3IHx8IGV2ZW50LndoaWNoID09PSA0MCkgeyAvLyBMZWZ0IGFuZCBEb3duIEFycm93c1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc3RlcEJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAzOCB8fCBldmVudC53aGljaCA9PT0gMzkpIHsgLy8gVXAgYW5kIFJpZ2h0IEFycm93c1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc3RlcEZvcndhcmQoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVCbHVyKCkge1xuICAgIHRoaXMub2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5UHJlc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbmVyIGZvciBjbGljayBldmVudHMgb24gc2xpZGVyLCB1c2VkIHRvIHByZXZlbnQgY2xpY2tzXG4gICAqICAgZnJvbSBidWJibGluZyB1cCB0byBwYXJlbnQgZWxlbWVudHMgbGlrZSBidXR0b24gbWVudXMuXG4gICAqIEBwYXJhbSAge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICB2ZXJ0aWNhbChib29sKSB7XG4gICAgaWYgKGJvb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMudmVydGljYWxfIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMudmVydGljYWxfID0gISFib29sO1xuXG4gICAgaWYgKHRoaXMudmVydGljYWxfKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtc2xpZGVyLXZlcnRpY2FsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zbGlkZXItaG9yaXpvbnRhbCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTbGlkZXInLCBTbGlkZXIpO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGVyO1xuIiwiZnVuY3Rpb24gRmxhc2hSdG1wRGVjb3JhdG9yKEZsYXNoKSB7XG4gIEZsYXNoLnN0cmVhbWluZ0Zvcm1hdHMgPSB7XG4gICAgJ3J0bXAvbXA0JzogJ01QNCcsXG4gICAgJ3J0bXAvZmx2JzogJ0ZMVidcbiAgfTtcblxuICBGbGFzaC5zdHJlYW1Gcm9tUGFydHMgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBzdHJlYW0pIHtcbiAgICByZXR1cm4gY29ubmVjdGlvbiArICcmJyArIHN0cmVhbTtcbiAgfTtcblxuICBGbGFzaC5zdHJlYW1Ub1BhcnRzID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgbGV0IHBhcnRzID0ge1xuICAgICAgY29ubmVjdGlvbjogJycsXG4gICAgICBzdHJlYW06ICcnXG4gICAgfTtcblxuICAgIGlmICghc3JjKSByZXR1cm4gcGFydHM7XG5cbiAgICAvLyBMb29rIGZvciB0aGUgbm9ybWFsIFVSTCBzZXBhcmF0b3Igd2UgZXhwZWN0LCAnJicuXG4gICAgLy8gSWYgZm91bmQsIHdlIHNwbGl0IHRoZSBVUkwgaW50byB0d28gcGllY2VzIGFyb3VuZCB0aGVcbiAgICAvLyBmaXJzdCAnJicuXG4gICAgbGV0IGNvbm5FbmQgPSBzcmMuaW5kZXhPZignJicpO1xuICAgIGxldCBzdHJlYW1CZWdpbjtcbiAgICBpZiAoY29ubkVuZCAhPT0gLTEpIHtcbiAgICAgIHN0cmVhbUJlZ2luID0gY29ubkVuZCArIDE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gSWYgdGhlcmUncyBub3QgYSAnJicsIHdlIHVzZSB0aGUgbGFzdCAnLycgYXMgdGhlIGRlbGltaXRlci5cbiAgICAgIGNvbm5FbmQgPSBzdHJlYW1CZWdpbiA9IHNyYy5sYXN0SW5kZXhPZignLycpICsgMTtcbiAgICAgIGlmIChjb25uRW5kID09PSAwKSB7XG4gICAgICAgIC8vIHJlYWxseSwgdGhlcmUncyBub3QgYSAnLyc/XG4gICAgICAgIGNvbm5FbmQgPSBzdHJlYW1CZWdpbiA9IHNyYy5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIHBhcnRzLmNvbm5lY3Rpb24gPSBzcmMuc3Vic3RyaW5nKDAsIGNvbm5FbmQpO1xuICAgIHBhcnRzLnN0cmVhbSA9IHNyYy5zdWJzdHJpbmcoc3RyZWFtQmVnaW4sIHNyYy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHBhcnRzO1xuICB9O1xuXG4gIEZsYXNoLmlzU3RyZWFtaW5nVHlwZSA9IGZ1bmN0aW9uKHNyY1R5cGUpIHtcbiAgICByZXR1cm4gc3JjVHlwZSBpbiBGbGFzaC5zdHJlYW1pbmdGb3JtYXRzO1xuICB9O1xuXG4gIC8vIFJUTVAgaGFzIGZvdXIgdmFyaWF0aW9ucywgYW55IHN0cmluZyBzdGFydGluZ1xuICAvLyB3aXRoIG9uZSBvZiB0aGVzZSBwcm90b2NvbHMgc2hvdWxkIGJlIHZhbGlkXG4gIEZsYXNoLlJUTVBfUkUgPSAvXnJ0bXBbc2V0XT86XFwvXFwvL2k7XG5cbiAgRmxhc2guaXNTdHJlYW1pbmdTcmMgPSBmdW5jdGlvbihzcmMpIHtcbiAgICByZXR1cm4gRmxhc2guUlRNUF9SRS50ZXN0KHNyYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgc291cmNlIGhhbmRsZXIgZm9yIFJUTVAgdXJsc1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgRmxhc2gucnRtcFNvdXJjZUhhbmRsZXIgPSB7fTtcblxuICAvKipcbiAgICogQ2hlY2sgRmxhc2ggY2FuIGhhbmRsZSB0aGUgc291cmNlIG5hdGl2ZWx5XG4gICAqIEBwYXJhbSAge09iamVjdH0gc291cmNlICBUaGUgc291cmNlIG9iamVjdFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAgICovXG4gIEZsYXNoLnJ0bXBTb3VyY2VIYW5kbGVyLmNhbkhhbmRsZVNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gICAgaWYgKEZsYXNoLmlzU3RyZWFtaW5nVHlwZShzb3VyY2UudHlwZSkgfHwgRmxhc2guaXNTdHJlYW1pbmdTcmMoc291cmNlLnNyYykpIHtcbiAgICAgIHJldHVybiAnbWF5YmUnO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfTtcblxuICAvKipcbiAgICogUGFzcyB0aGUgc291cmNlIHRvIHRoZSBmbGFzaCBvYmplY3RcbiAgICogQWRhcHRpdmUgc291cmNlIGhhbmRsZXJzIHdpbGwgaGF2ZSBtb3JlIGNvbXBsaWNhdGVkIHdvcmtmbG93cyBiZWZvcmUgcGFzc2luZ1xuICAgKiB2aWRlbyBkYXRhIHRvIHRoZSB2aWRlbyBlbGVtZW50XG4gICAqIEBwYXJhbSAge09iamVjdH0gc291cmNlICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAqIEBwYXJhbSAge0ZsYXNofSB0ZWNoICAgVGhlIGluc3RhbmNlIG9mIHRoZSBGbGFzaCB0ZWNoXG4gICAqL1xuICBGbGFzaC5ydG1wU291cmNlSGFuZGxlci5oYW5kbGVTb3VyY2UgPSBmdW5jdGlvbihzb3VyY2UsIHRlY2gpe1xuICAgIGxldCBzcmNQYXJ0cyA9IEZsYXNoLnN0cmVhbVRvUGFydHMoc291cmNlLnNyYyk7XG5cbiAgICB0ZWNoWydzZXRSdG1wQ29ubmVjdGlvbiddKHNyY1BhcnRzLmNvbm5lY3Rpb24pO1xuICAgIHRlY2hbJ3NldFJ0bXBTdHJlYW0nXShzcmNQYXJ0cy5zdHJlYW0pO1xuICB9O1xuXG4gIC8vIFJlZ2lzdGVyIHRoZSBuYXRpdmUgc291cmNlIGhhbmRsZXJcbiAgRmxhc2gucmVnaXN0ZXJTb3VyY2VIYW5kbGVyKEZsYXNoLnJ0bXBTb3VyY2VIYW5kbGVyKTtcblxuICByZXR1cm4gRmxhc2g7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsYXNoUnRtcERlY29yYXRvcjtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlldyBWaWRlb0pTLVNXRiAtIEN1c3RvbSBGbGFzaCBQbGF5ZXIgd2l0aCBIVE1MNS1pc2ggQVBJXG4gKiBodHRwczovL2dpdGh1Yi5jb20vemVuY29kZXIvdmlkZW8tanMtc3dmXG4gKiBOb3QgdXNpbmcgc2V0dXBUcmlnZ2Vycy4gVXNpbmcgZ2xvYmFsIG9uRXZlbnQgZnVuYyB0byBkaXN0cmlidXRlIGV2ZW50c1xuICovXG5cbmltcG9ydCBUZWNoIGZyb20gJy4vdGVjaCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCBGbGFzaFJ0bXBEZWNvcmF0b3IgZnJvbSAnLi9mbGFzaC1ydG1wJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbmxldCBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yO1xuLyoqXG4gKiBGbGFzaCBNZWRpYSBDb250cm9sbGVyIC0gV3JhcHBlciBmb3IgZmFsbGJhY2sgU1dGIEFQSVxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbj19IHJlYWR5XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgRmxhc2ggZXh0ZW5kcyBUZWNoIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCByZWFkeSl7XG4gICAgc3VwZXIob3B0aW9ucywgcmVhZHkpO1xuXG4gICAgbGV0IHsgc291cmNlLCBwYXJlbnRFbCB9ID0gb3B0aW9ucztcblxuICAgIC8vIEdlbmVyYXRlIElEIGZvciBzd2Ygb2JqZWN0XG4gICAgbGV0IG9iaklkID0gb3B0aW9ucy5wbGF5ZXJJZCsnX2ZsYXNoX2FwaSc7XG5cbiAgICAvLyBNZXJnZSBkZWZhdWx0IGZsYXNodmFycyB3aXRoIG9uZXMgcGFzc2VkIGluIHRvIGluaXRcbiAgICBsZXQgZmxhc2hWYXJzID0gTGliLm9iai5tZXJnZSh7XG5cbiAgICAgIC8vIFNXRiBDYWxsYmFjayBGdW5jdGlvbnNcbiAgICAgICdyZWFkeUZ1bmN0aW9uJzogJ3ZpZGVvanMuRmxhc2gub25SZWFkeScsXG4gICAgICAnZXZlbnRQcm94eUZ1bmN0aW9uJzogJ3ZpZGVvanMuRmxhc2gub25FdmVudCcsXG4gICAgICAnZXJyb3JFdmVudFByb3h5RnVuY3Rpb24nOiAndmlkZW9qcy5GbGFzaC5vbkVycm9yJyxcblxuICAgICAgLy8gUGxheWVyIFNldHRpbmdzXG4gICAgICAnYXV0b3BsYXknOiBvcHRpb25zLmF1dG9wbGF5LFxuICAgICAgJ3ByZWxvYWQnOiBvcHRpb25zLnByZWxvYWQsXG4gICAgICAnbG9vcCc6IG9wdGlvbnMubG9vcCxcbiAgICAgICdtdXRlZCc6IG9wdGlvbnMubXV0ZWRcblxuICAgIH0sIG9wdGlvbnMuZmxhc2hWYXJzKTtcblxuICAgIC8vIE1lcmdlIGRlZmF1bHQgcGFyYW1lcyB3aXRoIG9uZXMgcGFzc2VkIGluXG4gICAgbGV0IHBhcmFtcyA9IExpYi5vYmoubWVyZ2Uoe1xuICAgICAgJ3dtb2RlJzogJ29wYXF1ZScsIC8vIE9wYXF1ZSBpcyBuZWVkZWQgdG8gb3ZlcmxheSBjb250cm9scywgYnV0IGNhbiBhZmZlY3QgcGxheWJhY2sgcGVyZm9ybWFuY2VcbiAgICAgICdiZ2NvbG9yJzogJyMwMDAwMDAnIC8vIFVzaW5nIGJnY29sb3IgcHJldmVudHMgYSB3aGl0ZSBmbGFzaCB3aGVuIHRoZSBvYmplY3QgaXMgbG9hZGluZ1xuICAgIH0sIG9wdGlvbnMucGFyYW1zKTtcblxuICAgIC8vIE1lcmdlIGRlZmF1bHQgYXR0cmlidXRlcyB3aXRoIG9uZXMgcGFzc2VkIGluXG4gICAgbGV0IGF0dHJpYnV0ZXMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAgICdpZCc6IG9iaklkLFxuICAgICAgJ25hbWUnOiBvYmpJZCwgLy8gQm90aCBJRCBhbmQgTmFtZSBuZWVkZWQgb3Igc3dmIHRvIGlkZW50aWZ5IGl0c2VsZlxuICAgICAgJ2NsYXNzJzogJ3Zqcy10ZWNoJ1xuICAgIH0sIG9wdGlvbnMuYXR0cmlidXRlcyk7XG5cbiAgICAvLyBJZiBzb3VyY2Ugd2FzIHN1cHBsaWVkIHBhc3MgYXMgYSBmbGFzaCB2YXIuXG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgdGhpcy5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnNldFNvdXJjZShzb3VyY2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSGF2aW5nIGlzc3VlcyB3aXRoIEZsYXNoIHJlbG9hZGluZyBvbiBjZXJ0YWluIHBhZ2UgYWN0aW9ucyAoaGlkZS9yZXNpemUvZnVsbHNjcmVlbikgaW4gY2VydGFpbiBicm93c2Vyc1xuICAgIC8vIFRoaXMgYWxsb3dzIHJlc2V0dGluZyB0aGUgcGxheWhlYWQgd2hlbiB3ZSBjYXRjaCB0aGUgcmVsb2FkXG4gICAgaWYgKG9wdGlvbnMuc3RhcnRUaW1lKSB7XG4gICAgICB0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZShvcHRpb25zLnN0YXJ0VGltZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB3aW5kb3cudmlkZW9qcyA9IHdpbmRvdy52aWRlb2pzIHx8IHt9O1xuICAgIHdpbmRvdy52aWRlb2pzLkZsYXNoID0gd2luZG93LnZpZGVvanMuRmxhc2ggfHwge307XG4gICAgd2luZG93LnZpZGVvanMuRmxhc2gub25SZWFkeSA9IEZsYXNoLm9uUmVhZHk7XG4gICAgd2luZG93LnZpZGVvanMuRmxhc2gub25FdmVudCA9IEZsYXNoLm9uRXZlbnQ7XG4gICAgd2luZG93LnZpZGVvanMuRmxhc2gub25FcnJvciA9IEZsYXNoLm9uRXJyb3I7XG5cbiAgICB0aGlzLmVsXyA9IEZsYXNoLmVtYmVkKG9wdGlvbnMuc3dmLCBmbGFzaFZhcnMsIHBhcmFtcywgYXR0cmlidXRlcyk7XG4gICAgdGhpcy5lbF8udGVjaCA9IHRoaXM7XG4gIH1cblxuICBwbGF5KCkge1xuICAgIHRoaXMuZWxfLnZqc19wbGF5KCk7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmVsXy52anNfcGF1c2UoKTtcbiAgfVxuXG4gIHNyYyhzcmMpIHtcbiAgICBpZiAoc3JjID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRTcmMoKTtcbiAgICB9XG5cbiAgICAvLyBTZXR0aW5nIHNyYyB0aHJvdWdoIGBzcmNgIG5vdCBgc2V0U3JjYCB3aWxsIGJlIGRlcHJlY2F0ZWRcbiAgICByZXR1cm4gdGhpcy5zZXRTcmMoc3JjKTtcbiAgfVxuXG4gIHNldFNyYyhzcmMpIHtcbiAgICAvLyBNYWtlIHN1cmUgc291cmNlIFVSTCBpcyBhYnNvbHV0ZS5cbiAgICBzcmMgPSBMaWIuZ2V0QWJzb2x1dGVVUkwoc3JjKTtcbiAgICB0aGlzLmVsXy52anNfc3JjKHNyYyk7XG5cbiAgICAvLyBDdXJyZW50bHkgdGhlIFNXRiBkb2Vzbid0IGF1dG9wbGF5IGlmIHlvdSBsb2FkIGEgc291cmNlIGxhdGVyLlxuICAgIC8vIGUuZy4gTG9hZCBwbGF5ZXIgdy8gbm8gc291cmNlLCB3YWl0IDJzLCBzZXQgc3JjLlxuICAgIGlmICh0aGlzLmF1dG9wbGF5KCkpIHtcbiAgICAgIHZhciB0ZWNoID0gdGhpcztcbiAgICAgIHRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpeyB0ZWNoLnBsYXkoKTsgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgc2V0Q3VycmVudFRpbWUodGltZSkge1xuICAgIHRoaXMubGFzdFNlZWtUYXJnZXRfID0gdGltZTtcbiAgICB0aGlzLmVsXy52anNfc2V0UHJvcGVydHkoJ2N1cnJlbnRUaW1lJywgdGltZSk7XG4gICAgc3VwZXIuc2V0Q3VycmVudFRpbWUoKTtcbiAgfVxuXG4gIGN1cnJlbnRUaW1lKHRpbWUpIHtcbiAgICAvLyB3aGVuIHNlZWtpbmcgbWFrZSB0aGUgcmVwb3J0ZWQgdGltZSBrZWVwIHVwIHdpdGggdGhlIHJlcXVlc3RlZCB0aW1lXG4gICAgLy8gYnkgcmVhZGluZyB0aGUgdGltZSB3ZSdyZSBzZWVraW5nIHRvXG4gICAgaWYgKHRoaXMuc2Vla2luZygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0U2Vla1RhcmdldF8gfHwgMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWxfLnZqc19nZXRQcm9wZXJ0eSgnY3VycmVudFRpbWUnKTtcbiAgfVxuXG4gIGN1cnJlbnRTcmMoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFNvdXJjZV8pIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRTb3VyY2VfLnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZWxfLnZqc19nZXRQcm9wZXJ0eSgnY3VycmVudFNyYycpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgdGhpcy5lbF8udmpzX2xvYWQoKTtcbiAgfVxuXG4gIHBvc3RlcigpIHtcbiAgICB0aGlzLmVsXy52anNfZ2V0UHJvcGVydHkoJ3Bvc3RlcicpO1xuICB9XG5cbiAgLy8gcG9zdGVyIGltYWdlcyBhcmUgbm90IGhhbmRsZWQgYnkgdGhlIEZsYXNoIHRlY2ggc28gbWFrZSB0aGlzIGEgbm8tb3BcbiAgc2V0UG9zdGVyKCkge31cblxuICBidWZmZXJlZCgpIHtcbiAgICByZXR1cm4gTGliLmNyZWF0ZVRpbWVSYW5nZSgwLCB0aGlzLmVsXy52anNfZ2V0UHJvcGVydHkoJ2J1ZmZlcmVkJykpO1xuICB9XG5cbiAgc3VwcG9ydHNGdWxsU2NyZWVuKCkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gRmxhc2ggZG9lcyBub3QgYWxsb3cgZnVsbHNjcmVlbiB0aHJvdWdoIGphdmFzY3JpcHRcbiAgfVxuXG4gIGVudGVyRnVsbFNjcmVlbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuXG5cbi8vIENyZWF0ZSBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciBhdHRyaWJ1dGVzXG5jb25zdCBfYXBpID0gRmxhc2gucHJvdG90eXBlO1xuY29uc3QgX3JlYWRXcml0ZSA9ICdydG1wQ29ubmVjdGlvbixydG1wU3RyZWFtLHByZWxvYWQsZGVmYXVsdFBsYXliYWNrUmF0ZSxwbGF5YmFja1JhdGUsYXV0b3BsYXksbG9vcCxtZWRpYUdyb3VwLGNvbnRyb2xsZXIsY29udHJvbHMsdm9sdW1lLG11dGVkLGRlZmF1bHRNdXRlZCcuc3BsaXQoJywnKTtcbmNvbnN0IF9yZWFkT25seSA9ICdlcnJvcixuZXR3b3JrU3RhdGUscmVhZHlTdGF0ZSxzZWVraW5nLGluaXRpYWxUaW1lLGR1cmF0aW9uLHN0YXJ0T2Zmc2V0VGltZSxwYXVzZWQscGxheWVkLHNlZWthYmxlLGVuZGVkLHZpZGVvVHJhY2tzLGF1ZGlvVHJhY2tzLHZpZGVvV2lkdGgsdmlkZW9IZWlnaHQnLnNwbGl0KCcsJyk7XG5cbmZ1bmN0aW9uIF9jcmVhdGVTZXR0ZXIoYXR0cil7XG4gIHZhciBhdHRyVXBwZXIgPSBhdHRyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYXR0ci5zbGljZSgxKTtcbiAgX2FwaVsnc2V0JythdHRyVXBwZXJdID0gZnVuY3Rpb24odmFsKXsgcmV0dXJuIHRoaXMuZWxfLnZqc19zZXRQcm9wZXJ0eShhdHRyLCB2YWwpOyB9O1xufVxuZnVuY3Rpb24gX2NyZWF0ZUdldHRlcihhdHRyKSB7XG4gIF9hcGlbYXR0cl0gPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5lbF8udmpzX2dldFByb3BlcnR5KGF0dHIpOyB9O1xufVxuXG4vLyBDcmVhdGUgZ2V0dGVyIGFuZCBzZXR0ZXJzIGZvciBhbGwgcmVhZC93cml0ZSBhdHRyaWJ1dGVzXG5mb3IgKGxldCBpID0gMDsgaSA8IF9yZWFkV3JpdGUubGVuZ3RoOyBpKyspIHtcbiAgX2NyZWF0ZUdldHRlcihfcmVhZFdyaXRlW2ldKTtcbiAgX2NyZWF0ZVNldHRlcihfcmVhZFdyaXRlW2ldKTtcbn1cblxuLy8gQ3JlYXRlIGdldHRlcnMgZm9yIHJlYWQtb25seSBhdHRyaWJ1dGVzXG5mb3IgKGxldCBpID0gMDsgaSA8IF9yZWFkT25seS5sZW5ndGg7IGkrKykge1xuICBfY3JlYXRlR2V0dGVyKF9yZWFkT25seVtpXSk7XG59XG5cbi8qIEZsYXNoIFN1cHBvcnQgVGVzdGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5GbGFzaC5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiBGbGFzaC52ZXJzaW9uKClbMF0gPj0gMTA7XG4gIC8vIHJldHVybiBzd2ZvYmplY3QuaGFzRmxhc2hQbGF5ZXJWZXJzaW9uKCcxMCcpO1xufTtcblxuLy8gQWRkIFNvdXJjZSBIYW5kbGVyIHBhdHRlcm4gZnVuY3Rpb25zIHRvIHRoaXMgdGVjaFxuVGVjaC53aXRoU291cmNlSGFuZGxlcnMoRmxhc2gpO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IG5hdGl2ZSBzb3VyY2UgaGFuZGxlci5cbiAqIFRoaXMgc2ltcGx5IHBhc3NlcyB0aGUgc291cmNlIHRvIHRoZSB2aWRlbyBlbGVtZW50LiBOb3RoaW5nIGZhbmN5LlxuICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgICBUaGUgc291cmNlIG9iamVjdFxuICogQHBhcmFtICB7Rmxhc2h9IHRlY2ggIFRoZSBpbnN0YW5jZSBvZiB0aGUgRmxhc2ggdGVjaFxuICovXG5GbGFzaC5uYXRpdmVTb3VyY2VIYW5kbGVyID0ge307XG5cbi8qKlxuICogQ2hlY2sgRmxhc2ggY2FuIGhhbmRsZSB0aGUgc291cmNlIG5hdGl2ZWx5XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICovXG5GbGFzaC5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhbkhhbmRsZVNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gIHZhciB0eXBlO1xuXG4gIGZ1bmN0aW9uIGd1ZXNzTWltZVR5cGUoc3JjKSB7XG4gICAgdmFyIGV4dCA9IExpYi5nZXRGaWxlRXh0ZW5zaW9uKHNyYyk7XG4gICAgaWYgKGV4dCkge1xuICAgICAgcmV0dXJuIGB2aWRlby8ke2V4dH1gO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoIXNvdXJjZS50eXBlKSB7XG4gICAgdHlwZSA9IGd1ZXNzTWltZVR5cGUoc291cmNlLnNyYyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaXAgY29kZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSB0eXBlIGJlY2F1c2Ugd2UgZG9uJ3QgZ2V0IHRoYXQgc3BlY2lmaWNcbiAgICB0eXBlID0gc291cmNlLnR5cGUucmVwbGFjZSgvOy4qLywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBpZiAodHlwZSBpbiBGbGFzaC5mb3JtYXRzKSB7XG4gICAgcmV0dXJuICdtYXliZSc7XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIFBhc3MgdGhlIHNvdXJjZSB0byB0aGUgZmxhc2ggb2JqZWN0XG4gKiBBZGFwdGl2ZSBzb3VyY2UgaGFuZGxlcnMgd2lsbCBoYXZlIG1vcmUgY29tcGxpY2F0ZWQgd29ya2Zsb3dzIGJlZm9yZSBwYXNzaW5nXG4gKiB2aWRlbyBkYXRhIHRvIHRoZSB2aWRlbyBlbGVtZW50XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgICBUaGUgc291cmNlIG9iamVjdFxuICogQHBhcmFtICB7Rmxhc2h9IHRlY2ggICBUaGUgaW5zdGFuY2Ugb2YgdGhlIEZsYXNoIHRlY2hcbiAqL1xuRmxhc2gubmF0aXZlU291cmNlSGFuZGxlci5oYW5kbGVTb3VyY2UgPSBmdW5jdGlvbihzb3VyY2UsIHRlY2gpe1xuICB0ZWNoLnNldFNyYyhzb3VyY2Uuc3JjKTtcbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgdGhlIHNvdXJjZSBoYW5kbGVyIHdoZW4gZGlzcG9zaW5nIHRoZSBwbGF5ZXIgb3Igc3dpdGNoaW5nIHNvdXJjZXMuLlxuICogKG5vIGNsZWFudXAgaXMgbmVlZGVkIHdoZW4gc3VwcG9ydGluZyB0aGUgZm9ybWF0IG5hdGl2ZWx5KVxuICovXG5GbGFzaC5uYXRpdmVTb3VyY2VIYW5kbGVyLmRpc3Bvc2UgPSBmdW5jdGlvbigpe307XG5cbi8vIFJlZ2lzdGVyIHRoZSBuYXRpdmUgc291cmNlIGhhbmRsZXJcbkZsYXNoLnJlZ2lzdGVyU291cmNlSGFuZGxlcihGbGFzaC5uYXRpdmVTb3VyY2VIYW5kbGVyKTtcblxuRmxhc2guZm9ybWF0cyA9IHtcbiAgJ3ZpZGVvL2Zsdic6ICdGTFYnLFxuICAndmlkZW8veC1mbHYnOiAnRkxWJyxcbiAgJ3ZpZGVvL21wNCc6ICdNUDQnLFxuICAndmlkZW8vbTR2JzogJ01QNCdcbn07XG5cbkZsYXNoLm9uUmVhZHkgPSBmdW5jdGlvbihjdXJyU3dmKXtcbiAgbGV0IGVsID0gTGliLmVsKGN1cnJTd2YpO1xuICBsZXQgdGVjaCA9IGVsICYmIGVsLnRlY2g7XG5cbiAgLy8gaWYgdGhlcmUgaXMgbm8gZWwgdGhlbiB0aGUgdGVjaCBoYXMgYmVlbiBkaXNwb3NlZFxuICAvLyBhbmQgdGhlIHRlY2ggZWxlbWVudCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBwbGF5ZXIgZGl2XG4gIGlmICh0ZWNoICYmIHRlY2guZWwoKSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdGhlIGZsYXNoIG9iamVjdCBpcyByZWFsbHkgcmVhZHlcbiAgICBGbGFzaC5jaGVja1JlYWR5KHRlY2gpO1xuICB9XG59O1xuXG4vLyBUaGUgU1dGIGlzbid0IGFsd2F5cyByZWFkeSB3aGVuIGl0IHNheXMgaXQgaXMuIFNvbWV0aW1lcyB0aGUgQVBJIGZ1bmN0aW9ucyBzdGlsbCBuZWVkIHRvIGJlIGFkZGVkIHRvIHRoZSBvYmplY3QuXG4vLyBJZiBpdCdzIG5vdCByZWFkeSwgd2Ugc2V0IGEgdGltZW91dCB0byBjaGVjayBhZ2FpbiBzaG9ydGx5LlxuRmxhc2guY2hlY2tSZWFkeSA9IGZ1bmN0aW9uKHRlY2gpe1xuICAvLyBzdG9wIHdvcnJ5aW5nIGlmIHRoZSB0ZWNoIGhhcyBiZWVuIGRpc3Bvc2VkXG4gIGlmICghdGVjaC5lbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gY2hlY2sgaWYgQVBJIHByb3BlcnR5IGV4aXN0c1xuICBpZiAodGVjaC5lbCgpLnZqc19nZXRQcm9wZXJ0eSkge1xuICAgIC8vIHRlbGwgdGVjaCBpdCdzIHJlYWR5XG4gICAgdGVjaC50cmlnZ2VyUmVhZHkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB3YWl0IGxvbmdlclxuICAgIHRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgRmxhc2hbJ2NoZWNrUmVhZHknXSh0ZWNoKTtcbiAgICB9LCA1MCk7XG4gIH1cbn07XG5cbi8vIFRyaWdnZXIgZXZlbnRzIGZyb20gdGhlIHN3ZiBvbiB0aGUgcGxheWVyXG5GbGFzaC5vbkV2ZW50ID0gZnVuY3Rpb24oc3dmSUQsIGV2ZW50TmFtZSl7XG4gIGxldCB0ZWNoID0gTGliLmVsKHN3ZklEKS50ZWNoO1xuICB0ZWNoLnRyaWdnZXIoZXZlbnROYW1lKTtcbn07XG5cbi8vIExvZyBlcnJvcnMgZnJvbSB0aGUgc3dmXG5GbGFzaC5vbkVycm9yID0gZnVuY3Rpb24oc3dmSUQsIGVycil7XG4gIGNvbnN0IHRlY2ggPSBMaWIuZWwoc3dmSUQpLnRlY2g7XG4gIGNvbnN0IG1zZyA9ICdGTEFTSDogJytlcnI7XG5cbiAgaWYgKGVyciA9PT0gJ3NyY25vdGZvdW5kJykge1xuICAgIHRlY2gudHJpZ2dlcignZXJyb3InLCB7IGNvZGU6IDQsIG1lc3NhZ2U6IG1zZyB9KTtcblxuICAvLyBlcnJvcnMgd2UgaGF2ZW4ndCBjYXRlZ29yaXplZCBpbnRvIHRoZSBtZWRpYSBlcnJvcnNcbiAgfSBlbHNlIHtcbiAgICB0ZWNoLnRyaWdnZXIoJ2Vycm9yJywgbXNnKTtcbiAgfVxufTtcblxuLy8gRmxhc2ggVmVyc2lvbiBDaGVja1xuRmxhc2gudmVyc2lvbiA9IGZ1bmN0aW9uKCl7XG4gIGxldCB2ZXJzaW9uID0gJzAsMCwwJztcblxuICAvLyBJRVxuICB0cnkge1xuICAgIHZlcnNpb24gPSBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ1Nob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoJykuR2V0VmFyaWFibGUoJyR2ZXJzaW9uJykucmVwbGFjZSgvXFxEKy9nLCAnLCcpLm1hdGNoKC9eLD8oLispLD8kLylbMV07XG5cbiAgLy8gb3RoZXIgYnJvd3NlcnNcbiAgfSBjYXRjaChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChuYXZpZ2F0b3IubWltZVR5cGVzWydhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCddLmVuYWJsZWRQbHVnaW4pe1xuICAgICAgICB2ZXJzaW9uID0gKG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2ggMi4wJ10gfHwgbmF2aWdhdG9yLnBsdWdpbnNbJ1Nob2Nrd2F2ZSBGbGFzaCddKS5kZXNjcmlwdGlvbi5yZXBsYWNlKC9cXEQrL2csICcsJykubWF0Y2goL14sPyguKyksPyQvKVsxXTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGVycikge31cbiAgfVxuICByZXR1cm4gdmVyc2lvbi5zcGxpdCgnLCcpO1xufTtcblxuLy8gRmxhc2ggZW1iZWRkaW5nIG1ldGhvZC4gT25seSB1c2VkIGluIG5vbi1pZnJhbWUgbW9kZVxuRmxhc2guZW1iZWQgPSBmdW5jdGlvbihzd2YsIGZsYXNoVmFycywgcGFyYW1zLCBhdHRyaWJ1dGVzKXtcbiAgY29uc3QgY29kZSA9IEZsYXNoLmdldEVtYmVkQ29kZShzd2YsIGZsYXNoVmFycywgcGFyYW1zLCBhdHRyaWJ1dGVzKTtcblxuICAvLyBHZXQgZWxlbWVudCBieSBlbWJlZGRpbmcgY29kZSBhbmQgcmV0cmlldmluZyBjcmVhdGVkIGVsZW1lbnRcbiAgY29uc3Qgb2JqID0gTGliLmNyZWF0ZUVsKCdkaXYnLCB7IGlubmVySFRNTDogY29kZSB9KS5jaGlsZE5vZGVzWzBdO1xuXG4gIHJldHVybiBvYmo7XG59O1xuXG5GbGFzaC5nZXRFbWJlZENvZGUgPSBmdW5jdGlvbihzd2YsIGZsYXNoVmFycywgcGFyYW1zLCBhdHRyaWJ1dGVzKXtcbiAgY29uc3Qgb2JqVGFnID0gJzxvYmplY3QgdHlwZT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIgJztcbiAgbGV0IGZsYXNoVmFyc1N0cmluZyA9ICcnO1xuICBsZXQgcGFyYW1zU3RyaW5nID0gJyc7XG4gIGxldCBhdHRyc1N0cmluZyA9ICcnO1xuXG4gIC8vIENvbnZlcnQgZmxhc2ggdmFycyB0byBzdHJpbmdcbiAgaWYgKGZsYXNoVmFycykge1xuICAgIExpYi5vYmouZWFjaChmbGFzaFZhcnMsIGZ1bmN0aW9uKGtleSwgdmFsKXtcbiAgICAgIGZsYXNoVmFyc1N0cmluZyArPSBgJHtrZXl9PSR7dmFsfSZhbXA7YDtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFkZCBzd2YsIGZsYXNoVmFycywgYW5kIG90aGVyIGRlZmF1bHQgcGFyYW1zXG4gIHBhcmFtcyA9IExpYi5vYmoubWVyZ2Uoe1xuICAgICdtb3ZpZSc6IHN3ZixcbiAgICAnZmxhc2h2YXJzJzogZmxhc2hWYXJzU3RyaW5nLFxuICAgICdhbGxvd1NjcmlwdEFjY2Vzcyc6ICdhbHdheXMnLCAvLyBSZXF1aXJlZCB0byB0YWxrIHRvIHN3ZlxuICAgICdhbGxvd05ldHdvcmtpbmcnOiAnYWxsJyAvLyBBbGwgc2hvdWxkIGJlIGRlZmF1bHQsIGJ1dCBoYXZpbmcgc2VjdXJpdHkgaXNzdWVzLlxuICB9LCBwYXJhbXMpO1xuXG4gIC8vIENyZWF0ZSBwYXJhbSB0YWdzIHN0cmluZ1xuICBMaWIub2JqLmVhY2gocGFyYW1zLCBmdW5jdGlvbihrZXksIHZhbCl7XG4gICAgcGFyYW1zU3RyaW5nICs9IGA8cGFyYW0gbmFtZT1cIiR7a2V5fVwiIHZhbHVlPVwiJHt2YWx9XCIgLz5gO1xuICB9KTtcblxuICBhdHRyaWJ1dGVzID0gTGliLm9iai5tZXJnZSh7XG4gICAgLy8gQWRkIHN3ZiB0byBhdHRyaWJ1dGVzIChuZWVkIGJvdGggZm9yIElFIGFuZCBPdGhlcnMgdG8gd29yaylcbiAgICAnZGF0YSc6IHN3ZixcblxuICAgIC8vIERlZmF1bHQgdG8gMTAwJSB3aWR0aC9oZWlnaHRcbiAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgJ2hlaWdodCc6ICcxMDAlJ1xuXG4gIH0sIGF0dHJpYnV0ZXMpO1xuXG4gIC8vIENyZWF0ZSBBdHRyaWJ1dGVzIHN0cmluZ1xuICBMaWIub2JqLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24oa2V5LCB2YWwpe1xuICAgIGF0dHJzU3RyaW5nICs9IGAke2tleX09XCIke3ZhbH1cIiBgO1xuICB9KTtcblxuICByZXR1cm4gYCR7b2JqVGFnfSR7YXR0cnNTdHJpbmd9PiR7cGFyYW1zU3RyaW5nfTwvb2JqZWN0PmA7XG59O1xuXG4vLyBSdW4gRmxhc2ggdGhyb3VnaCB0aGUgUlRNUCBkZWNvcmF0b3JcbkZsYXNoUnRtcERlY29yYXRvcihGbGFzaCk7XG5cblRlY2gucmVnaXN0ZXJDb21wb25lbnQoJ0ZsYXNoJywgRmxhc2gpO1xuZXhwb3J0IGRlZmF1bHQgRmxhc2g7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgSFRNTDUgTWVkaWEgQ29udHJvbGxlciAtIFdyYXBwZXIgZm9yIEhUTUw1IE1lZGlhIEFQSVxuICovXG5cbmltcG9ydCBUZWNoIGZyb20gJy4vdGVjaC5qcyc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCAqIGFzIFZqc1V0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLyoqXG4gKiBIVE1MNSBNZWRpYSBDb250cm9sbGVyIC0gV3JhcHBlciBmb3IgSFRNTDUgTWVkaWEgQVBJXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcmVhZHlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBIdG1sNSBleHRlbmRzIFRlY2gge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHJlYWR5KXtcbiAgICBzdXBlcihvcHRpb25zLCByZWFkeSk7XG5cbiAgICBjb25zdCBzb3VyY2UgPSBvcHRpb25zLnNvdXJjZTtcblxuICAgIC8vIFNldCB0aGUgc291cmNlIGlmIG9uZSBpcyBwcm92aWRlZFxuICAgIC8vIDEpIENoZWNrIGlmIHRoZSBzb3VyY2UgaXMgbmV3IChpZiBub3QsIHdlIHdhbnQgdG8ga2VlcCB0aGUgb3JpZ2luYWwgc28gcGxheWJhY2sgaXNuJ3QgaW50ZXJydXB0ZWQpXG4gICAgLy8gMikgQ2hlY2sgdG8gc2VlIGlmIHRoZSBuZXR3b3JrIHN0YXRlIG9mIHRoZSB0YWcgd2FzIGZhaWxlZCBhdCBpbml0LCBhbmQgaWYgc28sIHJlc2V0IHRoZSBzb3VyY2VcbiAgICAvLyBhbnl3YXkgc28gdGhlIGVycm9yIGdldHMgZmlyZWQuXG4gICAgaWYgKHNvdXJjZSAmJiAodGhpcy5lbF8uY3VycmVudFNyYyAhPT0gc291cmNlLnNyYyB8fCAob3B0aW9ucy50YWcgJiYgb3B0aW9ucy50YWcuaW5pdE5ldHdvcmtTdGF0ZV8gPT09IDMpKSkge1xuICAgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbF8uaGFzQ2hpbGROb2RlcygpKSB7XG5cbiAgICAgIGxldCBub2RlcyA9IHRoaXMuZWxfLmNoaWxkTm9kZXM7XG4gICAgICBsZXQgbm9kZXNMZW5ndGggPSBub2Rlcy5sZW5ndGg7XG4gICAgICBsZXQgcmVtb3ZlTm9kZXMgPSBbXTtcblxuICAgICAgd2hpbGUgKG5vZGVzTGVuZ3RoLS0pIHtcbiAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tub2Rlc0xlbmd0aF07XG4gICAgICAgIGxldCBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5vZGVOYW1lID09PSAndHJhY2snKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgICAgICAgLy8gRW1wdHkgdmlkZW8gdGFnIHRyYWNrcyBzbyB0aGUgYnVpbHQtaW4gcGxheWVyIGRvZXNuJ3QgdXNlIHRoZW0gYWxzby5cbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IG5vdCBiZSBmYXN0IGVub3VnaCB0byBzdG9wIEhUTUw1IGJyb3dzZXJzIGZyb20gcmVhZGluZyB0aGUgdGFnc1xuICAgICAgICAgICAgLy8gc28gd2UnbGwgbmVlZCB0byB0dXJuIG9mZiBhbnkgZGVmYXVsdCB0cmFja3MgaWYgd2UncmUgbWFudWFsbHkgZG9pbmdcbiAgICAgICAgICAgIC8vIGNhcHRpb25zIGFuZCBzdWJ0aXRsZXMuIHZpZGVvRWxlbWVudC50ZXh0VHJhY2tzXG4gICAgICAgICAgICByZW1vdmVOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFja18obm9kZS50cmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGk9MDsgaTxyZW1vdmVOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmVsXy5yZW1vdmVDaGlsZChyZW1vdmVOb2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICB0aGlzLm9uKCdsb2Fkc3RhcnQnLCBMaWIuYmluZCh0aGlzLCB0aGlzLmhpZGVDYXB0aW9ucykpO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSBpZiBuYXRpdmUgY29udHJvbHMgc2hvdWxkIGJlIHVzZWRcbiAgICAvLyBPdXIgZ29hbCBzaG91bGQgYmUgdG8gZ2V0IHRoZSBjdXN0b20gY29udHJvbHMgb24gbW9iaWxlIHNvbGlkIGV2ZXJ5d2hlcmVcbiAgICAvLyBzbyB3ZSBjYW4gcmVtb3ZlIHRoaXMgYWxsIHRvZ2V0aGVyLiBSaWdodCBub3cgdGhpcyB3aWxsIGJsb2NrIGN1c3RvbVxuICAgIC8vIGNvbnRyb2xzIG9uIHRvdWNoIGVuYWJsZWQgbGFwdG9wcyBsaWtlIHRoZSBDaHJvbWUgUGl4ZWxcbiAgICBpZiAoTGliLlRPVUNIX0VOQUJMRUQgJiYgb3B0aW9ucy5uYXRpdmVDb250cm9sc0ZvclRvdWNoID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3VzZW5hdGl2ZWNvbnRyb2xzJyk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyUmVhZHkoKTtcbiAgfVxuXG5cbiAgZGlzcG9zZSgpIHtcbiAgICBIdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMuZWxfKTtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSB0aGlzLm9wdGlvbnNfLnRhZztcblxuICAgIC8vIENoZWNrIGlmIHRoaXMgYnJvd3NlciBzdXBwb3J0cyBtb3ZpbmcgdGhlIGVsZW1lbnQgaW50byB0aGUgYm94LlxuICAgIC8vIE9uIHRoZSBpUGhvbmUgdmlkZW8gd2lsbCBicmVhayBpZiB5b3UgbW92ZSB0aGUgZWxlbWVudCxcbiAgICAvLyBTbyB3ZSBoYXZlIHRvIGNyZWF0ZSBhIGJyYW5kIG5ldyBlbGVtZW50LlxuICAgIGlmICghZWwgfHwgdGhpc1snbW92aW5nTWVkaWFFbGVtZW50SW5ET00nXSA9PT0gZmFsc2UpIHtcblxuICAgICAgLy8gSWYgdGhlIG9yaWdpbmFsIHRhZyBpcyBzdGlsbCB0aGVyZSwgY2xvbmUgYW5kIHJlbW92ZSBpdC5cbiAgICAgIGlmIChlbCkge1xuICAgICAgICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIEh0bWw1LmRpc3Bvc2VNZWRpYUVsZW1lbnQoZWwpO1xuICAgICAgICBlbCA9IGNsb25lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwgPSBMaWIuY3JlYXRlRWwoJ3ZpZGVvJyk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIG5hdGl2ZSBjb250cm9scyBzaG91bGQgYmUgdXNlZFxuICAgICAgICBsZXQgdGFnQXR0cmlidXRlcyA9IHRoaXMub3B0aW9uc18udGFnICYmIExpYi5nZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLm9wdGlvbnNfLnRhZyk7XG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gVmpzVXRpbC5tZXJnZU9wdGlvbnMoe30sIHRhZ0F0dHJpYnV0ZXMpO1xuICAgICAgICBpZiAoIUxpYi5UT1VDSF9FTkFCTEVEIHx8IHRoaXMub3B0aW9uc18ubmF0aXZlQ29udHJvbHNGb3JUb3VjaCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzLmNvbnRyb2xzO1xuICAgICAgICB9XG5cbiAgICAgICAgTGliLnNldEVsZW1lbnRBdHRyaWJ1dGVzKGVsLFxuICAgICAgICAgIExpYi5vYmoubWVyZ2UoYXR0cmlidXRlcywge1xuICAgICAgICAgICAgaWQ6IHRoaXMub3B0aW9uc18ucGxheWVySWQgKyAnX2h0bWw1X2FwaScsXG4gICAgICAgICAgICBjbGFzczogJ3Zqcy10ZWNoJ1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnNfLnRyYWNrcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9uc18udHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdHJhY2sgPSB0aGlzLm9wdGlvbnNfLnRyYWNrc1tpXTtcbiAgICAgICAgICBsZXQgdHJhY2tFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgdHJhY2tFbC5raW5kID0gdHJhY2sua2luZDtcbiAgICAgICAgICB0cmFja0VsLmxhYmVsID0gdHJhY2subGFiZWw7XG4gICAgICAgICAgdHJhY2tFbC5zcmNsYW5nID0gdHJhY2suc3JjbGFuZztcbiAgICAgICAgICB0cmFja0VsLnNyYyA9IHRyYWNrLnNyYztcbiAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIHRyYWNrKSB7XG4gICAgICAgICAgICB0cmFja0VsLnNldEF0dHJpYnV0ZSgnZGVmYXVsdCcsICdkZWZhdWx0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHRyYWNrRWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHNwZWNpZmljIHRhZyBzZXR0aW5ncywgaW4gY2FzZSB0aGV5IHdlcmUgb3ZlcnJpZGRlblxuICAgIGxldCBzZXR0aW5nc0F0dHJzID0gWydhdXRvcGxheScsJ3ByZWxvYWQnLCdsb29wJywnbXV0ZWQnXTtcbiAgICBmb3IgKGxldCBpID0gc2V0dGluZ3NBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgYXR0ciA9IHNldHRpbmdzQXR0cnNbaV07XG4gICAgICBsZXQgb3ZlcndyaXRlQXR0cnMgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zX1thdHRyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3ZlcndyaXRlQXR0cnNbYXR0cl0gPSB0aGlzLm9wdGlvbnNfW2F0dHJdO1xuICAgICAgfVxuICAgICAgTGliLnNldEVsZW1lbnRBdHRyaWJ1dGVzKGVsLCBvdmVyd3JpdGVBdHRycyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsO1xuICAgIC8vIGplbm5paXNhd2Vzb21lID0gdHJ1ZTtcbiAgfVxuXG5cbiAgaGlkZUNhcHRpb25zKCkge1xuICAgIGxldCB0cmFja3MgPSB0aGlzLmVsXy5xdWVyeVNlbGVjdG9yQWxsKCd0cmFjaycpO1xuICAgIGxldCBpID0gdHJhY2tzLmxlbmd0aDtcbiAgICBjb25zdCBraW5kcyA9IHtcbiAgICAgICdjYXB0aW9ucyc6IDEsXG4gICAgICAnc3VidGl0bGVzJzogMVxuICAgIH07XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBsZXQgdHJhY2sgPSB0cmFja3NbaV0udHJhY2s7XG4gICAgICBpZiAoKHRyYWNrICYmIHRyYWNrWydraW5kJ10gaW4ga2luZHMpICYmXG4gICAgICAgICAgKCF0cmFja3NbaV1bJ2RlZmF1bHQnXSkpIHtcbiAgICAgICAgdHJhY2subW9kZSA9ICdkaXNhYmxlZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGxheSgpIHsgdGhpcy5lbF8ucGxheSgpOyB9XG4gIHBhdXNlKCkgeyB0aGlzLmVsXy5wYXVzZSgpOyB9XG4gIHBhdXNlZCgpIHsgcmV0dXJuIHRoaXMuZWxfLnBhdXNlZDsgfVxuXG4gIGN1cnJlbnRUaW1lKCkgeyByZXR1cm4gdGhpcy5lbF8uY3VycmVudFRpbWU7IH1cbiAgc2V0Q3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmVsXy5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBMaWIubG9nKGUsICdWaWRlbyBpcyBub3QgcmVhZHkuIChWaWRlby5qcyknKTtcbiAgICAgIC8vIHRoaXMud2FybmluZyhWaWRlb0pTLndhcm5pbmdzLnZpZGVvTm90UmVhZHkpO1xuICAgIH1cbiAgfVxuXG4gIGR1cmF0aW9uKCkgeyByZXR1cm4gdGhpcy5lbF8uZHVyYXRpb24gfHwgMDsgfVxuXG4gIGJ1ZmZlcmVkKCkgeyByZXR1cm4gdGhpcy5lbF8uYnVmZmVyZWQ7IH1cblxuICB2b2x1bWUoKSB7IHJldHVybiB0aGlzLmVsXy52b2x1bWU7IH1cbiAgc2V0Vm9sdW1lKHBlcmNlbnRBc0RlY2ltYWwpIHsgdGhpcy5lbF8udm9sdW1lID0gcGVyY2VudEFzRGVjaW1hbDsgfVxuXG4gIG11dGVkKCkgeyByZXR1cm4gdGhpcy5lbF8ubXV0ZWQ7IH1cbiAgc2V0TXV0ZWQobXV0ZWQpIHsgdGhpcy5lbF8ubXV0ZWQgPSBtdXRlZDsgfVxuXG4gIHdpZHRoKCkgeyByZXR1cm4gdGhpcy5lbF8ub2Zmc2V0V2lkdGg7IH1cbiAgaGVpZ2h0KCkgeyAgcmV0dXJuIHRoaXMuZWxfLm9mZnNldEhlaWdodDsgfVxuXG4gIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZWxfLndlYmtpdEVudGVyRnVsbFNjcmVlbiA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBTZWVtcyB0byBiZSBicm9rZW4gaW4gQ2hyb21pdW0vQ2hyb21lICYmIFNhZmFyaSBpbiBMZW9wYXJkXG4gICAgICBpZiAoL0FuZHJvaWQvLnRlc3QoTGliLlVTRVJfQUdFTlQpIHx8ICEvQ2hyb21lfE1hYyBPUyBYIDEwLjUvLnRlc3QoTGliLlVTRVJfQUdFTlQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBlbnRlckZ1bGxTY3JlZW4oKSB7XG4gICAgdmFyIHZpZGVvID0gdGhpcy5lbF87XG5cbiAgICBpZiAoJ3dlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuJyBpbiB2aWRlbykge1xuICAgICAgdGhpcy5vbmUoJ3dlYmtpdGJlZ2luZnVsbHNjcmVlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9uZSgnd2Via2l0ZW5kZnVsbHNjcmVlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh2aWRlby5wYXVzZWQgJiYgdmlkZW8ubmV0d29ya1N0YXRlIDw9IHZpZGVvLkhBVkVfTUVUQURBVEEpIHtcbiAgICAgIC8vIGF0dGVtcHQgdG8gcHJpbWUgdGhlIHZpZGVvIGVsZW1lbnQgZm9yIHByb2dyYW1tYXRpYyBhY2Nlc3NcbiAgICAgIC8vIHRoaXMgaXNuJ3QgbmVjZXNzYXJ5IG9uIHRoZSBkZXNrdG9wIGJ1dCBzaG91bGRuJ3QgaHVydFxuICAgICAgdGhpcy5lbF8ucGxheSgpO1xuXG4gICAgICAvLyBwbGF5aW5nIGFuZCBwYXVzaW5nIHN5bmNocm9ub3VzbHkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uIHRvIGZ1bGxzY3JlZW5cbiAgICAgIC8vIGNhbiBnZXQgaU9TIH42LjEgZGV2aWNlcyBpbnRvIGEgcGxheS9wYXVzZSBsb29wXG4gICAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICAgICAgdmlkZW8ud2Via2l0RW50ZXJGdWxsU2NyZWVuKCk7XG4gICAgICB9LCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlkZW8ud2Via2l0RW50ZXJGdWxsU2NyZWVuKCk7XG4gICAgfVxuICB9XG5cbiAgZXhpdEZ1bGxTY3JlZW4oKSB7XG4gICAgdGhpcy5lbF8ud2Via2l0RXhpdEZ1bGxTY3JlZW4oKTtcbiAgfVxuXG4gIHNyYyhzcmMpIHtcbiAgICBpZiAoc3JjID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsXy5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldHRpbmcgc3JjIHRocm91Z2ggYHNyY2AgaW5zdGVhZCBvZiBgc2V0U3JjYCB3aWxsIGJlIGRlcHJlY2F0ZWRcbiAgICAgIHRoaXMuc2V0U3JjKHNyYyk7XG4gICAgfVxuICB9XG5cbiAgc2V0U3JjKHNyYykgeyB0aGlzLmVsXy5zcmMgPSBzcmM7IH1cblxuICBsb2FkKCl7IHRoaXMuZWxfLmxvYWQoKTsgfVxuXG4gIGN1cnJlbnRTcmMoKSB7IHJldHVybiB0aGlzLmVsXy5jdXJyZW50U3JjOyB9XG5cbiAgcG9zdGVyKCkgeyByZXR1cm4gdGhpcy5lbF8ucG9zdGVyOyB9XG4gIHNldFBvc3Rlcih2YWwpIHsgdGhpcy5lbF8ucG9zdGVyID0gdmFsOyB9XG5cbiAgcHJlbG9hZCgpIHsgcmV0dXJuIHRoaXMuZWxfLnByZWxvYWQ7IH1cbiAgc2V0UHJlbG9hZCh2YWwpIHsgdGhpcy5lbF8ucHJlbG9hZCA9IHZhbDsgfVxuXG4gIGF1dG9wbGF5KCkgeyByZXR1cm4gdGhpcy5lbF8uYXV0b3BsYXk7IH1cbiAgc2V0QXV0b3BsYXkodmFsKSB7IHRoaXMuZWxfLmF1dG9wbGF5ID0gdmFsOyB9XG5cbiAgY29udHJvbHMoKSB7IHJldHVybiB0aGlzLmVsXy5jb250cm9sczsgfVxuICBzZXRDb250cm9scyh2YWwpIHsgdGhpcy5lbF8uY29udHJvbHMgPSAhIXZhbDsgfVxuXG4gIGxvb3AoKSB7IHJldHVybiB0aGlzLmVsXy5sb29wOyB9XG4gIHNldExvb3AodmFsKSB7IHRoaXMuZWxfLmxvb3AgPSB2YWw7IH1cblxuICBlcnJvcigpIHsgcmV0dXJuIHRoaXMuZWxfLmVycm9yOyB9XG4gIHNlZWtpbmcoKSB7IHJldHVybiB0aGlzLmVsXy5zZWVraW5nOyB9XG4gIGVuZGVkKCkgeyByZXR1cm4gdGhpcy5lbF8uZW5kZWQ7IH1cbiAgZGVmYXVsdE11dGVkKCkgeyByZXR1cm4gdGhpcy5lbF8uZGVmYXVsdE11dGVkOyB9XG5cbiAgcGxheWJhY2tSYXRlKCkgeyByZXR1cm4gdGhpcy5lbF8ucGxheWJhY2tSYXRlOyB9XG4gIHNldFBsYXliYWNrUmF0ZSh2YWwpIHsgdGhpcy5lbF8ucGxheWJhY2tSYXRlID0gdmFsOyB9XG5cbiAgbmV0d29ya1N0YXRlKCkgeyByZXR1cm4gdGhpcy5lbF8ubmV0d29ya1N0YXRlOyB9XG4gIHJlYWR5U3RhdGUoKSB7IHJldHVybiB0aGlzLmVsXy5yZWFkeVN0YXRlOyB9XG5cbiAgdGV4dFRyYWNrcygpIHtcbiAgICBpZiAoIXRoaXNbJ2ZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyddKSB7XG4gICAgICByZXR1cm4gc3VwZXIudGV4dFRyYWNrcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsXy50ZXh0VHJhY2tzO1xuICB9XG4gIGFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpIHtcbiAgICBpZiAoIXRoaXNbJ2ZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyddKSB7XG4gICAgICByZXR1cm4gc3VwZXIuYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWxfLmFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpO1xuICB9XG5cbiAgYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnM9e30pIHtcbiAgICBpZiAoIXRoaXNbJ2ZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyddKSB7XG4gICAgICByZXR1cm4gc3VwZXIuYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciB0cmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJyk7XG5cbiAgICBpZiAob3B0aW9uc1sna2luZCddKSB7XG4gICAgICB0cmFja1sna2luZCddID0gb3B0aW9uc1sna2luZCddO1xuICAgIH1cbiAgICBpZiAob3B0aW9uc1snbGFiZWwnXSkge1xuICAgICAgdHJhY2tbJ2xhYmVsJ10gPSBvcHRpb25zWydsYWJlbCddO1xuICAgIH1cbiAgICBpZiAob3B0aW9uc1snbGFuZ3VhZ2UnXSB8fCBvcHRpb25zWydzcmNsYW5nJ10pIHtcbiAgICAgIHRyYWNrWydzcmNsYW5nJ10gPSBvcHRpb25zWydsYW5ndWFnZSddIHx8IG9wdGlvbnNbJ3NyY2xhbmcnXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnNbJ2RlZmF1bHQnXSkge1xuICAgICAgdHJhY2tbJ2RlZmF1bHQnXSA9IG9wdGlvbnNbJ2RlZmF1bHQnXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnNbJ2lkJ10pIHtcbiAgICAgIHRyYWNrWydpZCddID0gb3B0aW9uc1snaWQnXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnNbJ3NyYyddKSB7XG4gICAgICB0cmFja1snc3JjJ10gPSBvcHRpb25zWydzcmMnXTtcbiAgICB9XG5cbiAgICB0aGlzLmVsKCkuYXBwZW5kQ2hpbGQodHJhY2spO1xuXG4gICAgaWYgKHRyYWNrLnRyYWNrWydraW5kJ10gPT09ICdtZXRhZGF0YScpIHtcbiAgICAgIHRyYWNrWyd0cmFjayddWydtb2RlJ10gPSAnaGlkZGVuJztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2tbJ3RyYWNrJ11bJ21vZGUnXSA9ICdkaXNhYmxlZCc7XG4gICAgfVxuXG4gICAgdHJhY2tbJ29ubG9hZCddID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdHQgPSB0cmFja1sndHJhY2snXTtcbiAgICAgIGlmICh0cmFjay5yZWFkeVN0YXRlID49IDIpIHtcbiAgICAgICAgaWYgKHR0WydraW5kJ10gPT09ICdtZXRhZGF0YScgJiYgdHRbJ21vZGUnXSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICB0dFsnbW9kZSddID0gJ2hpZGRlbic7XG4gICAgICAgIH0gZWxzZSBpZiAodHRbJ2tpbmQnXSAhPT0gJ21ldGFkYXRhJyAmJiB0dFsnbW9kZSddICE9PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgdHRbJ21vZGUnXSA9ICdkaXNhYmxlZCc7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2tbJ29ubG9hZCddID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2tfKHRyYWNrLnRyYWNrKTtcblxuICAgIHJldHVybiB0cmFjaztcbiAgfVxuXG4gIHJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjaykge1xuICAgIGlmICghdGhpc1snZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pIHtcbiAgICAgIHJldHVybiBzdXBlci5yZW1vdmVSZW1vdGVUZXh0VHJhY2sodHJhY2spO1xuICAgIH1cblxuICAgIHZhciB0cmFja3MsIGk7XG5cbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5yZW1vdmVUcmFja18odHJhY2spO1xuXG4gICAgdHJhY2tzID0gdGhpcy5lbCgpWydxdWVyeVNlbGVjdG9yQWxsJ10oJ3RyYWNrJyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJhY2tzW2ldID09PSB0cmFjayB8fCB0cmFja3NbaV1bJ3RyYWNrJ10gPT09IHRyYWNrKSB7XG4gICAgICAgIHRyYWNrc1tpXVsncGFyZW50Tm9kZSddWydyZW1vdmVDaGlsZCddKHRyYWNrc1tpXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cblxuLyogSFRNTDUgU3VwcG9ydCBUZXN0aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBIVE1MNSB2aWRlbyBpcyBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyL2RldmljZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbigpe1xuICAvLyBJRTkgd2l0aCBubyBNZWRpYSBQbGF5ZXIgaXMgYSBMSUFSISAoIzk4NClcbiAgdHJ5IHtcbiAgICBMaWIuVEVTVF9WSURbJ3ZvbHVtZSddID0gMC41O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICEhTGliLlRFU1RfVklELmNhblBsYXlUeXBlO1xufTtcblxuLy8gQWRkIFNvdXJjZSBIYW5kbGVyIHBhdHRlcm4gZnVuY3Rpb25zIHRvIHRoaXMgdGVjaFxuVGVjaC53aXRoU291cmNlSGFuZGxlcnMoSHRtbDUpO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IG5hdGl2ZSBzb3VyY2UgaGFuZGxlci5cbiAqIFRoaXMgc2ltcGx5IHBhc3NlcyB0aGUgc291cmNlIHRvIHRoZSB2aWRlbyBlbGVtZW50LiBOb3RoaW5nIGZhbmN5LlxuICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgICBUaGUgc291cmNlIG9iamVjdFxuICogQHBhcmFtICB7SHRtbDV9IHRlY2ggIFRoZSBpbnN0YW5jZSBvZiB0aGUgSFRNTDUgdGVjaFxuICovXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyID0ge307XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHZpZGVvIGVsZW1lbnQgY2FuIGhhbmRsZSB0aGUgc291cmNlIG5hdGl2ZWx5XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICovXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhbkhhbmRsZVNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gIHZhciBtYXRjaCwgZXh0O1xuXG4gIGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUpe1xuICAgIC8vIElFOSBvbiBXaW5kb3dzIDcgd2l0aG91dCBNZWRpYVBsYXllciB0aHJvd3MgYW4gZXJyb3IgaGVyZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy81MTlcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIExpYi5URVNUX1ZJRC5jYW5QbGF5VHlwZSh0eXBlKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICAvLyBJZiBhIHR5cGUgd2FzIHByb3ZpZGVkIHdlIHNob3VsZCByZWx5IG9uIHRoYXRcbiAgaWYgKHNvdXJjZS50eXBlKSB7XG4gICAgcmV0dXJuIGNhblBsYXlUeXBlKHNvdXJjZS50eXBlKTtcbiAgfSBlbHNlIGlmIChzb3VyY2Uuc3JjKSB7XG4gICAgLy8gSWYgbm8gdHlwZSwgZmFsbCBiYWNrIHRvIGNoZWNraW5nICd2aWRlby9bRVhURU5TSU9OXSdcbiAgICBleHQgPSBMaWIuZ2V0RmlsZUV4dGVuc2lvbihzb3VyY2Uuc3JjKTtcblxuICAgIHJldHVybiBjYW5QbGF5VHlwZShgdmlkZW8vJHtleHR9YCk7XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIFBhc3MgdGhlIHNvdXJjZSB0byB0aGUgdmlkZW8gZWxlbWVudFxuICogQWRhcHRpdmUgc291cmNlIGhhbmRsZXJzIHdpbGwgaGF2ZSBtb3JlIGNvbXBsaWNhdGVkIHdvcmtmbG93cyBiZWZvcmUgcGFzc2luZ1xuICogdmlkZW8gZGF0YSB0byB0aGUgdmlkZW8gZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSAge0h0bWw1fSB0ZWNoICAgVGhlIGluc3RhbmNlIG9mIHRoZSBIdG1sNSB0ZWNoXG4gKi9cbkh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIuaGFuZGxlU291cmNlID0gZnVuY3Rpb24oc291cmNlLCB0ZWNoKXtcbiAgdGVjaC5zZXRTcmMoc291cmNlLnNyYyk7XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRoZSBzb3VyY2UgaGFuZGxlciB3aGVuIGRpc3Bvc2luZyB0aGUgcGxheWVyIG9yIHN3aXRjaGluZyBzb3VyY2VzLi5cbiAqIChubyBjbGVhbnVwIGlzIG5lZWRlZCB3aGVuIHN1cHBvcnRpbmcgdGhlIGZvcm1hdCBuYXRpdmVseSlcbiAqL1xuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5kaXNwb3NlID0gZnVuY3Rpb24oKXt9O1xuXG4vLyBSZWdpc3RlciB0aGUgbmF0aXZlIHNvdXJjZSBoYW5kbGVyXG5IdG1sNS5yZWdpc3RlclNvdXJjZUhhbmRsZXIoSHRtbDUubmF0aXZlU291cmNlSGFuZGxlcik7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHZvbHVtZSBjYW4gYmUgY2hhbmdlZCBpbiB0aGlzIGJyb3dzZXIvZGV2aWNlLlxuICogVm9sdW1lIGNhbm5vdCBiZSBjaGFuZ2VkIGluIGEgbG90IG9mIG1vYmlsZSBkZXZpY2VzLlxuICogU3BlY2lmaWNhbGx5LCBpdCBjYW4ndCBiZSBjaGFuZ2VkIGZyb20gMSBvbiBpT1MuXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5IdG1sNS5jYW5Db250cm9sVm9sdW1lID0gZnVuY3Rpb24oKXtcbiAgdmFyIHZvbHVtZSA9ICBMaWIuVEVTVF9WSUQudm9sdW1lO1xuICBMaWIuVEVTVF9WSUQudm9sdW1lID0gKHZvbHVtZSAvIDIpICsgMC4xO1xuICByZXR1cm4gdm9sdW1lICE9PSBMaWIuVEVTVF9WSUQudm9sdW1lO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBwbGF5YmFja1JhdGUgaXMgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAqL1xuSHRtbDUuY2FuQ29udHJvbFBsYXliYWNrUmF0ZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBwbGF5YmFja1JhdGUgPSAgTGliLlRFU1RfVklELnBsYXliYWNrUmF0ZTtcbiAgTGliLlRFU1RfVklELnBsYXliYWNrUmF0ZSA9IChwbGF5YmFja1JhdGUgLyAyKSArIDAuMTtcbiAgcmV0dXJuIHBsYXliYWNrUmF0ZSAhPT0gTGliLlRFU1RfVklELnBsYXliYWNrUmF0ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIG5hdGl2ZSB0ZXh0IHRyYWNrcyBhcmUgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci9kZXZpY2VcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkh0bWw1LnN1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3VwcG9ydHNUZXh0VHJhY2tzO1xuXG4gIC8vIEZpZ3VyZSBvdXQgbmF0aXZlIHRleHQgdHJhY2sgc3VwcG9ydFxuICAvLyBJZiBtb2RlIGlzIGEgbnVtYmVyLCB3ZSBjYW5ub3QgY2hhbmdlIGl0IGJlY2F1c2UgaXQnbGwgZGlzYXBwZWFyIGZyb20gdmlldy5cbiAgLy8gQnJvd3NlcnMgd2l0aCBudW1lcmljIG1vZGVzIGluY2x1ZGUgSUUxMCBhbmQgb2xkZXIgKDw9MjAxMykgc2Ftc3VuZyBhbmRyb2lkIG1vZGVscy5cbiAgLy8gRmlyZWZveCBpc24ndCBwbGF5aW5nIG5pY2UgZWl0aGVyIHdpdGggbW9kaWZ5aW5nIHRoZSBtb2RlXG4gIC8vIFRPRE86IEludmVzdGlnYXRlIGZpcmVmb3g6IGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy8xODYyXG4gIHN1cHBvcnRzVGV4dFRyYWNrcyA9ICEhTGliLlRFU1RfVklELnRleHRUcmFja3M7XG4gIGlmIChzdXBwb3J0c1RleHRUcmFja3MgJiYgTGliLlRFU1RfVklELnRleHRUcmFja3MubGVuZ3RoID4gMCkge1xuICAgIHN1cHBvcnRzVGV4dFRyYWNrcyA9IHR5cGVvZiBMaWIuVEVTVF9WSUQudGV4dFRyYWNrc1swXVsnbW9kZSddICE9PSAnbnVtYmVyJztcbiAgfVxuICBpZiAoc3VwcG9ydHNUZXh0VHJhY2tzICYmIExpYi5JU19GSVJFRk9YKSB7XG4gICAgc3VwcG9ydHNUZXh0VHJhY2tzID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gc3VwcG9ydHNUZXh0VHJhY2tzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHRlY2gncyB2b2x1bWUgY29udHJvbCBzdXBwb3J0IHN0YXR1c1xuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cbkh0bWw1LnByb3RvdHlwZVsnZmVhdHVyZXNWb2x1bWVDb250cm9sJ10gPSBIdG1sNS5jYW5Db250cm9sVm9sdW1lKCk7XG5cbi8qKlxuICogU2V0IHRoZSB0ZWNoJ3MgcGxheWJhY2tSYXRlIHN1cHBvcnQgc3RhdHVzXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUucHJvdG90eXBlWydmZWF0dXJlc1BsYXliYWNrUmF0ZSddID0gSHRtbDUuY2FuQ29udHJvbFBsYXliYWNrUmF0ZSgpO1xuXG4vKipcbiAqIFNldCB0aGUgdGVjaCdzIHN0YXR1cyBvbiBtb3ZpbmcgdGhlIHZpZGVvIGVsZW1lbnQuXG4gKiBJbiBpT1MsIGlmIHlvdSBtb3ZlIGEgdmlkZW8gZWxlbWVudCBpbiB0aGUgRE9NLCBpdCBicmVha3MgdmlkZW8gcGxheWJhY2suXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUucHJvdG90eXBlWydtb3ZpbmdNZWRpYUVsZW1lbnRJbkRPTSddID0gIUxpYi5JU19JT1M7XG5cbi8qKlxuICogU2V0IHRoZSB0aGUgdGVjaCdzIGZ1bGxzY3JlZW4gcmVzaXplIHN1cHBvcnQgc3RhdHVzLlxuICogSFRNTCB2aWRlbyBpcyBhYmxlIHRvIGF1dG9tYXRpY2FsbHkgcmVzaXplIHdoZW4gZ29pbmcgdG8gZnVsbHNjcmVlbi5cbiAqIChObyBsb25nZXIgYXBwZWFycyB0byBiZSB1c2VkLiBDYW4gcHJvYmFibHkgYmUgcmVtb3ZlZC4pXG4gKi9cbkh0bWw1LnByb3RvdHlwZVsnZmVhdHVyZXNGdWxsc2NyZWVuUmVzaXplJ10gPSB0cnVlO1xuXG4vKipcbiAqIFNldCB0aGUgdGVjaCdzIHByb2dyZXNzIGV2ZW50IHN1cHBvcnQgc3RhdHVzXG4gKiAodGhpcyBkaXNhYmxlcyB0aGUgbWFudWFsIHByb2dyZXNzIGV2ZW50cyBvZiB0aGUgVGVjaClcbiAqL1xuSHRtbDUucHJvdG90eXBlWydmZWF0dXJlc1Byb2dyZXNzRXZlbnRzJ10gPSB0cnVlO1xuXG4vKipcbiAqIFNldHMgdGhlIHRlY2gncyBzdGF0dXMgb24gbmF0aXZlIHRleHQgdHJhY2sgc3VwcG9ydFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cbkh0bWw1LnByb3RvdHlwZVsnZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10gPSBIdG1sNS5zdXBwb3J0c05hdGl2ZVRleHRUcmFja3MoKTtcblxuLy8gSFRNTDUgRmVhdHVyZSBkZXRlY3Rpb24gYW5kIERldmljZSBGaXhlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbmxldCBjYW5QbGF5VHlwZTtcbmNvbnN0IG1wZWd1cmxSRSA9IC9eYXBwbGljYXRpb25cXC8oPzp4LXx2bmRcXC5hcHBsZVxcLiltcGVndXJsL2k7XG5jb25zdCBtcDRSRSA9IC9edmlkZW9cXC9tcDQvaTtcblxuSHRtbDUucGF0Y2hDYW5QbGF5VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBBbmRyb2lkIDQuMCBhbmQgYWJvdmUgY2FuIHBsYXkgSExTIHRvIHNvbWUgZXh0ZW50IGJ1dCBpdCByZXBvcnRzIGJlaW5nIHVuYWJsZSB0byBkbyBzb1xuICBpZiAoTGliLkFORFJPSURfVkVSU0lPTiA+PSA0LjApIHtcbiAgICBpZiAoIWNhblBsYXlUeXBlKSB7XG4gICAgICBjYW5QbGF5VHlwZSA9IExpYi5URVNUX1ZJRC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2FuUGxheVR5cGU7XG4gICAgfVxuXG4gICAgTGliLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGlmICh0eXBlICYmIG1wZWd1cmxSRS50ZXN0KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiAnbWF5YmUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhblBsYXlUeXBlLmNhbGwodGhpcywgdHlwZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRlIEFuZHJvaWQgMi4yIGFuZCBsZXNzIGNhblBsYXlUeXBlIG1ldGhvZCB3aGljaCBpcyBicm9rZW5cbiAgaWYgKExpYi5JU19PTERfQU5EUk9JRCkge1xuICAgIGlmICghY2FuUGxheVR5cGUpIHtcbiAgICAgIGNhblBsYXlUeXBlID0gTGliLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtcbiAgICB9XG5cbiAgICBMaWIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlID0gZnVuY3Rpb24odHlwZSl7XG4gICAgICBpZiAodHlwZSAmJiBtcDRSRS50ZXN0KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiAnbWF5YmUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhblBsYXlUeXBlLmNhbGwodGhpcywgdHlwZSk7XG4gICAgfTtcbiAgfVxufTtcblxuSHRtbDUudW5wYXRjaENhblBsYXlUeXBlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByID0gTGliLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtcbiAgTGliLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZSA9IGNhblBsYXlUeXBlO1xuICBjYW5QbGF5VHlwZSA9IG51bGw7XG4gIHJldHVybiByO1xufTtcblxuLy8gYnkgZGVmYXVsdCwgcGF0Y2ggdGhlIHZpZGVvIGVsZW1lbnRcbkh0bWw1LnBhdGNoQ2FuUGxheVR5cGUoKTtcblxuSHRtbDUuZGlzcG9zZU1lZGlhRWxlbWVudCA9IGZ1bmN0aW9uKGVsKXtcbiAgaWYgKCFlbCkgeyByZXR1cm47IH1cblxuICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9XG5cbiAgLy8gcmVtb3ZlIGFueSBjaGlsZCB0cmFjayBvciBzb3VyY2Ugbm9kZXMgdG8gcHJldmVudCB0aGVpciBsb2FkaW5nXG4gIHdoaWxlKGVsLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgLy8gcmVtb3ZlIGFueSBzcmMgcmVmZXJlbmNlLiBub3Qgc2V0dGluZyBgc3JjPScnYCBiZWNhdXNlIHRoYXQgY2F1c2VzIGEgd2FybmluZ1xuICAvLyBpbiBmaXJlZm94XG4gIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG5cbiAgLy8gZm9yY2UgdGhlIG1lZGlhIGVsZW1lbnQgdG8gdXBkYXRlIGl0cyBsb2FkaW5nIHN0YXRlIGJ5IGNhbGxpbmcgbG9hZCgpXG4gIC8vIGhvd2V2ZXIgSUUgb24gV2luZG93cyA3TiBoYXMgYSBidWcgdGhhdCB0aHJvd3MgYW4gZXJyb3Igc28gbmVlZCBhIHRyeS9jYXRjaCAoIzc5MylcbiAgaWYgKHR5cGVvZiBlbC5sb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gd3JhcHBpbmcgaW4gYW4gaWlmZSBzbyBpdCdzIG5vdCBkZW9wdGltaXplZCAoIzEwNjAjZGlzY3Vzc2lvbl9yMTAzMjQ0NzMpXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZWwubG9hZCgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkXG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxufTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdIdG1sNScsIEh0bWw1KTtcbmV4cG9ydCBkZWZhdWx0IEh0bWw1O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG4vKipcbiAqIFRoZSBNZWRpYSBMb2FkZXIgaXMgdGhlIGNvbXBvbmVudCB0aGF0IGRlY2lkZXMgd2hpY2ggcGxheWJhY2sgdGVjaG5vbG9neSB0byBsb2FkXG4gKiB3aGVuIHRoZSBwbGF5ZXIgaXMgaW5pdGlhbGl6ZWQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIE1lZGlhTG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KTtcblxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBzb3VyY2VzIHdoZW4gdGhlIHBsYXllciBpcyBpbml0aWFsaXplZCxcbiAgICAvLyBsb2FkIHRoZSBmaXJzdCBzdXBwb3J0ZWQgcGxheWJhY2sgdGVjaG5vbG9neS5cbiAgICBpZiAoIXBsYXllci5vcHRpb25zX1snc291cmNlcyddIHx8IHBsYXllci5vcHRpb25zX1snc291cmNlcyddLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZm9yIChsZXQgaT0wLCBqPXBsYXllci5vcHRpb25zX1sndGVjaE9yZGVyJ107IGk8ai5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGVjaE5hbWUgPSBMaWIuY2FwaXRhbGl6ZShqW2ldKTtcbiAgICAgICAgbGV0IHRlY2ggPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KHRlY2hOYW1lKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGlzIHRlY2hub2xvZ3lcbiAgICAgICAgaWYgKHRlY2ggJiYgdGVjaC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgcGxheWVyLmxvYWRUZWNoKHRlY2hOYW1lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyAvLyBMb29wIHRocm91Z2ggcGxheWJhY2sgdGVjaG5vbG9naWVzIChIVE1MNSwgRmxhc2gpIGFuZCBjaGVjayBmb3Igc3VwcG9ydC5cbiAgICAgIC8vIC8vIFRoZW4gbG9hZCB0aGUgYmVzdCBzb3VyY2UuXG4gICAgICAvLyAvLyBBIGZldyBhc3N1bXB0aW9ucyBoZXJlOlxuICAgICAgLy8gLy8gICBBbGwgcGxheWJhY2sgdGVjaG5vbG9naWVzIHJlc3BlY3QgcHJlbG9hZCBmYWxzZS5cbiAgICAgIHBsYXllci5zcmMocGxheWVyLm9wdGlvbnNfWydzb3VyY2VzJ10pO1xuICAgIH1cbiAgfVxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01lZGlhTG9hZGVyJywgTWVkaWFMb2FkZXIpO1xuZXhwb3J0IGRlZmF1bHQgTWVkaWFMb2FkZXI7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWVkaWEgVGVjaG5vbG9neSBDb250cm9sbGVyIC0gQmFzZSBjbGFzcyBmb3IgbWVkaWEgcGxheWJhY2tcbiAqIHRlY2hub2xvZ3kgY29udHJvbGxlcnMgbGlrZSBGbGFzaCBhbmQgSFRNTDVcbiAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgVGV4dFRyYWNrIGZyb20gJy4uL3RyYWNrcy90ZXh0LXRyYWNrJztcbmltcG9ydCBUZXh0VHJhY2tMaXN0IGZyb20gJy4uL3RyYWNrcy90ZXh0LXRyYWNrLWxpc3QnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbWVkaWEgKEhUTUw1IFZpZGVvLCBGbGFzaCkgY29udHJvbGxlcnNcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyICBDZW50cmFsIHBsYXllciBpbnN0YW5jZVxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgVGVjaCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz17fSwgcmVhZHk9ZnVuY3Rpb24oKXt9KXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSB0ZWNoIHRvIHJlcG9ydCB1c2VyIGFjdGl2aXR5IGF1dG9tYXRpY2FsbHkuXG4gICAgLy8gVGhpcyBpcyBkb25lIG1hbnVhbGx5IGluIGFkZENvbnRyb2xzTGlzdGVuZXJzXG4gICAgb3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ID0gZmFsc2U7XG4gICAgc3VwZXIobnVsbCwgb3B0aW9ucywgcmVhZHkpO1xuXG4gICAgdGhpcy50ZXh0VHJhY2tzXyA9IG9wdGlvbnMudGV4dFRyYWNrcztcblxuICAgIC8vIE1hbnVhbGx5IHRyYWNrIHByb2dyZXNzIGluIGNhc2VzIHdoZXJlIHRoZSBicm93c2VyL2ZsYXNoIHBsYXllciBkb2Vzbid0IHJlcG9ydCBpdC5cbiAgICBpZiAoIXRoaXMuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cykge1xuICAgICAgdGhpcy5tYW51YWxQcm9ncmVzc09uKCk7XG4gICAgfVxuXG4gICAgLy8gTWFudWFsbHkgdHJhY2sgdGltZXVwZGF0ZXMgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIvZmxhc2ggcGxheWVyIGRvZXNuJ3QgcmVwb3J0IGl0LlxuICAgIGlmICghdGhpcy5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMpIHtcbiAgICAgIHRoaXMubWFudWFsVGltZVVwZGF0ZXNPbigpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdENvbnRyb2xzTGlzdGVuZXJzKCk7XG5cbiAgICBpZiAob3B0aW9ucy5uYXRpdmVDYXB0aW9ucyA9PT0gZmFsc2UgfHwgb3B0aW9ucy5uYXRpdmVUZXh0VHJhY2tzID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICB0aGlzLmVtdWxhdGVUZXh0VHJhY2tzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0VGV4dFRyYWNrTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVwIGNsaWNrIGFuZCB0b3VjaCBsaXN0ZW5lcnMgZm9yIHRoZSBwbGF5YmFjayBlbGVtZW50XG4gICAqIE9uIGRlc2t0b3BzLCBhIGNsaWNrIG9uIHRoZSB2aWRlbyBpdHNlbGYgd2lsbCB0b2dnbGUgcGxheWJhY2ssXG4gICAqIG9uIGEgbW9iaWxlIGRldmljZSBhIGNsaWNrIG9uIHRoZSB2aWRlbyB0b2dnbGVzIGNvbnRyb2xzLlxuICAgKiAodG9nZ2xpbmcgY29udHJvbHMgaXMgZG9uZSBieSB0b2dnbGluZyB0aGUgdXNlciBzdGF0ZSBiZXR3ZWVuIGFjdGl2ZSBhbmRcbiAgICogaW5hY3RpdmUpXG4gICAqXG4gICAqIEEgdGFwIGNhbiBzaWduYWwgdGhhdCBhIHVzZXIgaGFzIGJlY29tZSBhY3RpdmUsIG9yIGhhcyBiZWNvbWUgaW5hY3RpdmVcbiAgICogZS5nLiBhIHF1aWNrIHRhcCBvbiBhbiBpUGhvbmUgbW92aWUgc2hvdWxkIHJldmVhbCB0aGUgY29udHJvbHMuIEFub3RoZXJcbiAgICogcXVpY2sgdGFwIHNob3VsZCBoaWRlIHRoZW0gYWdhaW4gKHNpZ25hbGluZyB0aGUgdXNlciBpcyBpbiBhbiBpbmFjdGl2ZVxuICAgKiB2aWV3aW5nIHN0YXRlKVxuICAgKlxuICAgKiBJbiBhZGRpdGlvbiB0byB0aGlzLCB3ZSBzdGlsbCB3YW50IHRoZSB1c2VyIHRvIGJlIGNvbnNpZGVyZWQgaW5hY3RpdmUgYWZ0ZXJcbiAgICogYSBmZXcgc2Vjb25kcyBvZiBpbmFjdGl2aXR5LlxuICAgKlxuICAgKiBOb3RlOiB0aGUgb25seSBwYXJ0IG9mIGlPUyBpbnRlcmFjdGlvbiB3ZSBjYW4ndCBtaW1pYyB3aXRoIHRoaXMgc2V0dXBcbiAgICogaXMgYSB0b3VjaCBhbmQgaG9sZCBvbiB0aGUgdmlkZW8gZWxlbWVudCBjb3VudGluZyBhcyBhY3Rpdml0eSBpbiBvcmRlciB0b1xuICAgKiBrZWVwIHRoZSBjb250cm9scyBzaG93aW5nLCBidXQgdGhhdCBzaG91bGRuJ3QgYmUgYW4gaXNzdWUuIEEgdG91Y2ggYW5kIGhvbGQgb25cbiAgICogYW55IGNvbnRyb2xzIHdpbGwgc3RpbGwga2VlcCB0aGUgdXNlciBhY3RpdmVcbiAgICovXG4gIGluaXRDb250cm9sc0xpc3RlbmVycygpIHtcbiAgICAvLyBpZiB3ZSdyZSBsb2FkaW5nIHRoZSBwbGF5YmFjayBvYmplY3QgYWZ0ZXIgaXQgaGFzIHN0YXJ0ZWQgbG9hZGluZyBvciBwbGF5aW5nIHRoZVxuICAgIC8vIHZpZGVvIChvZnRlbiB3aXRoIGF1dG9wbGF5IG9uKSB0aGVuIHRoZSBsb2Fkc3RhcnQgZXZlbnQgaGFzIGFscmVhZHkgZmlyZWQgYW5kIHdlXG4gICAgLy8gbmVlZCB0byBmaXJlIGl0IG1hbnVhbGx5IGJlY2F1c2UgbWFueSB0aGluZ3MgcmVseSBvbiBpdC5cbiAgICAvLyBMb25nIHRlcm0gd2UgbWlnaHQgY29uc2lkZXIgaG93IHdlIHdvdWxkIGRvIHRoaXMgZm9yIG90aGVyIGV2ZW50cyBsaWtlICdjYW5wbGF5J1xuICAgIC8vIHRoYXQgbWF5IGFsc28gaGF2ZSBmaXJlZC5cbiAgICB0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7XG4gICAgICBpZiAodGhpcy5uZXR3b3JrU3RhdGUgJiYgdGhpcy5uZXR3b3JrU3RhdGUoKSA+IDApIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdsb2Fkc3RhcnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIEZhbGxiYWNrcyBmb3IgdW5zdXBwb3J0ZWQgZXZlbnQgdHlwZXNcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgLy8gTWFudWFsbHkgdHJpZ2dlciBwcm9ncmVzcyBldmVudHMgYmFzZWQgb24gY2hhbmdlcyB0byB0aGUgYnVmZmVyZWQgYW1vdW50XG4gIC8vIE1hbnkgZmxhc2ggcGxheWVycyBhbmQgb2xkZXIgSFRNTDUgYnJvd3NlcnMgZG9uJ3Qgc2VuZCBwcm9ncmVzcyBvciBwcm9ncmVzcy1saWtlIGV2ZW50c1xuICBtYW51YWxQcm9ncmVzc09uKCkge1xuICAgIHRoaXMub24oJ2R1cmF0aW9uY2hhbmdlJywgdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKTtcblxuICAgIHRoaXMubWFudWFsUHJvZ3Jlc3MgPSB0cnVlO1xuXG4gICAgLy8gVHJpZ2dlciBwcm9ncmVzcyB3YXRjaGluZyB3aGVuIGEgc291cmNlIGJlZ2lucyBsb2FkaW5nXG4gICAgdGhpcy50cmFja1Byb2dyZXNzKCk7XG4gIH1cblxuICBtYW51YWxQcm9ncmVzc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpO1xuXG4gICAgdGhpcy5vZmYoJ2R1cmF0aW9uY2hhbmdlJywgdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKTtcbiAgfVxuXG4gIHRyYWNrUHJvZ3Jlc3MoKSB7XG4gICAgdGhpcy5wcm9ncmVzc0ludGVydmFsID0gdGhpcy5zZXRJbnRlcnZhbChMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpe1xuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciB1bmxlc3MgYnVmZmVyZWQgYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiBsYXN0IHRpbWVcblxuICAgICAgbGV0IGJ1ZmZlcmVkUGVyY2VudCA9IHRoaXMuYnVmZmVyZWRQZXJjZW50KCk7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkUGVyY2VudF8gIT09IGJ1ZmZlcmVkUGVyY2VudCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Byb2dyZXNzJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyZWRQZXJjZW50XyA9IGJ1ZmZlcmVkUGVyY2VudDtcblxuICAgICAgaWYgKGJ1ZmZlcmVkUGVyY2VudCA9PT0gMSkge1xuICAgICAgICB0aGlzLnN0b3BUcmFja2luZ1Byb2dyZXNzKCk7XG4gICAgICB9XG4gICAgfSksIDUwMCk7XG4gIH1cblxuICBvbkR1cmF0aW9uQ2hhbmdlKCkge1xuICAgIHRoaXMuZHVyYXRpb25fID0gdGhpcy5kdXJhdGlvbigpO1xuICB9XG5cbiAgYnVmZmVyZWRQZXJjZW50KCkge1xuICAgIGxldCBidWZmZXJlZER1cmF0aW9uID0gMCxcbiAgICAgICAgc3RhcnQsIGVuZDtcblxuICAgIGlmICghdGhpcy5kdXJhdGlvbl8pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBidWZmZXJlZCA9IHRoaXMuYnVmZmVyZWQoKTtcblxuICAgIGlmICghYnVmZmVyZWQgfHwgIWJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgYnVmZmVyZWQgPSBMaWIuY3JlYXRlVGltZVJhbmdlKDAsMCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaT0wOyBpPGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKXtcbiAgICAgIHN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgICBlbmQgICA9IGJ1ZmZlcmVkLmVuZChpKTtcblxuICAgICAgLy8gYnVmZmVyZWQgZW5kIGNhbiBiZSBiaWdnZXIgdGhhbiBkdXJhdGlvbiBieSBhIHZlcnkgc21hbGwgZnJhY3Rpb25cbiAgICAgIGlmIChlbmQgPiB0aGlzLmR1cmF0aW9uXykge1xuICAgICAgICBlbmQgPSB0aGlzLmR1cmF0aW9uXztcbiAgICAgIH1cblxuICAgICAgYnVmZmVyZWREdXJhdGlvbiArPSBlbmQgLSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyZWREdXJhdGlvbiAvIHRoaXMuZHVyYXRpb25fO1xuICB9XG5cbiAgc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKSB7XG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMucHJvZ3Jlc3NJbnRlcnZhbCk7XG4gIH1cblxuICAvKiEgVGltZSBUcmFja2luZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICBtYW51YWxUaW1lVXBkYXRlc09uKCkge1xuICAgIHRoaXMubWFudWFsVGltZVVwZGF0ZXMgPSB0cnVlO1xuXG4gICAgdGhpcy5vbigncGxheScsIHRoaXMudHJhY2tDdXJyZW50VGltZSk7XG4gICAgdGhpcy5vbigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgICAvLyB0aW1ldXBkYXRlIGlzIGFsc28gY2FsbGVkIGJ5IC5jdXJyZW50VGltZSB3aGVuZXZlciBjdXJyZW50IHRpbWUgaXMgc2V0XG5cbiAgICAvLyBXYXRjaCBmb3IgbmF0aXZlIHRpbWV1cGRhdGUgZXZlbnQgb25seVxuICAgIHZhciBvblRpbWVVcGRhdGUgPSBmdW5jdGlvbihlKXtcbiAgICAgIGlmIChlLm1hbnVhbGx5VHJpZ2dlcmVkKSByZXR1cm47XG5cbiAgICAgIHRoaXMub2ZmKCd0aW1ldXBkYXRlJywgb25UaW1lVXBkYXRlKTtcblxuICAgICAgLy8gVXBkYXRlIGtub3duIHByb2dyZXNzIHN1cHBvcnQgZm9yIHRoaXMgcGxheWJhY2sgdGVjaG5vbG9neVxuICAgICAgdGhpcy5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMgPSB0cnVlO1xuICAgICAgLy8gVHVybiBvZmYgbWFudWFsIHByb2dyZXNzIHRyYWNraW5nXG4gICAgICB0aGlzLm1hbnVhbFRpbWVVcGRhdGVzT2ZmKCk7XG4gICAgfTtcblxuICAgIHRoaXMub24oJ3RpbWV1cGRhdGUnLCBvblRpbWVVcGRhdGUpO1xuICB9XG5cbiAgbWFudWFsVGltZVVwZGF0ZXNPZmYoKSB7XG4gICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlcyA9IGZhbHNlO1xuICAgIHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKTtcbiAgICB0aGlzLm9mZigncGxheScsIHRoaXMudHJhY2tDdXJyZW50VGltZSk7XG4gICAgdGhpcy5vZmYoJ3BhdXNlJywgdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSk7XG4gIH1cblxuICB0cmFja0N1cnJlbnRUaW1lKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwpIHsgdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpOyB9XG4gICAgdGhpcy5jdXJyZW50VGltZUludGVydmFsID0gdGhpcy5zZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgdGhpcy50cmlnZ2VyKHsgdHlwZTogJ3RpbWV1cGRhdGUnLCB0YXJnZXQ6IHRoaXMsIG1hbnVhbGx5VHJpZ2dlcmVkOiB0cnVlIH0pO1xuICAgIH0sIDI1MCk7IC8vIDQyID0gMjQgZnBzIC8vIDI1MCBpcyB3aGF0IFdlYmtpdCB1c2VzIC8vIEZGIHVzZXMgMTVcbiAgfVxuXG4gIC8vIFR1cm4gb2ZmIHBsYXkgcHJvZ3Jlc3MgdHJhY2tpbmcgKHdoZW4gcGF1c2VkIG9yIGRyYWdnaW5nKVxuICBzdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpIHtcbiAgICB0aGlzLmNsZWFySW50ZXJ2YWwodGhpcy5jdXJyZW50VGltZUludGVydmFsKTtcblxuICAgIC8vICMxMDAyIC0gaWYgdGhlIHZpZGVvIGVuZHMgcmlnaHQgYmVmb3JlIHRoZSBuZXh0IHRpbWV1cGRhdGUgd291bGQgaGFwcGVuLFxuICAgIC8vIHRoZSBwcm9ncmVzcyBiYXIgd29uJ3QgbWFrZSBpdCBhbGwgdGhlIHdheSB0byB0aGUgZW5kXG4gICAgdGhpcy50cmlnZ2VyKHsgdHlwZTogJ3RpbWV1cGRhdGUnLCB0YXJnZXQ6IHRoaXMsIG1hbnVhbGx5VHJpZ2dlcmVkOiB0cnVlIH0pO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAvLyBUdXJuIG9mZiBhbnkgbWFudWFsIHByb2dyZXNzIG9yIHRpbWV1cGRhdGUgdHJhY2tpbmdcbiAgICBpZiAodGhpcy5tYW51YWxQcm9ncmVzcykgeyB0aGlzLm1hbnVhbFByb2dyZXNzT2ZmKCk7IH1cblxuICAgIGlmICh0aGlzLm1hbnVhbFRpbWVVcGRhdGVzKSB7IHRoaXMubWFudWFsVGltZVVwZGF0ZXNPZmYoKTsgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgc2V0Q3VycmVudFRpbWUoKSB7XG4gICAgLy8gaW1wcm92ZSB0aGUgYWNjdXJhY3kgb2YgbWFudWFsIHRpbWV1cGRhdGVzXG4gICAgaWYgKHRoaXMubWFudWFsVGltZVVwZGF0ZXMpIHsgdGhpcy50cmlnZ2VyKHsgdHlwZTogJ3RpbWV1cGRhdGUnLCB0YXJnZXQ6IHRoaXMsIG1hbnVhbGx5VHJpZ2dlcmVkOiB0cnVlIH0pOyB9XG4gIH1cblxuICBpbml0VGV4dFRyYWNrTGlzdGVuZXJzKCkge1xuICAgIGxldCB0ZXh0VHJhY2tMaXN0Q2hhbmdlcyA9IExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCd0ZXh0dHJhY2tjaGFuZ2UnKTtcbiAgICB9KTtcblxuICAgIGxldCB0cmFja3MgPSB0aGlzLnRleHRUcmFja3MoKTtcblxuICAgIGlmICghdHJhY2tzKSByZXR1cm47XG5cbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB0ZXh0VHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGV4dFRyYWNrTGlzdENoYW5nZXMpO1xuXG4gICAgdGhpcy5vbignZGlzcG9zZScsIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JlbW92ZXRyYWNrJywgdGV4dFRyYWNrTGlzdENoYW5nZXMpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGV4dFRyYWNrTGlzdENoYW5nZXMpO1xuICAgIH0pKTtcbiAgfVxuXG4gIGVtdWxhdGVUZXh0VHJhY2tzKCkge1xuICAgIGlmICghd2luZG93WydXZWJWVFQnXSAmJiB0aGlzLmVsKCkucGFyZW50Tm9kZSAhPSBudWxsKSB7XG4gICAgICBsZXQgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuc3JjID0gdGhpcy5vcHRpb25zX1sndnR0LmpzJ10gfHwgJy4uL25vZGVfbW9kdWxlcy92dHQuanMvZGlzdC92dHQuanMnO1xuICAgICAgdGhpcy5lbCgpLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHdpbmRvd1snV2ViVlRUJ10gPSB0cnVlO1xuICAgIH1cblxuICAgIGxldCB0cmFja3MgPSB0aGlzLnRleHRUcmFja3MoKTtcbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB0ZXh0VHJhY2tzQ2hhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVwZGF0ZURpc3BsYXkgPSBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0ZXh0dHJhY2tjaGFuZ2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3RleHR0cmFja2NoYW5nZScpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHRyYWNrID0gdGhpc1tpXTtcbiAgICAgICAgdHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3VlY2hhbmdlJywgdXBkYXRlRGlzcGxheSk7XG4gICAgICAgIGlmICh0cmFjay5tb2RlID09PSAnc2hvd2luZycpIHtcbiAgICAgICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdjdWVjaGFuZ2UnLCB1cGRhdGVEaXNwbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuXG4gICAgdGhpcy5vbignZGlzcG9zZScsIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRleHRUcmFja3NDaGFuZ2VzKTtcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBkZWZhdWx0IG1ldGhvZHMgZm9yIHRleHQgdHJhY2tzLlxuICAgKlxuICAgKiBIdG1sNSB0ZWNoIG92ZXJyaWRlcyB0aGVzZS5cbiAgICovXG5cbiAgdGV4dFRyYWNrcygpIHtcbiAgICB0aGlzLnRleHRUcmFja3NfID0gdGhpcy50ZXh0VHJhY2tzXyB8fCBuZXcgVGV4dFRyYWNrTGlzdCgpO1xuICAgIHJldHVybiB0aGlzLnRleHRUcmFja3NfO1xuICB9XG5cbiAgcmVtb3RlVGV4dFRyYWNrcygpIHtcbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja3NfID0gdGhpcy5yZW1vdGVUZXh0VHJhY2tzXyB8fCBuZXcgVGV4dFRyYWNrTGlzdCgpO1xuICAgIHJldHVybiB0aGlzLnJlbW90ZVRleHRUcmFja3NfO1xuICB9XG5cbiAgYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICgha2luZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0VHJhY2sga2luZCBpcyByZXF1aXJlZCBidXQgd2FzIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVUcmFja0hlbHBlcih0aGlzLCBraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpO1xuICB9XG5cbiAgYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMpIHtcbiAgICBsZXQgdHJhY2sgPSBjcmVhdGVUcmFja0hlbHBlcih0aGlzLCBvcHRpb25zLmtpbmQsIG9wdGlvbnMubGFiZWwsIG9wdGlvbnMubGFuZ3VhZ2UsIG9wdGlvbnMpO1xuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLmFkZFRyYWNrXyh0cmFjayk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYWNrOiB0cmFja1xuICAgIH07XG4gIH1cblxuICByZW1vdmVSZW1vdGVUZXh0VHJhY2sodHJhY2spIHtcbiAgICB0aGlzLnRleHRUcmFja3MoKS5yZW1vdmVUcmFja18odHJhY2spO1xuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLnJlbW92ZVRyYWNrXyh0cmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBhIGRlZmF1bHQgc2V0UG9zdGVyIG1ldGhvZCBmb3IgdGVjaHNcbiAgICpcbiAgICogUG9zdGVyIHN1cHBvcnQgZm9yIHRlY2hzIHNob3VsZCBiZSBvcHRpb25hbCwgc28gd2UgZG9uJ3Qgd2FudCB0ZWNocyB0b1xuICAgKiBicmVhayBpZiB0aGV5IGRvbid0IGhhdmUgYSB3YXkgdG8gc2V0IGEgcG9zdGVyLlxuICAgKi9cbiAgc2V0UG9zdGVyKCkge31cblxufVxuXG4vKipcbiAqIExpc3Qgb2YgYXNzb2NpYXRlZCB0ZXh0IHRyYWNrc1xuICogQHR5cGUge0FycmF5fVxuICogQHByaXZhdGVcbiAqL1xuVGVjaC5wcm90b3R5cGUudGV4dFRyYWNrc187XG5cbnZhciBjcmVhdGVUcmFja0hlbHBlciA9IGZ1bmN0aW9uKHNlbGYsIGtpbmQsIGxhYmVsLCBsYW5ndWFnZSwgb3B0aW9ucz17fSkge1xuICBsZXQgdHJhY2tzID0gc2VsZi50ZXh0VHJhY2tzKCk7XG5cbiAgb3B0aW9ucy5raW5kID0ga2luZDtcblxuICBpZiAobGFiZWwpIHtcbiAgICBvcHRpb25zLmxhYmVsID0gbGFiZWw7XG4gIH1cbiAgaWYgKGxhbmd1YWdlKSB7XG4gICAgb3B0aW9ucy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICB9XG4gIG9wdGlvbnMudGVjaCA9IHNlbGY7XG5cbiAgbGV0IHRyYWNrID0gbmV3IFRleHRUcmFjayhvcHRpb25zKTtcbiAgdHJhY2tzLmFkZFRyYWNrXyh0cmFjayk7XG5cbiAgcmV0dXJuIHRyYWNrO1xufTtcblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sID0gdHJ1ZTtcblxuLy8gUmVzaXppbmcgcGx1Z2lucyB1c2luZyByZXF1ZXN0IGZ1bGxzY3JlZW4gcmVsb2FkcyB0aGUgcGx1Z2luXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc0Z1bGxzY3JlZW5SZXNpemUgPSBmYWxzZTtcblRlY2gucHJvdG90eXBlLmZlYXR1cmVzUGxheWJhY2tSYXRlID0gZmFsc2U7XG5cbi8vIE9wdGlvbmFsIGV2ZW50cyB0aGF0IHdlIGNhbiBtYW51YWxseSBtaW1pYyB3aXRoIHRpbWVyc1xuLy8gY3VycmVudGx5IG5vdCB0cmlnZ2VyZWQgYnkgdmlkZW8tanMtc3dmXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzID0gZmFsc2U7XG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMgPSBmYWxzZTtcblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzID0gZmFsc2U7XG5cbi8qKlxuICogQSBmdW5jdGlvbmFsIG1peGluIGZvciB0ZWNocyB0aGF0IHdhbnQgdG8gdXNlIHRoZSBTb3VyY2UgSGFuZGxlciBwYXR0ZXJuLlxuICpcbiAqICMjIyMjIEVYQU1QTEU6XG4gKlxuICogICBUZWNoLndpdGhTb3VyY2VIYW5kbGVycy5jYWxsKE15VGVjaCk7XG4gKlxuICovXG5UZWNoLndpdGhTb3VyY2VIYW5kbGVycyA9IGZ1bmN0aW9uKF9UZWNoKXtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgc291cmNlIGhhbmRsZXJcbiAgICogU291cmNlIGhhbmRsZXJzIGFyZSBzY3JpcHRzIGZvciBoYW5kbGluZyBzcGVjaWZpYyBmb3JtYXRzLlxuICAgKiBUaGUgc291cmNlIGhhbmRsZXIgcGF0dGVybiBpcyB1c2VkIGZvciBhZGFwdGl2ZSBmb3JtYXRzIChITFMsIERBU0gpIHRoYXRcbiAgICogbWFudWFsbHkgbG9hZCB2aWRlbyBkYXRhIGFuZCBmZWVkIGl0IGludG8gYSBTb3VyY2UgQnVmZmVyIChNZWRpYSBTb3VyY2UgRXh0ZW5zaW9ucylcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgIFRoZSBzb3VyY2UgaGFuZGxlclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSAgZmlyc3QgICAgUmVnaXN0ZXIgaXQgYmVmb3JlIGFueSBleGlzdGluZyBoYW5kbGVyc1xuICAgKi9cbiAgIF9UZWNoLnJlZ2lzdGVyU291cmNlSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIsIGluZGV4KXtcbiAgICBsZXQgaGFuZGxlcnMgPSBfVGVjaC5zb3VyY2VIYW5kbGVycztcblxuICAgIGlmICghaGFuZGxlcnMpIHtcbiAgICAgIGhhbmRsZXJzID0gX1RlY2guc291cmNlSGFuZGxlcnMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gYWRkIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICAgIGluZGV4ID0gaGFuZGxlcnMubGVuZ3RoO1xuICAgIH1cblxuICAgIGhhbmRsZXJzLnNwbGljZShpbmRleCwgMCwgaGFuZGxlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZmlyc3Qgc291cmNlIGhhbmRsZXIgdGhhdCBzdXBwb3J0cyB0aGUgc291cmNlXG4gICAqIFRPRE86IEFuc3dlciBxdWVzdGlvbjogc2hvdWxkICdwcm9iYWJseScgYmUgcHJpb3JpdGl6ZWQgb3ZlciAnbWF5YmUnXG4gICAqIEBwYXJhbSAge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgIFRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2VcbiAgICogQHJldHVybnMge251bGx9ICAgICAgICAgTnVsbCBpZiBubyBzb3VyY2UgaGFuZGxlciBpcyBmb3VuZFxuICAgKi9cbiAgIF9UZWNoLnNlbGVjdFNvdXJjZUhhbmRsZXIgPSBmdW5jdGlvbihzb3VyY2Upe1xuICAgIGxldCBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzIHx8IFtdO1xuICAgIGxldCBjYW47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYW4gPSBoYW5kbGVyc1tpXS5jYW5IYW5kbGVTb3VyY2Uoc291cmNlKTtcblxuICAgICAgaWYgKGNhbikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcnNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHNvdXJjZVxuICAqIEBwYXJhbSAge09iamVjdH0gc3JjT2JqICBUaGUgc291cmNlIG9iamVjdFxuICAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICAqL1xuICBfVGVjaC5jYW5QbGF5U291cmNlID0gZnVuY3Rpb24oc3JjT2JqKXtcbiAgICBsZXQgc2ggPSBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyKHNyY09iaik7XG5cbiAgICBpZiAoc2gpIHtcbiAgICAgIHJldHVybiBzaC5jYW5IYW5kbGVTb3VyY2Uoc3JjT2JqKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZ1bmN0aW9uIGZvciBzZXR0aW5nIHRoZSBzb3VyY2UgdXNpbmcgYSBzb3VyY2Ugb2JqZWN0XG4gICAqIGFuZCBzb3VyY2UgaGFuZGxlcnMuXG4gICAqIFNob3VsZCBuZXZlciBiZSBjYWxsZWQgdW5sZXNzIGEgc291cmNlIGhhbmRsZXIgd2FzIGZvdW5kLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlICBBIHNvdXJjZSBvYmplY3Qgd2l0aCBzcmMgYW5kIHR5cGUga2V5c1xuICAgKiBAcmV0dXJuIHtUZWNofSBzZWxmXG4gICAqL1xuICAgX1RlY2gucHJvdG90eXBlLnNldFNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gICAgbGV0IHNoID0gX1RlY2guc2VsZWN0U291cmNlSGFuZGxlcihzb3VyY2UpO1xuXG4gICAgaWYgKCFzaCkge1xuICAgICAgLy8gRmFsbCBiYWNrIHRvIGEgbmF0aXZlIHNvdXJjZSBoYW5kZXIgd2hlbiB1bnN1cHBvcnRlZCBzb3VyY2VzIGFyZVxuICAgICAgLy8gZGVsaWJlcmF0ZWx5IHNldFxuICAgICAgaWYgKF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIpIHtcbiAgICAgICAgc2ggPSBfVGVjaC5uYXRpdmVTb3VyY2VIYW5kbGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTGliLmxvZy5lcnJvcignTm8gc291cmNlIGhhbmRlciBmb3VuZCBmb3IgdGhlIGN1cnJlbnQgc291cmNlLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERpc3Bvc2UgYW55IGV4aXN0aW5nIHNvdXJjZSBoYW5kbGVyXG4gICAgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcigpO1xuICAgIHRoaXMub2ZmKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG5cbiAgICB0aGlzLmN1cnJlbnRTb3VyY2VfID0gc291cmNlO1xuICAgIHRoaXMuc291cmNlSGFuZGxlcl8gPSBzaC5oYW5kbGVTb3VyY2Uoc291cmNlLCB0aGlzKTtcbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQ2xlYW4gdXAgYW55IGV4aXN0aW5nIHNvdXJjZSBoYW5kbGVyXG4gICAqL1xuICAgX1RlY2gucHJvdG90eXBlLmRpc3Bvc2VTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgICBpZiAodGhpcy5zb3VyY2VIYW5kbGVyXyAmJiB0aGlzLnNvdXJjZUhhbmRsZXJfLmRpc3Bvc2UpIHtcbiAgICAgIHRoaXMuc291cmNlSGFuZGxlcl8uZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcblxufTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZWNoJywgVGVjaCk7XG4vLyBPbGQgbmFtZSBmb3IgVGVjaFxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdNZWRpYVRlY2hDb250cm9sbGVyJywgVGVjaCk7XG5leHBvcnQgZGVmYXVsdCBUZWNoO1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLypcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2tjdWVsaXN0XG4gKlxuICogaW50ZXJmYWNlIFRleHRUcmFja0N1ZUxpc3Qge1xuICogICByZWFkb25seSBhdHRyaWJ1dGUgdW5zaWduZWQgbG9uZyBsZW5ndGg7XG4gKiAgIGdldHRlciBUZXh0VHJhY2tDdWUgKHVuc2lnbmVkIGxvbmcgaW5kZXgpO1xuICogICBUZXh0VHJhY2tDdWU/IGdldEN1ZUJ5SWQoRE9NU3RyaW5nIGlkKTtcbiAqIH07XG4gKi9cblxubGV0IFRleHRUcmFja0N1ZUxpc3QgPSBmdW5jdGlvbihjdWVzKSB7XG4gIGxldCBsaXN0ID0gdGhpcztcblxuICBpZiAoTGliLklTX0lFOCkge1xuICAgIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjdXN0b20nKTtcblxuICAgIGZvciAobGV0IHByb3AgaW4gVGV4dFRyYWNrQ3VlTGlzdC5wcm90b3R5cGUpIHtcbiAgICAgIGxpc3RbcHJvcF0gPSBUZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZVtwcm9wXTtcbiAgICB9XG4gIH1cblxuICBUZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZS5zZXRDdWVzXy5jYWxsKGxpc3QsIGN1ZXMpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsaXN0LCAnbGVuZ3RoJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGhfO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKExpYi5JU19JRTgpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxufTtcblxuVGV4dFRyYWNrQ3VlTGlzdC5wcm90b3R5cGUuc2V0Q3Vlc18gPSBmdW5jdGlvbihjdWVzKSB7XG4gIGxldCBvbGRMZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICBsZXQgaSA9IDA7XG4gIGxldCBsID0gY3Vlcy5sZW5ndGg7XG5cbiAgdGhpcy5jdWVzXyA9IGN1ZXM7XG4gIHRoaXMubGVuZ3RoXyA9IGN1ZXMubGVuZ3RoO1xuXG4gIGxldCBkZWZpbmVQcm9wID0gZnVuY3Rpb24oaSkge1xuICAgIGlmICghKCcnK2kgaW4gdGhpcykpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnJyArIGksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jdWVzX1tpXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChvbGRMZW5ndGggPCBsKSB7XG4gICAgaSA9IG9sZExlbmd0aDtcblxuICAgIGZvcig7IGkgPCBsOyBpKyspIHtcbiAgICAgIGRlZmluZVByb3AuY2FsbCh0aGlzLCBpKTtcbiAgICB9XG4gIH1cbn07XG5cblRleHRUcmFja0N1ZUxpc3QucHJvdG90eXBlLmdldEN1ZUJ5SWQgPSBmdW5jdGlvbihpZCkge1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBjdWUgPSB0aGlzW2ldO1xuICAgIGlmIChjdWUuaWQgPT09IGlkKSB7XG4gICAgICByZXN1bHQgPSBjdWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrQ3VlTGlzdDtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBNZW51IGZyb20gJy4uL21lbnUvbWVudS5qcyc7XG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi4vbWVudS9tZW51LWl0ZW0uanMnO1xuaW1wb3J0IE1lbnVCdXR0b24gZnJvbSAnLi4vbWVudS9tZW51LWJ1dHRvbi5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcblxuY29uc3QgZGFya0dyYXkgPSAnIzIyMic7XG5jb25zdCBsaWdodEdyYXkgPSAnI2NjYyc7XG5jb25zdCBmb250TWFwID0ge1xuICBtb25vc3BhY2U6ICAgICAgICAgICAgICdtb25vc3BhY2UnLFxuICBzYW5zU2VyaWY6ICAgICAgICAgICAgICdzYW5zLXNlcmlmJyxcbiAgc2VyaWY6ICAgICAgICAgICAgICAgICAnc2VyaWYnLFxuICBtb25vc3BhY2VTYW5zU2VyaWY6ICAgICdcIkFuZGFsZSBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgbW9ub3NwYWNlJyxcbiAgbW9ub3NwYWNlU2VyaWY6ICAgICAgICAnXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2UnLFxuICBwcm9wb3J0aW9uYWxTYW5zU2VyaWY6ICdzYW5zLXNlcmlmJyxcbiAgcHJvcG9ydGlvbmFsU2VyaWY6ICAgICAnc2VyaWYnLFxuICBjYXN1YWw6ICAgICAgICAgICAgICAgICdcIkNvbWljIFNhbnMgTVNcIiwgSW1wYWN0LCBmYW50YXN5JyxcbiAgc2NyaXB0OiAgICAgICAgICAgICAgICAnXCJNb25vdHlwZSBDb3JzaXZhXCIsIGN1cnNpdmUnLFxuICBzbWFsbGNhcHM6ICAgICAgICAgICAgICdcIkFuZGFsZSBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgbW9ub3NwYWNlLCBzYW5zLXNlcmlmJ1xufTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IGZvciBkaXNwbGF5aW5nIHRleHQgdHJhY2sgY3Vlc1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUZXh0VHJhY2tEaXNwbGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KTtcblxuICAgIHBsYXllci5vbignbG9hZHN0YXJ0JywgTGliLmJpbmQodGhpcywgdGhpcy50b2dnbGVEaXNwbGF5KSk7XG4gICAgcGxheWVyLm9uKCd0ZXh0dHJhY2tjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnRvZ2dsZURpc3BsYXkpKTtcblxuICAgIC8vIFRoaXMgdXNlZCB0byBiZSBjYWxsZWQgZHVyaW5nIHBsYXllciBpbml0LCBidXQgd2FzIGNhdXNpbmcgYW4gZXJyb3JcbiAgICAvLyBpZiBhIHRyYWNrIHNob3VsZCBzaG93IGJ5IGRlZmF1bHQgYW5kIHRoZSBkaXNwbGF5IGhhZG4ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFNob3VsZCBwcm9iYWJseSBiZSBtb3ZlZCB0byBhbiBleHRlcm5hbCB0cmFjayBsb2FkZXIgd2hlbiB3ZSBzdXBwb3J0XG4gICAgLy8gdHJhY2tzIHRoYXQgZG9uJ3QgbmVlZCBhIGRpc3BsYXkuXG4gICAgcGxheWVyLnJlYWR5KExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHBsYXllci50ZWNoICYmIHBsYXllci50ZWNoWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwbGF5ZXIub24oJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcblxuICAgICAgbGV0IHRyYWNrcyA9IHBsYXllci5vcHRpb25zX1sndHJhY2tzJ10gfHwgW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgIHRoaXMucGxheWVyXy5hZGRSZW1vdGVUZXh0VHJhY2sodHJhY2spO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuXG4gIHRvZ2dsZURpc3BsYXkoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy50ZWNoICYmIHRoaXMucGxheWVyXy50ZWNoWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXRleHQtdHJhY2stZGlzcGxheSdcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyRGlzcGxheSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvd1snV2ViVlRUJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdpbmRvd1snV2ViVlRUJ11bJ3Byb2Nlc3NDdWVzJ10od2luZG93LCBbXSwgdGhpcy5lbF8pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZURpc3BsYXkoKSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG5cbiAgICB0aGlzLmNsZWFyRGlzcGxheSgpO1xuXG4gICAgaWYgKCF0cmFja3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpPTA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGlmICh0cmFja1snbW9kZSddID09PSAnc2hvd2luZycpIHtcbiAgICAgICAgdGhpcy51cGRhdGVGb3JUcmFjayh0cmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRm9yVHJhY2sodHJhY2spIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvd1snV2ViVlRUJ10gIT09ICdmdW5jdGlvbicgfHwgIXRyYWNrWydhY3RpdmVDdWVzJ10pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgb3ZlcnJpZGVzID0gdGhpcy5wbGF5ZXJfWyd0ZXh0VHJhY2tTZXR0aW5ncyddLmdldFZhbHVlcygpO1xuXG4gICAgbGV0IGN1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNrWydhY3RpdmVDdWVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1ZXMucHVzaCh0cmFja1snYWN0aXZlQ3VlcyddW2ldKTtcbiAgICB9XG5cbiAgICB3aW5kb3dbJ1dlYlZUVCddWydwcm9jZXNzQ3VlcyddKHdpbmRvdywgdHJhY2tbJ2FjdGl2ZUN1ZXMnXSwgdGhpcy5lbF8pO1xuXG4gICAgbGV0IGkgPSBjdWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBsZXQgY3VlRGl2ID0gY3Vlc1tpXS5kaXNwbGF5U3RhdGU7XG4gICAgICBpZiAob3ZlcnJpZGVzLmNvbG9yKSB7XG4gICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmNvbG9yID0gb3ZlcnJpZGVzLmNvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJyaWRlcy50ZXh0T3BhY2l0eSkge1xuICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0Q29sb3Iob3ZlcnJpZGVzLmNvbG9yIHx8ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVzLnRleHRPcGFjaXR5KSk7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmJhY2tncm91bmRDb2xvcikge1xuICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvdmVycmlkZXMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJyaWRlcy5iYWNrZ3JvdW5kT3BhY2l0eSkge1xuICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdENvbG9yKG92ZXJyaWRlcy5iYWNrZ3JvdW5kQ29sb3IgfHwgJyMwMDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZXMuYmFja2dyb3VuZE9wYWNpdHkpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvdmVycmlkZXMud2luZG93Q29sb3IpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlcy53aW5kb3dPcGFjaXR5KSB7XG4gICAgICAgICAgdHJ5VXBkYXRlU3R5bGUoY3VlRGl2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdENvbG9yKG92ZXJyaWRlcy53aW5kb3dDb2xvciwgb3ZlcnJpZGVzLndpbmRvd09wYWNpdHkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdWVEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3ZlcnJpZGVzLndpbmRvd0NvbG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSkge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ2Ryb3BzaGFkb3cnKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdyA9IGAycHggMnB4IDNweCAke2RhcmtHcmF5fSwgMnB4IDJweCA0cHggJHtkYXJrR3JheX0sIDJweCAycHggNXB4ICR7ZGFya0dyYXl9YDtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlID09PSAncmFpc2VkJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBgMXB4IDFweCAke2RhcmtHcmF5fSwgMnB4IDJweCAke2RhcmtHcmF5fSwgM3B4IDNweCAke2RhcmtHcmF5fWA7XG4gICAgICAgIH0gZWxzZSBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ2RlcHJlc3NlZCcpIHtcbiAgICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93ID0gYDFweCAxcHggJHtsaWdodEdyYXl9LCAwIDFweCAke2xpZ2h0R3JheX0sIC0xcHggLTFweCAke2RhcmtHcmF5fSwgMCAtMXB4ICR7ZGFya0dyYXl9YDtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlID09PSAndW5pZm9ybScpIHtcbiAgICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93ID0gYDAgMCA0cHggJHtkYXJrR3JheX0sIDAgMCA0cHggJHtkYXJrR3JheX0sIDAgMCA0cHggJHtkYXJrR3JheX0sIDAgMCA0cHggJHtkYXJrR3JheX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmZvbnRQZXJjZW50ICYmIG92ZXJyaWRlcy5mb250UGVyY2VudCAhPT0gMSkge1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IHdpbmRvdy5wYXJzZUZsb2F0KGN1ZURpdi5zdHlsZS5mb250U2l6ZSk7XG4gICAgICAgIGN1ZURpdi5zdHlsZS5mb250U2l6ZSA9IChmb250U2l6ZSAqIG92ZXJyaWRlcy5mb250UGVyY2VudCkgKyAncHgnO1xuICAgICAgICBjdWVEaXYuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICBjdWVEaXYuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgICBjdWVEaXYuc3R5bGUuYm90dG9tID0gJzJweCc7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgJiYgb3ZlcnJpZGVzLmZvbnRGYW1pbHkgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgPT09ICdzbWFsbC1jYXBzJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRWYXJpYW50ID0gJ3NtYWxsLWNhcHMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250TWFwW292ZXJyaWRlcy5mb250RmFtaWx5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbi8vIEFkZCBjdWUgSFRNTCB0byBkaXNwbGF5XG5mdW5jdGlvbiBjb25zdHJ1Y3RDb2xvcihjb2xvciwgb3BhY2l0eSkge1xuICByZXR1cm4gJ3JnYmEoJyArXG4gICAgLy8gY29sb3IgbG9va3MgbGlrZSBcIiNmMGVcIlxuICAgIHBhcnNlSW50KGNvbG9yWzFdICsgY29sb3JbMV0sIDE2KSArICcsJyArXG4gICAgcGFyc2VJbnQoY29sb3JbMl0gKyBjb2xvclsyXSwgMTYpICsgJywnICtcbiAgICBwYXJzZUludChjb2xvclszXSArIGNvbG9yWzNdLCAxNikgKyAnLCcgK1xuICAgIG9wYWNpdHkgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIHRyeVVwZGF0ZVN0eWxlKGVsLCBzdHlsZSwgcnVsZSkge1xuICAvLyBzb21lIHN0eWxlIGNoYW5nZXMgd2lsbCB0aHJvdyBhbiBlcnJvciwgcGFydGljdWxhcmx5IGluIElFOC4gVGhvc2Ugc2hvdWxkIGJlIG5vb3BzLlxuICB0cnkge1xuICAgIGVsLnN0eWxlW3N0eWxlXSA9IHJ1bGU7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGV4dFRyYWNrRGlzcGxheScsIFRleHRUcmFja0Rpc3BsYXkpO1xuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrRGlzcGxheTtcbiIsIi8qXG4gKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrbW9kZVxuICpcbiAqIGVudW0gVGV4dFRyYWNrTW9kZSB7IFwiZGlzYWJsZWRcIiwgIFwiaGlkZGVuXCIsICBcInNob3dpbmdcIiB9O1xuICovXG52YXIgVGV4dFRyYWNrTW9kZSA9IHtcbiAgJ2Rpc2FibGVkJzogJ2Rpc2FibGVkJyxcbiAgJ2hpZGRlbic6ICdoaWRkZW4nLFxuICAnc2hvd2luZyc6ICdzaG93aW5nJ1xufTtcblxuLypcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2traW5kXG4gKlxuICogZW51bSBUZXh0VHJhY2tLaW5kIHsgXCJzdWJ0aXRsZXNcIiwgIFwiY2FwdGlvbnNcIiwgIFwiZGVzY3JpcHRpb25zXCIsICBcImNoYXB0ZXJzXCIsICBcIm1ldGFkYXRhXCIgfTtcbiAqL1xudmFyIFRleHRUcmFja0tpbmQgPSB7XG4gICdzdWJ0aXRsZXMnOiAnc3VidGl0bGVzJyxcbiAgJ2NhcHRpb25zJzogJ2NhcHRpb25zJyxcbiAgJ2Rlc2NyaXB0aW9ucyc6ICdkZXNjcmlwdGlvbnMnLFxuICAnY2hhcHRlcnMnOiAnY2hhcHRlcnMnLFxuICAnbWV0YWRhdGEnOiAnbWV0YWRhdGEnXG59O1xuXG5leHBvcnQgeyBUZXh0VHJhY2tNb2RlLCBUZXh0VHJhY2tLaW5kIH07XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uL2V2ZW50LWVtaXR0ZXInO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLypcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2tsaXN0XG4gKlxuICogaW50ZXJmYWNlIFRleHRUcmFja0xpc3QgOiBFdmVudFRhcmdldCB7XG4gKiAgIHJlYWRvbmx5IGF0dHJpYnV0ZSB1bnNpZ25lZCBsb25nIGxlbmd0aDtcbiAqICAgZ2V0dGVyIFRleHRUcmFjayAodW5zaWduZWQgbG9uZyBpbmRleCk7XG4gKiAgIFRleHRUcmFjaz8gZ2V0VHJhY2tCeUlkKERPTVN0cmluZyBpZCk7XG4gKlxuICogICBhdHRyaWJ1dGUgRXZlbnRIYW5kbGVyIG9uY2hhbmdlO1xuICogICBhdHRyaWJ1dGUgRXZlbnRIYW5kbGVyIG9uYWRkdHJhY2s7XG4gKiAgIGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgb25yZW1vdmV0cmFjaztcbiAqIH07XG4gKi9cbmxldCBUZXh0VHJhY2tMaXN0ID0gZnVuY3Rpb24odHJhY2tzKSB7XG4gIGxldCBsaXN0ID0gdGhpcztcblxuICBpZiAoTGliLklTX0lFOCkge1xuICAgIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjdXN0b20nKTtcblxuICAgIGZvciAobGV0IHByb3AgaW4gVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUpIHtcbiAgICAgIGxpc3RbcHJvcF0gPSBUZXh0VHJhY2tMaXN0LnByb3RvdHlwZVtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB0cmFja3MgPSB0cmFja3MgfHwgW107XG4gIGxpc3QudHJhY2tzXyA9IFtdO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsaXN0LCAnbGVuZ3RoJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3NfLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGlzdC5hZGRUcmFja18odHJhY2tzW2ldKTtcbiAgfVxuXG4gIGlmIChMaWIuSVNfSUU4KSB7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cbn07XG5cblRleHRUcmFja0xpc3QucHJvdG90eXBlID0gTGliLm9iai5jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5UZXh0VHJhY2tMaXN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRUcmFja0xpc3Q7XG5cbi8qXG4gKiBjaGFuZ2UgLSBPbmUgb3IgbW9yZSB0cmFja3MgaW4gdGhlIHRyYWNrIGxpc3QgaGF2ZSBiZWVuIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gKiBhZGR0cmFjayAtIEEgdHJhY2sgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIHRyYWNrIGxpc3QuXG4gKiByZW1vdmV0cmFjayAtIEEgdHJhY2sgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSB0cmFjayBsaXN0LlxuKi9cblRleHRUcmFja0xpc3QucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfID0ge1xuICAnY2hhbmdlJzogJ2NoYW5nZScsXG4gICdhZGR0cmFjayc6ICdhZGR0cmFjaycsXG4gICdyZW1vdmV0cmFjayc6ICdyZW1vdmV0cmFjaydcbn07XG5cbi8vIGVtdWxhdGUgYXR0cmlidXRlIEV2ZW50SGFuZGxlciBzdXBwb3J0IHRvIGFsbG93IGZvciBmZWF0dXJlIGRldGVjdGlvblxuZm9yIChsZXQgZXZlbnQgaW4gVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18pIHtcbiAgVGV4dFRyYWNrTGlzdC5wcm90b3R5cGVbJ29uJyArIGV2ZW50XSA9IG51bGw7XG59XG5cblRleHRUcmFja0xpc3QucHJvdG90eXBlLmFkZFRyYWNrXyA9IGZ1bmN0aW9uKHRyYWNrKSB7XG4gIGxldCBpbmRleCA9IHRoaXMudHJhY2tzXy5sZW5ndGg7XG4gIGlmICghKCcnK2luZGV4IGluIHRoaXMpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGluZGV4LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3NfW2luZGV4XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScpO1xuICB9KSk7XG4gIHRoaXMudHJhY2tzXy5wdXNoKHRyYWNrKTtcblxuICB0aGlzLnRyaWdnZXIoe1xuICAgIHR5cGU6ICdhZGR0cmFjaycsXG4gICAgdHJhY2s6IHRyYWNrXG4gIH0pO1xufTtcblxuVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUucmVtb3ZlVHJhY2tfID0gZnVuY3Rpb24ocnRyYWNrKSB7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuICBsZXQgdHJhY2s7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHRyYWNrID0gdGhpc1tpXTtcbiAgICBpZiAodHJhY2sgPT09IHJ0cmFjaykge1xuICAgICAgdGhpcy50cmFja3NfLnNwbGljZShpLCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMudHJpZ2dlcih7XG4gICAgdHlwZTogJ3JlbW92ZXRyYWNrJyxcbiAgICB0cmFjazogdHJhY2tcbiAgfSk7XG59O1xuXG5UZXh0VHJhY2tMaXN0LnByb3RvdHlwZS5nZXRUcmFja0J5SWQgPSBmdW5jdGlvbihpZCkge1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpc1tpXTtcbiAgICBpZiAodHJhY2suaWQgPT09IGlkKSB7XG4gICAgICByZXN1bHQgPSB0cmFjaztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0VHJhY2tMaXN0O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCBzYWZlUGFyc2VUdXBsZSBmcm9tICdzYWZlLWpzb24tcGFyc2UvdHVwbGUnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcblxuY2xhc3MgVGV4dFRyYWNrU2V0dGluZ3MgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG4gICAgdGhpcy5oaWRlKCk7XG5cbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZG9uZS1idXR0b24nKSwgJ2NsaWNrJywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSkpO1xuXG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWRlZmF1bHQtYnV0dG9uJyksICdjbGljaycsIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZmctY29sb3IgPiBzZWxlY3QnKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWJnLWNvbG9yID4gc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLndpbmRvdy1jb2xvciA+IHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtdGV4dC1vcGFjaXR5ID4gc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1iZy1vcGFjaXR5ID4gc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZWRnZS1zdHlsZSBzZWxlY3QnKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtZmFtaWx5IHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZm9udC1wZXJjZW50IHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAyO1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5KCk7XG4gICAgfSkpO1xuXG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWZnLWNvbG9yID4gc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctY29sb3IgPiBzZWxlY3QnKSwgJ2NoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlRGlzcGxheSkpO1xuICAgIEV2ZW50cy5vbih0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLndpbmRvdy1jb2xvciA+IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLXRleHQtb3BhY2l0eSA+IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3QnKSwgJ2NoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlRGlzcGxheSkpO1xuICAgIEV2ZW50cy5vbih0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtcGVyY2VudCBzZWxlY3QnKSwgJ2NoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlRGlzcGxheSkpO1xuICAgIEV2ZW50cy5vbih0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1lZGdlLXN0eWxlIHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtZmFtaWx5IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG5cbiAgICBpZiAocGxheWVyLm9wdGlvbnMoKVsncGVyc2lzdFRleHRUcmFja1NldHRpbmdzJ10pIHtcbiAgICAgIHRoaXMucmVzdG9yZVNldHRpbmdzKCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtY2FwdGlvbi1zZXR0aW5ncyB2anMtbW9kYWwtb3ZlcmxheScsXG4gICAgICBpbm5lckhUTUw6IGNhcHRpb25PcHRpb25zTWVudVRlbXBsYXRlKClcbiAgICB9KTtcbiAgfVxuXG4gIGdldFZhbHVlcygpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZWwoKTtcblxuICAgIGNvbnN0IHRleHRFZGdlID0gZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWVkZ2Utc3R5bGUgc2VsZWN0JykpO1xuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtZm9udC1mYW1pbHkgc2VsZWN0JykpO1xuICAgIGNvbnN0IGZnQ29sb3IgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtZmctY29sb3IgPiBzZWxlY3QnKSk7XG4gICAgY29uc3QgdGV4dE9wYWNpdHkgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtdGV4dC1vcGFjaXR5ID4gc2VsZWN0JykpO1xuICAgIGNvbnN0IGJnQ29sb3IgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctY29sb3IgPiBzZWxlY3QnKSk7XG4gICAgY29uc3QgYmdPcGFjaXR5ID0gZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3QnKSk7XG4gICAgY29uc3Qgd2luZG93Q29sb3IgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy53aW5kb3ctY29sb3IgPiBzZWxlY3QnKSk7XG4gICAgY29uc3Qgd2luZG93T3BhY2l0eSA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdCcpKTtcbiAgICBjb25zdCBmb250UGVyY2VudCA9IHdpbmRvd1sncGFyc2VGbG9hdCddKGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy1mb250LXBlcmNlbnQgPiBzZWxlY3QnKSkpO1xuXG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICdiYWNrZ3JvdW5kT3BhY2l0eSc6IGJnT3BhY2l0eSxcbiAgICAgICd0ZXh0T3BhY2l0eSc6IHRleHRPcGFjaXR5LFxuICAgICAgJ3dpbmRvd09wYWNpdHknOiB3aW5kb3dPcGFjaXR5LFxuICAgICAgJ2VkZ2VTdHlsZSc6IHRleHRFZGdlLFxuICAgICAgJ2ZvbnRGYW1pbHknOiBmb250RmFtaWx5LFxuICAgICAgJ2NvbG9yJzogZmdDb2xvcixcbiAgICAgICdiYWNrZ3JvdW5kQ29sb3InOiBiZ0NvbG9yLFxuICAgICAgJ3dpbmRvd0NvbG9yJzogd2luZG93Q29sb3IsXG4gICAgICAnZm9udFBlcmNlbnQnOiBmb250UGVyY2VudFxuICAgIH07XG4gICAgZm9yIChsZXQgbmFtZSBpbiByZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHRbbmFtZV0gPT09ICcnIHx8IHJlc3VsdFtuYW1lXSA9PT0gJ25vbmUnIHx8IChuYW1lID09PSAnZm9udFBlcmNlbnQnICYmIHJlc3VsdFtuYW1lXSA9PT0gMS4wMCkpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNldFZhbHVlcyh2YWx1ZXMpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZWwoKTtcblxuICAgIHNldFNlbGVjdGVkT3B0aW9uKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtZWRnZS1zdHlsZSBzZWxlY3QnKSwgdmFsdWVzLmVkZ2VTdHlsZSk7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1mb250LWZhbWlseSBzZWxlY3QnKSwgdmFsdWVzLmZvbnRGYW1pbHkpO1xuICAgIHNldFNlbGVjdGVkT3B0aW9uKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtZmctY29sb3IgPiBzZWxlY3QnKSwgdmFsdWVzLmNvbG9yKTtcbiAgICBzZXRTZWxlY3RlZE9wdGlvbihlbC5xdWVyeVNlbGVjdG9yKCcudmpzLXRleHQtb3BhY2l0eSA+IHNlbGVjdCcpLCB2YWx1ZXMudGV4dE9wYWNpdHkpO1xuICAgIHNldFNlbGVjdGVkT3B0aW9uKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctY29sb3IgPiBzZWxlY3QnKSwgdmFsdWVzLmJhY2tncm91bmRDb2xvcik7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1iZy1vcGFjaXR5ID4gc2VsZWN0JyksIHZhbHVlcy5iYWNrZ3JvdW5kT3BhY2l0eSk7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLndpbmRvdy1jb2xvciA+IHNlbGVjdCcpLCB2YWx1ZXMud2luZG93Q29sb3IpO1xuICAgIHNldFNlbGVjdGVkT3B0aW9uKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtd2luZG93LW9wYWNpdHkgPiBzZWxlY3QnKSwgdmFsdWVzLndpbmRvd09wYWNpdHkpO1xuXG4gICAgbGV0IGZvbnRQZXJjZW50ID0gdmFsdWVzLmZvbnRQZXJjZW50O1xuXG4gICAgaWYgKGZvbnRQZXJjZW50KSB7XG4gICAgICBmb250UGVyY2VudCA9IGZvbnRQZXJjZW50LnRvRml4ZWQoMik7XG4gICAgfVxuXG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1mb250LXBlcmNlbnQgPiBzZWxlY3QnKSwgZm9udFBlcmNlbnQpO1xuICB9XG5cbiAgcmVzdG9yZVNldHRpbmdzKCkge1xuICAgIGxldCBbZXJyLCB2YWx1ZXNdID0gc2FmZVBhcnNlVHVwbGUod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd2anMtdGV4dC10cmFjay1zZXR0aW5ncycpKTtcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIExpYi5sb2cuZXJyb3IoZXJyKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVzKSB7XG4gICAgICB0aGlzLnNldFZhbHVlcyh2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVTZXR0aW5ncygpIHtcbiAgICBpZiAoIXRoaXMucGxheWVyXy5vcHRpb25zKClbJ3BlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghTGliLmlzRW1wdHkodmFsdWVzKSkge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Zqcy10ZXh0LXRyYWNrLXNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkodmFsdWVzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Zqcy10ZXh0LXRyYWNrLXNldHRpbmdzJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIHVwZGF0ZURpc3BsYXkoKSB7XG4gICAgbGV0IHR0RGlzcGxheSA9IHRoaXMucGxheWVyXy5nZXRDaGlsZCgndGV4dFRyYWNrRGlzcGxheScpO1xuICAgIGlmICh0dERpc3BsYXkpIHtcbiAgICAgIHR0RGlzcGxheS51cGRhdGVEaXNwbGF5KCk7XG4gICAgfVxuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZXh0VHJhY2tTZXR0aW5ncycsIFRleHRUcmFja1NldHRpbmdzKTtcblxuZnVuY3Rpb24gZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZSh0YXJnZXQpIHtcbiAgbGV0IHNlbGVjdGVkT3B0aW9uO1xuICAvLyBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgc2VsZWN0ZWRPcHRpb25zLCBzbywgZmFsbGJhY2sgdG8gb3B0aW9uc1xuICBpZiAodGFyZ2V0LnNlbGVjdGVkT3B0aW9ucykge1xuICAgIHNlbGVjdGVkT3B0aW9uID0gdGFyZ2V0LnNlbGVjdGVkT3B0aW9uc1swXTtcbiAgfSBlbHNlIGlmICh0YXJnZXQub3B0aW9ucykge1xuICAgIHNlbGVjdGVkT3B0aW9uID0gdGFyZ2V0Lm9wdGlvbnNbdGFyZ2V0Lm9wdGlvbnMuc2VsZWN0ZWRJbmRleF07XG4gIH1cblxuICByZXR1cm4gc2VsZWN0ZWRPcHRpb24udmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkT3B0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0Lm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBvcHRpb24gPSB0YXJnZXQub3B0aW9uc1tpXTtcbiAgICBpZiAob3B0aW9uLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdGFyZ2V0LnNlbGVjdGVkSW5kZXggPSBpO1xufVxuXG5mdW5jdGlvbiBjYXB0aW9uT3B0aW9uc01lbnVUZW1wbGF0ZSgpIHtcbiAgbGV0IHRlbXBsYXRlID0gYDxkaXYgY2xhc3M9XCJ2anMtdHJhY2tzZXR0aW5nc1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInZqcy10cmFja3NldHRpbmdzLWNvbG9yc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmpzLWZnLWNvbG9yIHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInZqcy1sYWJlbFwiPkZvcmVncm91bmQ8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tLTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0ZGRlwiPldoaXRlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMDAwXCI+QmxhY2s8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGMDBcIj5SZWQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwRjBcIj5HcmVlbjwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzAwRlwiPkJsdWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGRjBcIj5ZZWxsb3c8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGMEZcIj5NYWdlbnRhPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMEZGXCI+Q3lhbjwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZqcy10ZXh0LW9wYWNpdHkgdmpzLW9wYWNpdHlcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PcGFxdWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMC41XCI+U2VtaS1PcGFxdWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PiA8IS0tIHZqcy1mZy1jb2xvciAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZqcy1iZy1jb2xvciB2anMtdHJhY2tzZXR0aW5nXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ2anMtbGFiZWxcIj5CYWNrZ3JvdW5kPC9sYWJlbD5cbiAgICAgICAgICAgIDxzZWxlY3Q+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGRkZcIj5XaGl0ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzAwMFwiPkJsYWNrPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRjAwXCI+UmVkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMEYwXCI+R3JlZW48L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwMEZcIj5CbHVlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRkYwXCI+WWVsbG93PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRjBGXCI+TWFnZW50YTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzBGRlwiPkN5YW48L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2anMtYmctb3BhY2l0eSB2anMtb3BhY2l0eVwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMVwiPk9wYXF1ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjAuNVwiPlNlbWktVHJhbnNwYXJlbnQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+VHJhbnNwYXJlbnQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+IDwhLS0gdmpzLWJnLWNvbG9yIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwid2luZG93LWNvbG9yIHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInZqcy1sYWJlbFwiPldpbmRvdzwvbGFiZWw+XG4gICAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRkZGXCI+V2hpdGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwMDBcIj5CbGFjazwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0YwMFwiPlJlZDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzBGMFwiPkdyZWVuPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMDBGXCI+Qmx1ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0ZGMFwiPlllbGxvdzwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0YwRlwiPk1hZ2VudGE8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwRkZcIj5DeWFuPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmpzLXdpbmRvdy1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T3BhcXVlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMC41XCI+U2VtaS1UcmFuc3BhcmVudDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5UcmFuc3BhcmVudDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj4gPCEtLSB2anMtd2luZG93LWNvbG9yIC0tPlxuICAgICAgPC9kaXY+IDwhLS0gdmpzLXRyYWNrc2V0dGluZ3MgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwidmpzLXRyYWNrc2V0dGluZ3MtZm9udFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmpzLWZvbnQtcGVyY2VudCB2anMtdHJhY2tzZXR0aW5nXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwidmpzLWxhYmVsXCI+Rm9udCBTaXplPC9sYWJlbD5cbiAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjAuNTBcIj41MCU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwLjc1XCI+NzUlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMS4wMFwiIHNlbGVjdGVkPjEwMCU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxLjI1XCI+MTI1JTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjEuNTBcIj4xNTAlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMS43NVwiPjE3NSU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIyLjAwXCI+MjAwJTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjMuMDBcIj4zMDAlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNC4wMFwiPjQwMCU8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+IDwhLS0gdmpzLWZvbnQtcGVyY2VudCAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZqcy1lZGdlLXN0eWxlIHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ2anMtbGFiZWxcIj5UZXh0IEVkZ2UgU3R5bGU8L2xhYmVsPlxuICAgICAgICAgIDxzZWxlY3Q+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibm9uZVwiPk5vbmU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyYWlzZWRcIj5SYWlzZWQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkZXByZXNzZWRcIj5EZXByZXNzZWQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ1bmlmb3JtXCI+VW5pZm9ybTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRyb3BzaGFkb3dcIj5Ecm9wc2hhZG93PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PiA8IS0tIHZqcy1lZGdlLXN0eWxlIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmpzLWZvbnQtZmFtaWx5IHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ2anMtbGFiZWxcIj5Gb250IEZhbWlseTwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj5EZWZhdWx0PC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibW9ub3NwYWNlU2VyaWZcIj5Nb25vc3BhY2UgU2VyaWY8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwcm9wb3J0aW9uYWxTZXJpZlwiPlByb3BvcnRpb25hbCBTZXJpZjwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1vbm9zcGFjZVNhbnNTZXJpZlwiPk1vbm9zcGFjZSBTYW5zLVNlcmlmPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicHJvcG9ydGlvbmFsU2Fuc1NlcmlmXCI+UHJvcG9ydGlvbmFsIFNhbnMtU2VyaWY8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjYXN1YWxcIj5DYXN1YWw8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzY3JpcHRcIj5TY3JpcHQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzbWFsbC1jYXBzXCI+U21hbGwgQ2Fwczwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj4gPCEtLSB2anMtZm9udC1mYW1pbHkgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidmpzLXRyYWNrc2V0dGluZ3MtY29udHJvbHNcIj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJ2anMtZGVmYXVsdC1idXR0b25cIj5EZWZhdWx0czwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInZqcy1kb25lLWJ1dHRvblwiPkRvbmU8L2J1dHRvbj5cbiAgICA8L2Rpdj5gO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0VHJhY2tTZXR0aW5ncztcbiIsImltcG9ydCBUZXh0VHJhY2tDdWVMaXN0IGZyb20gJy4vdGV4dC10cmFjay1jdWUtbGlzdCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCAqIGFzIFRleHRUcmFja0VudW0gZnJvbSAnLi90ZXh0LXRyYWNrLWVudW1zJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgWEhSIGZyb20gJy4uL3hoci5qcyc7XG5cbi8qXG4gKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrXG4gKlxuICogaW50ZXJmYWNlIFRleHRUcmFjayA6IEV2ZW50VGFyZ2V0IHtcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIFRleHRUcmFja0tpbmQga2luZDtcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyBsYWJlbDtcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyBsYW5ndWFnZTtcbiAqXG4gKiAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgaWQ7XG4gKiAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgaW5CYW5kTWV0YWRhdGFUcmFja0Rpc3BhdGNoVHlwZTtcbiAqXG4gKiAgIGF0dHJpYnV0ZSBUZXh0VHJhY2tNb2RlIG1vZGU7XG4gKlxuICogICByZWFkb25seSBhdHRyaWJ1dGUgVGV4dFRyYWNrQ3VlTGlzdD8gY3VlcztcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIFRleHRUcmFja0N1ZUxpc3Q/IGFjdGl2ZUN1ZXM7XG4gKlxuICogICB2b2lkIGFkZEN1ZShUZXh0VHJhY2tDdWUgY3VlKTtcbiAqICAgdm9pZCByZW1vdmVDdWUoVGV4dFRyYWNrQ3VlIGN1ZSk7XG4gKlxuICogICBhdHRyaWJ1dGUgRXZlbnRIYW5kbGVyIG9uY3VlY2hhbmdlO1xuICogfTtcbiAqL1xubGV0IFRleHRUcmFjayA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgaWYgKCFvcHRpb25zLnRlY2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgdGVjaCB3YXMgbm90IHByb3ZpZGVkLicpO1xuICB9XG5cbiAgbGV0IHR0ID0gdGhpcztcbiAgaWYgKExpYi5JU19JRTgpIHtcbiAgICB0dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N1c3RvbScpO1xuXG4gICAgZm9yIChsZXQgcHJvcCBpbiBUZXh0VHJhY2sucHJvdG90eXBlKSB7XG4gICAgICB0dFtwcm9wXSA9IFRleHRUcmFjay5wcm90b3R5cGVbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgdHQudGVjaF8gPSBvcHRpb25zLnRlY2g7XG5cbiAgbGV0IG1vZGUgPSBUZXh0VHJhY2tFbnVtLlRleHRUcmFja01vZGVbb3B0aW9uc1snbW9kZSddXSB8fCAnZGlzYWJsZWQnO1xuICBsZXQga2luZCA9IFRleHRUcmFja0VudW0uVGV4dFRyYWNrS2luZFtvcHRpb25zWydraW5kJ11dIHx8ICdzdWJ0aXRsZXMnO1xuICBsZXQgbGFiZWwgPSBvcHRpb25zWydsYWJlbCddIHx8ICcnO1xuICBsZXQgbGFuZ3VhZ2UgPSBvcHRpb25zWydsYW5ndWFnZSddIHx8IG9wdGlvbnNbJ3NyY2xhbmcnXSB8fCAnJztcbiAgbGV0IGlkID0gb3B0aW9uc1snaWQnXSB8fCAndmpzX3RleHRfdHJhY2tfJyArIExpYi5ndWlkKys7XG5cbiAgaWYgKGtpbmQgPT09ICdtZXRhZGF0YScgfHwga2luZCA9PT0gJ2NoYXB0ZXJzJykge1xuICAgIG1vZGUgPSAnaGlkZGVuJztcbiAgfVxuXG4gIHR0LmN1ZXNfID0gW107XG4gIHR0LmFjdGl2ZUN1ZXNfID0gW107XG5cbiAgbGV0IGN1ZXMgPSBuZXcgVGV4dFRyYWNrQ3VlTGlzdCh0dC5jdWVzXyk7XG4gIGxldCBhY3RpdmVDdWVzID0gbmV3IFRleHRUcmFja0N1ZUxpc3QodHQuYWN0aXZlQ3Vlc18pO1xuXG4gIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gIGxldCB0aW1ldXBkYXRlSGFuZGxlciA9IExpYi5iaW5kKHR0LCBmdW5jdGlvbigpIHtcbiAgICB0aGlzWydhY3RpdmVDdWVzJ107XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXNbJ3RyaWdnZXInXSgnY3VlY2hhbmdlJyk7XG4gICAgICBjaGFuZ2VkID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgaWYgKG1vZGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICB0dC50ZWNoXy5vbigndGltZXVwZGF0ZScsIHRpbWV1cGRhdGVIYW5kbGVyKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dCwgJ2tpbmQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBraW5kO1xuICAgIH0sXG4gICAgc2V0OiBGdW5jdGlvbi5wcm90b3R5cGVcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR0LCAnbGFiZWwnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIHNldDogRnVuY3Rpb24ucHJvdG90eXBlXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dCwgJ2xhbmd1YWdlJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbGFuZ3VhZ2U7XG4gICAgfSxcbiAgICBzZXQ6IEZ1bmN0aW9uLnByb3RvdHlwZVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHQsICdpZCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH0sXG4gICAgc2V0OiBGdW5jdGlvbi5wcm90b3R5cGVcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR0LCAnbW9kZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1vZGU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKG5ld01vZGUpIHtcbiAgICAgIGlmICghVGV4dFRyYWNrRW51bS5UZXh0VHJhY2tNb2RlW25ld01vZGVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG1vZGUgPSBuZXdNb2RlO1xuICAgICAgaWYgKG1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICB0aGlzLnRlY2hfLm9uKCd0aW1ldXBkYXRlJywgdGltZXVwZGF0ZUhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyKCdtb2RlY2hhbmdlJyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHQsICdjdWVzJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMubG9hZGVkXykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1ZXM7XG4gICAgfSxcbiAgICBzZXQ6IEZ1bmN0aW9uLnByb3RvdHlwZVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHQsICdhY3RpdmVDdWVzJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMubG9hZGVkXykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXNbJ2N1ZXMnXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUN1ZXM7IC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgIH1cblxuICAgICAgbGV0IGN0ID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgbGV0IGFjdGl2ZSA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXNbJ2N1ZXMnXS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IGN1ZSA9IHRoaXNbJ2N1ZXMnXVtpXTtcbiAgICAgICAgaWYgKGN1ZVsnc3RhcnRUaW1lJ10gPD0gY3QgJiYgY3VlWydlbmRUaW1lJ10gPj0gY3QpIHtcbiAgICAgICAgICBhY3RpdmUucHVzaChjdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGN1ZVsnc3RhcnRUaW1lJ10gPT09IGN1ZVsnZW5kVGltZSddICYmIGN1ZVsnc3RhcnRUaW1lJ10gPD0gY3QgJiYgY3VlWydzdGFydFRpbWUnXSArIDAuNSA+PSBjdCkge1xuICAgICAgICAgIGFjdGl2ZS5wdXNoKGN1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoYWN0aXZlLmxlbmd0aCAhPT0gdGhpcy5hY3RpdmVDdWVzXy5sZW5ndGgpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChpbmRleE9mLmNhbGwodGhpcy5hY3RpdmVDdWVzXywgYWN0aXZlW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFjdGl2ZUN1ZXNfID0gYWN0aXZlO1xuICAgICAgYWN0aXZlQ3Vlcy5zZXRDdWVzXyh0aGlzLmFjdGl2ZUN1ZXNfKTtcblxuICAgICAgcmV0dXJuIGFjdGl2ZUN1ZXM7XG4gICAgfSxcbiAgICBzZXQ6IEZ1bmN0aW9uLnByb3RvdHlwZVxuICB9KTtcblxuICBpZiAob3B0aW9ucy5zcmMpIHtcbiAgICBsb2FkVHJhY2sob3B0aW9ucy5zcmMsIHR0KTtcbiAgfSBlbHNlIHtcbiAgICB0dC5sb2FkZWRfID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChMaWIuSVNfSUU4KSB7XG4gICAgcmV0dXJuIHR0O1xuICB9XG59O1xuXG5UZXh0VHJhY2sucHJvdG90eXBlID0gTGliLm9iai5jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5UZXh0VHJhY2sucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dFRyYWNrO1xuXG4vKlxuICogY3VlY2hhbmdlIC0gT25lIG9yIG1vcmUgY3VlcyBpbiB0aGUgdHJhY2sgaGF2ZSBiZWNvbWUgYWN0aXZlIG9yIHN0b3BwZWQgYmVpbmcgYWN0aXZlLlxuICovXG5UZXh0VHJhY2sucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfID0ge1xuICAnY3VlY2hhbmdlJzogJ2N1ZWNoYW5nZSdcbn07XG5cblRleHRUcmFjay5wcm90b3R5cGUuYWRkQ3VlID0gZnVuY3Rpb24oY3VlKSB7XG4gIGxldCB0cmFja3MgPSB0aGlzLnRlY2hfLnRleHRUcmFja3MoKTtcblxuICBpZiAodHJhY2tzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmFja3NbaV0gIT09IHRoaXMpIHtcbiAgICAgICAgdHJhY2tzW2ldLnJlbW92ZUN1ZShjdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuY3Vlc18ucHVzaChjdWUpO1xuICB0aGlzWydjdWVzJ10uc2V0Q3Vlc18odGhpcy5jdWVzXyk7XG59O1xuXG5UZXh0VHJhY2sucHJvdG90eXBlLnJlbW92ZUN1ZSA9IGZ1bmN0aW9uKHJlbW92ZUN1ZSkge1xuICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5jdWVzXy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY3VlID0gdGhpcy5jdWVzX1tpXTtcbiAgICBpZiAoY3VlID09PSByZW1vdmVDdWUpIHtcbiAgICAgIHRoaXMuY3Vlc18uc3BsaWNlKGksIDEpO1xuICAgICAgcmVtb3ZlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlbW92ZWQpIHtcbiAgICB0aGlzLmN1ZXMuc2V0Q3Vlc18odGhpcy5jdWVzXyk7XG4gIH1cbn07XG5cbi8qXG4gKiBEb3dubG9hZGluZyBzdHVmZiBoYXBwZW5zIGJlbG93IHRoaXMgcG9pbnRcbiAqL1xudmFyIHBhcnNlQ3VlcyA9IGZ1bmN0aW9uKHNyY0NvbnRlbnQsIHRyYWNrKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93WydXZWJWVFQnXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vdHJ5IGFnYWluIGEgYml0IGxhdGVyXG4gICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcGFyc2VDdWVzKHNyY0NvbnRlbnQsIHRyYWNrKTtcbiAgICB9LCAyNSk7XG4gIH1cblxuICBsZXQgcGFyc2VyID0gbmV3IHdpbmRvd1snV2ViVlRUJ11bJ1BhcnNlciddKHdpbmRvdywgd2luZG93Wyd2dHRqcyddLCB3aW5kb3dbJ1dlYlZUVCddWydTdHJpbmdEZWNvZGVyJ10oKSk7XG5cbiAgcGFyc2VyWydvbmN1ZSddID0gZnVuY3Rpb24oY3VlKSB7XG4gICAgdHJhY2suYWRkQ3VlKGN1ZSk7XG4gIH07XG4gIHBhcnNlclsnb25wYXJzaW5nZXJyb3InXSA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgTGliLmxvZy5lcnJvcihlcnJvcik7XG4gIH07XG5cbiAgcGFyc2VyWydwYXJzZSddKHNyY0NvbnRlbnQpO1xuICBwYXJzZXJbJ2ZsdXNoJ10oKTtcbn07XG5cbnZhciBsb2FkVHJhY2sgPSBmdW5jdGlvbihzcmMsIHRyYWNrKSB7XG4gIFhIUihzcmMsIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2UsIHJlc3BvbnNlQm9keSl7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIExpYi5sb2cuZXJyb3IoZXJyKTtcbiAgICB9XG5cblxuICAgIHRyYWNrLmxvYWRlZF8gPSB0cnVlO1xuICAgIHBhcnNlQ3VlcyhyZXNwb25zZUJvZHksIHRyYWNrKTtcbiAgfSkpO1xufTtcblxudmFyIGluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcbiAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcbiAgfVxuXG4gIGxldCBPID0gT2JqZWN0KHRoaXMpO1xuXG4gIGxldCBsZW4gPSBPLmxlbmd0aCA+Pj4gMDtcblxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgbGV0IG4gPSArZnJvbUluZGV4IHx8IDA7XG5cbiAgaWYgKE1hdGguYWJzKG4pID09PSBJbmZpbml0eSkge1xuICAgIG4gPSAwO1xuICB9XG5cbiAgaWYgKG4gPj0gbGVuKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgbGV0IGsgPSBNYXRoLm1heChuID49IDAgPyBuIDogbGVuIC0gTWF0aC5hYnMobiksIDApO1xuXG4gIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgaWYgKGsgaW4gTyAmJiBPW2tdID09PSBzZWFyY2hFbGVtZW50KSB7XG4gICAgICByZXR1cm4gaztcbiAgICB9XG4gICAgaysrO1xuICB9XG4gIHJldHVybiAtMTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRUcmFjaztcbiIsImltcG9ydCB7IG9iaiB9IGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBuYW1lc3BhY2VcbiAqIEBuYW1lc3BhY2VcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciB1dGlsID0ge307XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbnMgb2JqZWN0cywgcmVjdXJzaXZlbHkgbWVyZ2luZyBhbnkgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXMgYXNcbiAqIHdlbGwuICBQcmV2aW91c2x5IGBkZWVwTWVyZ2VgXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBvdmVycmlkZSB2YWx1ZXMgaW5cbiAqIEBwYXJhbSAge09iamVjdH0gb2JqMiBPdmVycmlkaW5nIG9iamVjdFxuICogQHJldHVybiB7T2JqZWN0fSAgICAgIE5ldyBvYmplY3QgLS0gb2JqMSBhbmQgb2JqMiB3aWxsIGJlIHVudG91Y2hlZFxuICovXG52YXIgbWVyZ2VPcHRpb25zID0gZnVuY3Rpb24ob2JqMSwgb2JqMil7XG4gIHZhciBrZXksIHZhbDEsIHZhbDI7XG5cbiAgLy8gbWFrZSBhIGNvcHkgb2Ygb2JqMSBzbyB3ZSdyZSBub3Qgb3ZlcndyaXRpbmcgb3JpZ2luYWwgdmFsdWVzLlxuICAvLyBsaWtlIHByb3RvdHlwZS5vcHRpb25zXyBhbmQgYWxsIHN1YiBvcHRpb25zIG9iamVjdHNcbiAgb2JqMSA9IG9iai5jb3B5KG9iajEpO1xuXG4gIGZvciAoa2V5IGluIG9iajIpe1xuICAgIGlmIChvYmoyLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhbDEgPSBvYmoxW2tleV07XG4gICAgICB2YWwyID0gb2JqMltrZXldO1xuXG4gICAgICAvLyBDaGVjayBpZiBib3RoIHByb3BlcnRpZXMgYXJlIHB1cmUgb2JqZWN0cyBhbmQgZG8gYSBkZWVwIG1lcmdlIGlmIHNvXG4gICAgICBpZiAob2JqLmlzUGxhaW4odmFsMSkgJiYgb2JqLmlzUGxhaW4odmFsMikpIHtcbiAgICAgICAgb2JqMVtrZXldID0gbWVyZ2VPcHRpb25zKHZhbDEsIHZhbDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqMVtrZXldID0gb2JqMltrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqMTtcbn07XG5cbmV4cG9ydCB7IG1lcmdlT3B0aW9ucyB9O1xuIiwiaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbmltcG9ydCBNZWRpYUxvYWRlciBmcm9tICcuL3RlY2gvbG9hZGVyLmpzJztcbmltcG9ydCBIdG1sNSBmcm9tICcuL3RlY2gvaHRtbDUuanMnO1xuaW1wb3J0IEZsYXNoIGZyb20gJy4vdGVjaC9mbGFzaC5qcyc7XG5pbXBvcnQgUG9zdGVySW1hZ2UgZnJvbSAnLi9wb3N0ZXItaW1hZ2UuanMnO1xuaW1wb3J0IFRleHRUcmFja0Rpc3BsYXkgZnJvbSAnLi90cmFja3MvdGV4dC10cmFjay1kaXNwbGF5LmpzJztcbmltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tICcuL2xvYWRpbmctc3Bpbm5lci5qcyc7XG5pbXBvcnQgQmlnUGxheUJ1dHRvbiBmcm9tICcuL2JpZy1wbGF5LWJ1dHRvbi5qcyc7XG5pbXBvcnQgQ29udHJvbEJhciBmcm9tICcuL2NvbnRyb2wtYmFyL2NvbnRyb2wtYmFyLmpzJztcbmltcG9ydCBFcnJvckRpc3BsYXkgZnJvbSAnLi9lcnJvci1kaXNwbGF5LmpzJztcblxuaW1wb3J0IHZpZGVvanMgZnJvbSAnLi9jb3JlJztcbmltcG9ydCAqIGFzIHNldHVwIGZyb20gJy4vc2V0dXAnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi9saWInO1xuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgZXh0ZW5kc0ZuIGZyb20gJy4vZXh0ZW5kcy5qcyc7XG5pbXBvcnQgcGx1Z2luIGZyb20gJy4vcGx1Z2lucy5qcyc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMuanMnO1xuXG5pZiAodHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJyk7XG59XG5cbi8vIFJ1biBBdXRvLWxvYWQgcGxheWVyc1xuLy8gWW91IGhhdmUgdG8gd2FpdCBhdCBsZWFzdCBvbmNlIGluIGNhc2UgdGhpcyBzY3JpcHQgaXMgbG9hZGVkIGFmdGVyIHlvdXIgdmlkZW8gaW4gdGhlIERPTSAod2VpcmQgYmVoYXZpb3Igb25seSB3aXRoIG1pbmlmaWVkIHZlcnNpb24pXG5zZXR1cC5hdXRvU2V0dXBUaW1lb3V0KDEsIHZpZGVvanMpO1xuXG52aWRlb2pzLmdldENvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQ7XG52aWRlb2pzLnJlZ2lzdGVyQ29tcG9uZW50ID0gQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50O1xuXG4vLyBBUElzIHRoYXQgd2lsbCBiZSByZW1vdmVkIHdpdGggNS4wLCBidXQgbmVlZCB0aGVtIHRvIGdldCB0ZXN0cyBwYXNzaW5nXG4vLyBpbiBFUzYgdHJhbnNpdGlvblxudmlkZW9qcy5UT1VDSF9FTkFCTEVEID0gTGliLlRPVUNIX0VOQUJMRUQ7XG52aWRlb2pzLnV0aWwgPSBVdGlsO1xuXG4vLyBQcm9iYWJseSB3YW50IHRvIGtlZXAgdGhpcyBvbmUgZm9yIDUuMD9cbnZpZGVvanMucGxheWVycyA9IFBsYXllci5wbGF5ZXJzO1xuXG52aWRlb2pzLmV4dGVuZHMgPSBleHRlbmRzRm47XG5cbnZpZGVvanMuZ2V0R2xvYmFsT3B0aW9ucyA9ICgpID0+IG9wdGlvbnM7XG52aWRlb2pzLnNldEdsb2JhbE9wdGlvbnMgPSBmdW5jdGlvbihuZXdPcHRpb25zKSB7XG4gIExpYi51dGlsLm1lcmdlT3B0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbn07XG5cbnZpZGVvanMucGx1Z2luID0gcGx1Z2luO1xuXG4vLyBSRU1PVklORzogV2UgcHJvYmFibHkgc2hvdWxkIG5vdCBpbmNsdWRlIHRoaXMgaW4gNS4wIHRob3VnaHQgaXQgd291bGQgbWFrZSBpdFxuLy8gbW9yZSBiYWNrd2FyZHMgY29tcGF0aWJsZVxuLy8gLy8gRXhwb3NlIGJ1dCBkZXByZWNhdGUgdGhlIHdpbmRvd1tjb21wb25lbnROYW1lXSBtZXRob2QgZm9yIGFjY2Vzc2luZyBjb21wb25lbnRzXG4vLyBMaWIub2JqLmVhY2goQ29tcG9uZW50LmNvbXBvbmVudHMsIGZ1bmN0aW9uKG5hbWUsIGNvbXBvbmVudCl7XG4vLyAgIC8vIEEgZGVwcmVjYXRpb24gd2FybmluZyBhcyB0aGUgY29uc3R1Y3RvclxuLy8gICBtb2R1bGUuZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuLy8gICAgIExpYi5sb2cud2FybignVXNpbmcgdmlkZW9qcy4nK25hbWUrJyB0byBhY2Nlc3MgdGhlICcrbmFtZSsnIGNvbXBvbmVudCBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHZpZGVvanMuZ2V0Q29tcG9uZW50KFwiY29tcG9uZW50TmFtZVwiKScpO1xuLy9cbi8vICAgICByZXR1cm4gbmV3IENvbXBvbmVudChwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KTtcbi8vICAgfTtcbi8vXG4vLyAgIC8vIEFsbG93IHRoZSBwcm90b3R5cGUgYW5kIGNsYXNzIG1ldGhvZHMgdG8gYmUgYWNjZXNzaWJsZSBzdGlsbCB0aGlzIHdheVxuLy8gICAvLyBUaG91Z2ggYW55dGhpbmcgdGhhdCBhdHRlbXB0cyB0byBvdmVycmlkZSBjbGFzcyBtZXRob2RzIHdpbGwgbm8gbG9uZ2VyIHdvcmtcbi8vICAgTGliLm9iai5tZXJnZShtb2R1bGUuZXhwb3J0c1tuYW1lXSwgY29tcG9uZW50KTtcbi8vIH0pO1xuXG5leHBvcnQgZGVmYXVsdCB2aWRlb2pzO1xuIiwiaW1wb3J0ICogYXMgVmpzVXRpbHMgZnJvbSAnLi91dGlsJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG4vKipcbiAqIFNpbXBsZSBodHRwIHJlcXVlc3QgZm9yIHJldHJpZXZpbmcgZXh0ZXJuYWwgZmlsZXMgKGUuZy4gdGV4dCB0cmFja3MpXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAvLyB1c2luZyB1cmwgc3RyaW5nXG4gKiAgICAgdmlkZW9qcy54aHIoJ2h0dHA6Ly9leGFtcGxlLmNvbS9teWZpbGUudnR0JywgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlLCByZXNwb25zZUJvZHkpe30pO1xuICpcbiAqICAgICAvLyBvciBvcHRpb25zIGJsb2NrXG4gKiAgICAgdmlkZW9qcy54aHIoe1xuICogICAgICAgdXJpOiAnaHR0cDovL2V4YW1wbGUuY29tL215ZmlsZS52dHQnLFxuICogICAgICAgbWV0aG9kOiAnR0VUJyxcbiAqICAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnXG4gKiAgICAgfSwgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlLCByZXNwb25zZUJvZHkpe1xuICogICAgICAgaWYgKGVycm9yKSB7XG4gKiAgICAgICAgIC8vIGxvZyB0aGUgZXJyb3JcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIC8vIHN1Y2Nlc3NmdWwsIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXNwb25zZVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqXG4gKiBBUEkgaXMgbW9kZWxlZCBhZnRlciB0aGUgUmF5bm9zL3hociwgd2hpY2ggd2UgaG9wZSB0byB1c2UgYWZ0ZXJcbiAqIGdldHRpbmcgYnJvd3NlcmlmeSBpbXBsZW1lbnRlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9SYXlub3MveGhyL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fFN0cmluZ30gIG9wdGlvbnMgICBPcHRpb25zIGJsb2NrIG9yIFVSTCBzdHJpbmdcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgICAgICAgICAgICAgICAgIFRoZSByZXF1ZXN0XG4gKi9cbnZhciB4aHIgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjayl7XG4gIGxldCBhYm9ydFRpbWVvdXQ7XG5cbiAgLy8gSWYgb3B0aW9ucyBpcyBhIHN0cmluZyBpdCdzIHRoZSB1cmxcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgLy8gTWVyZ2Ugd2l0aCBkZWZhdWx0IG9wdGlvbnNcbiAgVmpzVXRpbHMubWVyZ2VPcHRpb25zKHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHRpbWVvdXQ6IDQ1ICogMTAwMFxuICB9LCBvcHRpb25zKTtcblxuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCl7fTtcblxuICBsZXQgWEhSID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0O1xuXG4gIGlmICh0eXBlb2YgWEhSID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFNoaW0gWE1MSHR0cFJlcXVlc3QgZm9yIG9sZGVyIElFc1xuICAgIFhIUiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7IHJldHVybiBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQLjYuMCcpOyB9IGNhdGNoIChlKSB7fVxuICAgICAgdHJ5IHsgcmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuMy4wJyk7IH0gY2F0Y2ggKGYpIHt9XG4gICAgICB0cnkgeyByZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUCcpOyB9IGNhdGNoIChnKSB7fVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdC4nKTtcbiAgICB9O1xuICB9XG5cbiAgbGV0IHJlcXVlc3QgPSBuZXcgWEhSKCk7XG4gIC8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSB1cmwgb24gdGhlIHJlcXVlc3QgaW5zdGFuY2VcbiAgcmVxdWVzdC51cmkgPSBvcHRpb25zLnVyaTtcblxuICBsZXQgdXJsSW5mbyA9IExpYi5wYXJzZVVybChvcHRpb25zLnVyaSk7XG4gIGxldCB3aW5Mb2MgPSB3aW5kb3cubG9jYXRpb247XG5cbiAgbGV0IHN1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dCk7XG4gICAgY2FsbGJhY2sobnVsbCwgcmVxdWVzdCwgcmVxdWVzdC5yZXNwb25zZSB8fCByZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gIH07XG5cbiAgbGV0IGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uKGVycil7XG4gICAgd2luZG93LmNsZWFyVGltZW91dChhYm9ydFRpbWVvdXQpO1xuXG4gICAgaWYgKCFlcnIgfHwgdHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVyciA9IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKGVyciwgcmVxdWVzdCk7XG4gIH07XG5cbiAgLy8gQ2hlY2sgaWYgdXJsIGlzIGZvciBhbm90aGVyIGRvbWFpbi9vcmlnaW5cbiAgLy8gSUU4IGRvZXNuJ3Qga25vdyBsb2NhdGlvbi5vcmlnaW4sIHNvIHdlIHdvbid0IHJlbHkgb24gaXQgaGVyZVxuICBjb25zdCBjcm9zc09yaWdpbiA9ICh1cmxJbmZvLnByb3RvY29sICsgdXJsSW5mby5ob3N0KSAhPT0gKHdpbkxvYy5wcm90b2NvbCArIHdpbkxvYy5ob3N0KTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCAtLSBVc2UgZm9yIElFIGlmIFhNTEhUVFBSZXF1ZXN0MiBpc24ndCBhdmFpbGFibGVcbiAgLy8gJ3dpdGhDcmVkZW50aWFscycgaXMgb25seSBhdmFpbGFibGUgaW4gWE1MSFRUUFJlcXVlc3QyXG4gIC8vIEFsc28gWERvbWFpblJlcXVlc3QgaGFzIGEgbG90IG9mIGdvdGNoYXMsIHNvIG9ubHkgdXNlIGlmIGNyb3NzIGRvbWFpblxuICBpZiAoY3Jvc3NPcmlnaW4gJiYgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkpIHtcbiAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub25sb2FkID0gc3VjY2Vzc0hhbmRsZXI7XG4gICAgcmVxdWVzdC5vbmVycm9yID0gZXJyb3JIYW5kbGVyO1xuICAgIC8vIFRoZXNlIGJsYW5rIGhhbmRsZXJzIG5lZWQgdG8gYmUgc2V0IHRvIGZpeCBpZTlcbiAgICAvLyBodHRwOi8vY3lwcmVzc25vcnRoLmNvbS9wcm9ncmFtbWluZy9pbnRlcm5ldC1leHBsb3Jlci1hYm9ydGluZy1hamF4LXJlcXVlc3RzLWZpeGVkL1xuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKCl7fTtcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBYTUxIVFRQUmVxdWVzdFxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGZpbGVVcmwgPSAodXJsSW5mby5wcm90b2NvbCA9PT0gJ2ZpbGU6JyB8fCB3aW5Mb2MucHJvdG9jb2wgPT09ICdmaWxlOicpO1xuXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgaWYgKHJlcXVlc3QudGltZWRvdXQpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3JIYW5kbGVyKCd0aW1lb3V0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCB8fCBmaWxlVXJsICYmIHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3VjY2Vzc0hhbmRsZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvckhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICBhYm9ydFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJlcXVlc3QudGltZWRvdXQgPSB0cnVlO1xuICAgICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgb3B0aW9ucy50aW1lb3V0KTtcbiAgICB9XG4gIH1cblxuICAvLyBvcGVuIHRoZSBjb25uZWN0aW9uXG4gIHRyeSB7XG4gICAgLy8gVGhpcmQgYXJnIGlzIGFzeW5jLCBvciBpZ25vcmVkIGJ5IFhEb21haW5SZXF1ZXN0XG4gICAgcmVxdWVzdC5vcGVuKG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnLCBvcHRpb25zLnVyaSwgdHJ1ZSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgcmV0dXJuIGVycm9ySGFuZGxlcihlcnIpO1xuICB9XG5cbiAgLy8gd2l0aENyZWRlbnRpYWxzIG9ubHkgc3VwcG9ydGVkIGJ5IFhNTEh0dHBSZXF1ZXN0MlxuICBpZihvcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSkge1xuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGU7XG4gIH1cblxuICAvLyBzZW5kIHRoZSByZXF1ZXN0XG4gIHRyeSB7XG4gICAgcmVxdWVzdC5zZW5kKCk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgcmV0dXJuIGVycm9ySGFuZGxlcihlcnIpO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB4aHI7XG4iXX0=
